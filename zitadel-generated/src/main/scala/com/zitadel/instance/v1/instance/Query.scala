// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.instance.v1.instance

@SerialVersionUID(0L)
final case class Query(
    query: com.zitadel.instance.v1.instance.Query.Query = com.zitadel.instance.v1.instance.Query.Query.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Query] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (query.idQuery.isDefined) {
        val __value = query.idQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      query.idQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getIdQuery: com.zitadel.instance.v1.instance.IdsQuery = query.idQuery.getOrElse(com.zitadel.instance.v1.instance.IdsQuery.defaultInstance)
    def withIdQuery(__v: com.zitadel.instance.v1.instance.IdsQuery): Query = copy(query = com.zitadel.instance.v1.instance.Query.Query.IdQuery(__v))
    def clearQuery: Query = copy(query = com.zitadel.instance.v1.instance.Query.Query.Empty)
    def withQuery(__v: com.zitadel.instance.v1.instance.Query.Query): Query = copy(query = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => query.idQuery.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => query.idQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.instance.v1.instance.Query.type = com.zitadel.instance.v1.instance.Query
    // @@protoc_insertion_point(GeneratedMessage[zitadel.instance.v1.Query])
}

object Query extends scalapb.GeneratedMessageCompanion[com.zitadel.instance.v1.instance.Query] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.instance.v1.instance.Query] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.instance.v1.instance.Query = {
    var __query: com.zitadel.instance.v1.instance.Query.Query = com.zitadel.instance.v1.instance.Query.Query.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __query = com.zitadel.instance.v1.instance.Query.Query.IdQuery(__query.idQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.instance.v1.instance.IdsQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.instance.v1.instance.Query(
        query = __query,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.instance.v1.instance.Query] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.instance.v1.instance.Query(
        query = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.instance.v1.instance.IdsQuery]]).map(com.zitadel.instance.v1.instance.Query.Query.IdQuery(_))
            .getOrElse(com.zitadel.instance.v1.instance.Query.Query.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = InstanceProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = InstanceProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.instance.v1.instance.IdsQuery
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.instance.v1.instance.Query(
    query = com.zitadel.instance.v1.instance.Query.Query.Empty
  )
  sealed trait Query extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isIdQuery: _root_.scala.Boolean = false
    def idQuery: _root_.scala.Option[com.zitadel.instance.v1.instance.IdsQuery] = _root_.scala.None
  }
  object Query {
    @SerialVersionUID(0L)
    case object Empty extends com.zitadel.instance.v1.instance.Query.Query {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class IdQuery(value: com.zitadel.instance.v1.instance.IdsQuery) extends com.zitadel.instance.v1.instance.Query.Query {
      type ValueType = com.zitadel.instance.v1.instance.IdsQuery
      override def isIdQuery: _root_.scala.Boolean = true
      override def idQuery: _root_.scala.Option[com.zitadel.instance.v1.instance.IdsQuery] = Some(value)
      override def number: _root_.scala.Int = 1
    }
  }
  implicit class QueryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.instance.v1.instance.Query]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.instance.v1.instance.Query](_l) {
    def idQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.instance.v1.instance.IdsQuery] = field(_.getIdQuery)((c_, f_) => c_.copy(query = com.zitadel.instance.v1.instance.Query.Query.IdQuery(f_)))
    def query: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.instance.v1.instance.Query.Query] = field(_.query)((c_, f_) => c_.copy(query = f_))
  }
  final val ID_QUERY_FIELD_NUMBER = 1
  def of(
    query: com.zitadel.instance.v1.instance.Query.Query
  ): _root_.com.zitadel.instance.v1.instance.Query = _root_.com.zitadel.instance.v1.instance.Query(
    query
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.instance.v1.Query])
}
