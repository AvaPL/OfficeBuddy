// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.user.v1.user

@SerialVersionUID(0L)
final case class SearchQuery(
    query: com.zitadel.user.v1.user.SearchQuery.Query = com.zitadel.user.v1.user.SearchQuery.Query.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SearchQuery] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (query.userNameQuery.isDefined) {
        val __value = query.userNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.firstNameQuery.isDefined) {
        val __value = query.firstNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.lastNameQuery.isDefined) {
        val __value = query.lastNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.nickNameQuery.isDefined) {
        val __value = query.nickNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.displayNameQuery.isDefined) {
        val __value = query.displayNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.emailQuery.isDefined) {
        val __value = query.emailQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.stateQuery.isDefined) {
        val __value = query.stateQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.typeQuery.isDefined) {
        val __value = query.typeQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.loginNameQuery.isDefined) {
        val __value = query.loginNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      query.userNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.firstNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.lastNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.nickNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.displayNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.emailQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.stateQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.typeQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.loginNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getUserNameQuery: com.zitadel.user.v1.user.UserNameQuery = query.userNameQuery.getOrElse(com.zitadel.user.v1.user.UserNameQuery.defaultInstance)
    def withUserNameQuery(__v: com.zitadel.user.v1.user.UserNameQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.UserNameQuery(__v))
    def getFirstNameQuery: com.zitadel.user.v1.user.FirstNameQuery = query.firstNameQuery.getOrElse(com.zitadel.user.v1.user.FirstNameQuery.defaultInstance)
    def withFirstNameQuery(__v: com.zitadel.user.v1.user.FirstNameQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.FirstNameQuery(__v))
    def getLastNameQuery: com.zitadel.user.v1.user.LastNameQuery = query.lastNameQuery.getOrElse(com.zitadel.user.v1.user.LastNameQuery.defaultInstance)
    def withLastNameQuery(__v: com.zitadel.user.v1.user.LastNameQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.LastNameQuery(__v))
    def getNickNameQuery: com.zitadel.user.v1.user.NickNameQuery = query.nickNameQuery.getOrElse(com.zitadel.user.v1.user.NickNameQuery.defaultInstance)
    def withNickNameQuery(__v: com.zitadel.user.v1.user.NickNameQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.NickNameQuery(__v))
    def getDisplayNameQuery: com.zitadel.user.v1.user.DisplayNameQuery = query.displayNameQuery.getOrElse(com.zitadel.user.v1.user.DisplayNameQuery.defaultInstance)
    def withDisplayNameQuery(__v: com.zitadel.user.v1.user.DisplayNameQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.DisplayNameQuery(__v))
    def getEmailQuery: com.zitadel.user.v1.user.EmailQuery = query.emailQuery.getOrElse(com.zitadel.user.v1.user.EmailQuery.defaultInstance)
    def withEmailQuery(__v: com.zitadel.user.v1.user.EmailQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.EmailQuery(__v))
    def getStateQuery: com.zitadel.user.v1.user.StateQuery = query.stateQuery.getOrElse(com.zitadel.user.v1.user.StateQuery.defaultInstance)
    def withStateQuery(__v: com.zitadel.user.v1.user.StateQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.StateQuery(__v))
    def getTypeQuery: com.zitadel.user.v1.user.TypeQuery = query.typeQuery.getOrElse(com.zitadel.user.v1.user.TypeQuery.defaultInstance)
    def withTypeQuery(__v: com.zitadel.user.v1.user.TypeQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.TypeQuery(__v))
    def getLoginNameQuery: com.zitadel.user.v1.user.LoginNameQuery = query.loginNameQuery.getOrElse(com.zitadel.user.v1.user.LoginNameQuery.defaultInstance)
    def withLoginNameQuery(__v: com.zitadel.user.v1.user.LoginNameQuery): SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.LoginNameQuery(__v))
    def clearQuery: SearchQuery = copy(query = com.zitadel.user.v1.user.SearchQuery.Query.Empty)
    def withQuery(__v: com.zitadel.user.v1.user.SearchQuery.Query): SearchQuery = copy(query = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => query.userNameQuery.orNull
        case 2 => query.firstNameQuery.orNull
        case 3 => query.lastNameQuery.orNull
        case 4 => query.nickNameQuery.orNull
        case 5 => query.displayNameQuery.orNull
        case 6 => query.emailQuery.orNull
        case 7 => query.stateQuery.orNull
        case 8 => query.typeQuery.orNull
        case 9 => query.loginNameQuery.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => query.userNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => query.firstNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => query.lastNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => query.nickNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => query.displayNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => query.emailQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => query.stateQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => query.typeQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => query.loginNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.user.v1.user.SearchQuery.type = com.zitadel.user.v1.user.SearchQuery
    // @@protoc_insertion_point(GeneratedMessage[zitadel.user.v1.SearchQuery])
}

object SearchQuery extends scalapb.GeneratedMessageCompanion[com.zitadel.user.v1.user.SearchQuery] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.user.v1.user.SearchQuery] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.user.v1.user.SearchQuery = {
    var __query: com.zitadel.user.v1.user.SearchQuery.Query = com.zitadel.user.v1.user.SearchQuery.Query.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.UserNameQuery(__query.userNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.FirstNameQuery(__query.firstNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.FirstNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.LastNameQuery(__query.lastNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.LastNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.NickNameQuery(__query.nickNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.NickNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.DisplayNameQuery(__query.displayNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.DisplayNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.EmailQuery(__query.emailQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.EmailQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.StateQuery(__query.stateQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.StateQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.TypeQuery(__query.typeQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.TypeQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __query = com.zitadel.user.v1.user.SearchQuery.Query.LoginNameQuery(__query.loginNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.LoginNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.user.v1.user.SearchQuery(
        query = __query,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.user.v1.user.SearchQuery] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.user.v1.user.SearchQuery(
        query = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserNameQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.UserNameQuery(_))
            .orElse[com.zitadel.user.v1.user.SearchQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.FirstNameQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.FirstNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.SearchQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.LastNameQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.LastNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.SearchQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.NickNameQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.NickNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.SearchQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.DisplayNameQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.DisplayNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.SearchQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.EmailQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.EmailQuery(_)))
            .orElse[com.zitadel.user.v1.user.SearchQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.StateQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.StateQuery(_)))
            .orElse[com.zitadel.user.v1.user.SearchQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.TypeQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.TypeQuery(_)))
            .orElse[com.zitadel.user.v1.user.SearchQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.LoginNameQuery]]).map(com.zitadel.user.v1.user.SearchQuery.Query.LoginNameQuery(_)))
            .getOrElse(com.zitadel.user.v1.user.SearchQuery.Query.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.user.v1.user.UserNameQuery
      case 2 => __out = com.zitadel.user.v1.user.FirstNameQuery
      case 3 => __out = com.zitadel.user.v1.user.LastNameQuery
      case 4 => __out = com.zitadel.user.v1.user.NickNameQuery
      case 5 => __out = com.zitadel.user.v1.user.DisplayNameQuery
      case 6 => __out = com.zitadel.user.v1.user.EmailQuery
      case 7 => __out = com.zitadel.user.v1.user.StateQuery
      case 8 => __out = com.zitadel.user.v1.user.TypeQuery
      case 9 => __out = com.zitadel.user.v1.user.LoginNameQuery
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.user.v1.user.SearchQuery(
    query = com.zitadel.user.v1.user.SearchQuery.Query.Empty
  )
  sealed trait Query extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isUserNameQuery: _root_.scala.Boolean = false
    def isFirstNameQuery: _root_.scala.Boolean = false
    def isLastNameQuery: _root_.scala.Boolean = false
    def isNickNameQuery: _root_.scala.Boolean = false
    def isDisplayNameQuery: _root_.scala.Boolean = false
    def isEmailQuery: _root_.scala.Boolean = false
    def isStateQuery: _root_.scala.Boolean = false
    def isTypeQuery: _root_.scala.Boolean = false
    def isLoginNameQuery: _root_.scala.Boolean = false
    def userNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserNameQuery] = _root_.scala.None
    def firstNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.FirstNameQuery] = _root_.scala.None
    def lastNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.LastNameQuery] = _root_.scala.None
    def nickNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.NickNameQuery] = _root_.scala.None
    def displayNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.DisplayNameQuery] = _root_.scala.None
    def emailQuery: _root_.scala.Option[com.zitadel.user.v1.user.EmailQuery] = _root_.scala.None
    def stateQuery: _root_.scala.Option[com.zitadel.user.v1.user.StateQuery] = _root_.scala.None
    def typeQuery: _root_.scala.Option[com.zitadel.user.v1.user.TypeQuery] = _root_.scala.None
    def loginNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.LoginNameQuery] = _root_.scala.None
  }
  object Query {
    @SerialVersionUID(0L)
    case object Empty extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class UserNameQuery(value: com.zitadel.user.v1.user.UserNameQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserNameQuery
      override def isUserNameQuery: _root_.scala.Boolean = true
      override def userNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserNameQuery] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class FirstNameQuery(value: com.zitadel.user.v1.user.FirstNameQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.FirstNameQuery
      override def isFirstNameQuery: _root_.scala.Boolean = true
      override def firstNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.FirstNameQuery] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class LastNameQuery(value: com.zitadel.user.v1.user.LastNameQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.LastNameQuery
      override def isLastNameQuery: _root_.scala.Boolean = true
      override def lastNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.LastNameQuery] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class NickNameQuery(value: com.zitadel.user.v1.user.NickNameQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.NickNameQuery
      override def isNickNameQuery: _root_.scala.Boolean = true
      override def nickNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.NickNameQuery] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class DisplayNameQuery(value: com.zitadel.user.v1.user.DisplayNameQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.DisplayNameQuery
      override def isDisplayNameQuery: _root_.scala.Boolean = true
      override def displayNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.DisplayNameQuery] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class EmailQuery(value: com.zitadel.user.v1.user.EmailQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.EmailQuery
      override def isEmailQuery: _root_.scala.Boolean = true
      override def emailQuery: _root_.scala.Option[com.zitadel.user.v1.user.EmailQuery] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class StateQuery(value: com.zitadel.user.v1.user.StateQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.StateQuery
      override def isStateQuery: _root_.scala.Boolean = true
      override def stateQuery: _root_.scala.Option[com.zitadel.user.v1.user.StateQuery] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class TypeQuery(value: com.zitadel.user.v1.user.TypeQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.TypeQuery
      override def isTypeQuery: _root_.scala.Boolean = true
      override def typeQuery: _root_.scala.Option[com.zitadel.user.v1.user.TypeQuery] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class LoginNameQuery(value: com.zitadel.user.v1.user.LoginNameQuery) extends com.zitadel.user.v1.user.SearchQuery.Query {
      type ValueType = com.zitadel.user.v1.user.LoginNameQuery
      override def isLoginNameQuery: _root_.scala.Boolean = true
      override def loginNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.LoginNameQuery] = Some(value)
      override def number: _root_.scala.Int = 9
    }
  }
  implicit class SearchQueryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.SearchQuery]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.user.v1.user.SearchQuery](_l) {
    def userNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserNameQuery] = field(_.getUserNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.UserNameQuery(f_)))
    def firstNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.FirstNameQuery] = field(_.getFirstNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.FirstNameQuery(f_)))
    def lastNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.LastNameQuery] = field(_.getLastNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.LastNameQuery(f_)))
    def nickNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.NickNameQuery] = field(_.getNickNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.NickNameQuery(f_)))
    def displayNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.DisplayNameQuery] = field(_.getDisplayNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.DisplayNameQuery(f_)))
    def emailQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.EmailQuery] = field(_.getEmailQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.EmailQuery(f_)))
    def stateQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.StateQuery] = field(_.getStateQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.StateQuery(f_)))
    def typeQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.TypeQuery] = field(_.getTypeQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.TypeQuery(f_)))
    def loginNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.LoginNameQuery] = field(_.getLoginNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.SearchQuery.Query.LoginNameQuery(f_)))
    def query: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.SearchQuery.Query] = field(_.query)((c_, f_) => c_.copy(query = f_))
  }
  final val USER_NAME_QUERY_FIELD_NUMBER = 1
  final val FIRST_NAME_QUERY_FIELD_NUMBER = 2
  final val LAST_NAME_QUERY_FIELD_NUMBER = 3
  final val NICK_NAME_QUERY_FIELD_NUMBER = 4
  final val DISPLAY_NAME_QUERY_FIELD_NUMBER = 5
  final val EMAIL_QUERY_FIELD_NUMBER = 6
  final val STATE_QUERY_FIELD_NUMBER = 7
  final val TYPE_QUERY_FIELD_NUMBER = 8
  final val LOGIN_NAME_QUERY_FIELD_NUMBER = 9
  def of(
    query: com.zitadel.user.v1.user.SearchQuery.Query
  ): _root_.com.zitadel.user.v1.user.SearchQuery = _root_.com.zitadel.user.v1.user.SearchQuery(
    query
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.user.v1.SearchQuery])
}
