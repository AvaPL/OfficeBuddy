// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.policy.v1.policy

object PolicyProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.zitadel.v1.`object`.ObjectProto,
    com.zitadel.idp.v1.idp.IdpProto,
    com.google.protobuf.duration.DurationProto,
    com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto,
    com.validate.validate.ValidateProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.zitadel.policy.v1.policy.OrgIAMPolicy,
      com.zitadel.policy.v1.policy.DomainPolicy,
      com.zitadel.policy.v1.policy.LabelPolicy,
      com.zitadel.policy.v1.policy.LoginPolicy,
      com.zitadel.policy.v1.policy.PasswordComplexityPolicy,
      com.zitadel.policy.v1.policy.PasswordAgePolicy,
      com.zitadel.policy.v1.policy.LockoutPolicy,
      com.zitadel.policy.v1.policy.PrivacyPolicy,
      com.zitadel.policy.v1.policy.NotificationPolicy
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChR6aXRhZGVsL3BvbGljeS5wcm90bxIReml0YWRlbC5wb2xpY3kudjEaFHppdGFkZWwvb2JqZWN0LnByb3RvGhF6aXRhZGVsL
  2lkcC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGi5wcm90b2MtZ2VuLW9wZW5hcGl2Mi9vcHRpb25zL2Fub
  m90YXRpb25zLnByb3RvGhd2YWxpZGF0ZS92YWxpZGF0ZS5wcm90byLSAgoMT3JnSUFNUG9saWN5EkEKB2RldGFpbHMYASABKAsyG
  S56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZGV0YWlscxKUAQoZdXNlcl9sb2dpbl9tdXN0X2JlX2Rvb
  WFpbhgCIAEoCEJa4j8XEhV1c2VyTG9naW5NdXN0QmVEb21haW6SQT0yO3RoZSB1c2VybmFtZSBoYXMgdG8gZW5kIHdpdGggdGhlI
  GRvbWFpbiBvZiBpdHMgb3JnYW5pemF0aW9uUhV1c2VyTG9naW5NdXN0QmVEb21haW4SaAoKaXNfZGVmYXVsdBgDIAEoCEJJ4j8LE
  glpc0RlZmF1bHSSQTgyNmRlZmluZXMgaWYgdGhlIG9yZ2FuaXphdGlvbidzIGFkbWluIGNoYW5nZWQgdGhlIHBvbGljeVIJaXNEZ
  WZhdWx0IuUFCgxEb21haW5Qb2xpY3kSQQoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlsc0IM4j8JEgdkZ
  XRhaWxzUgdkZXRhaWxzEpQBChl1c2VyX2xvZ2luX211c3RfYmVfZG9tYWluGAIgASgIQlriPxcSFXVzZXJMb2dpbk11c3RCZURvb
  WFpbpJBPTI7dGhlIHVzZXJuYW1lIGhhcyB0byBlbmQgd2l0aCB0aGUgZG9tYWluIG9mIGl0cyBvcmdhbml6YXRpb25SFXVzZXJMb
  2dpbk11c3RCZURvbWFpbhJoCgppc19kZWZhdWx0GAMgASgIQkniPwsSCWlzRGVmYXVsdJJBODI2ZGVmaW5lcyBpZiB0aGUgb3JnY
  W5pemF0aW9uJ3MgYWRtaW4gY2hhbmdlZCB0aGUgcG9saWN5Uglpc0RlZmF1bHQSpgEKFHZhbGlkYXRlX29yZ19kb21haW5zGAQgA
  SgIQnTiPxQSEnZhbGlkYXRlT3JnRG9tYWluc5JBWjJYZGVmaW5lcyBpZiBvcmdhbml6YXRpb24gZG9tYWlucyBzaG91bGQgYmUgd
  mFsaWRhdGVkIG9yZyBjb3VudCBhcyB2YWxpZGF0ZWQgYXV0b21hdGljYWxseVISdmFsaWRhdGVPcmdEb21haW5zEucBCitzbXRwX
  3NlbmRlcl9hZGRyZXNzX21hdGNoZXNfaW5zdGFuY2VfZG9tYWluGAUgASgIQokB4j8oEiZzbXRwU2VuZGVyQWRkcmVzc01hdGNoZ
  XNJbnN0YW5jZURvbWFpbpJBWzJZZGVmaW5lcyBpZiB0aGUgU01UUCBzZW5kZXIgYWRkcmVzcyBkb21haW4gc2hvdWxkIG1hdGNoI
  GFuIGV4aXN0aW5nIGRvbWFpbiBvbiB0aGUgaW5zdGFuY2VSJnNtdHBTZW5kZXJBZGRyZXNzTWF0Y2hlc0luc3RhbmNlRG9tYWluI
  psQCgtMYWJlbFBvbGljeRJBCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB
  2RldGFpbHMSYQoNcHJpbWFyeV9jb2xvchgCIAEoCUI84j8OEgxwcmltYXJ5Q29sb3KSQSgyG2hleCB2YWx1ZSBmb3IgcHJpbWFye
  SBjb2xvckoJIiM1NDY5ZDQiUgxwcmltYXJ5Q29sb3ISaAoKaXNfZGVmYXVsdBgEIAEoCEJJ4j8LEglpc0RlZmF1bHSSQTgyNmRlZ
  mluZXMgaWYgdGhlIG9yZ2FuaXphdGlvbidzIGFkbWluIGNoYW5nZWQgdGhlIHBvbGljeVIJaXNEZWZhdWx0Er8BChZoaWRlX2xvZ
  2luX25hbWVfc3VmZml4GAUgASgIQokB4j8VEhNoaWRlTG9naW5OYW1lU3VmZml4kkFuMmxoaWRlcyB0aGUgb3JnIHN1ZmZpeCBvb
  iB0aGUgbG9naW4gZm9ybSBpZiB0aGUgc2NvcGUgInVybjp6aXRhZGVsOmlhbTpvcmc6ZG9tYWluOnByaW1hcnk6e2RvbWFpbm5hb
  WV9IiBpcyBzZXRSE2hpZGVMb2dpbk5hbWVTdWZmaXgSVQoKd2Fybl9jb2xvchgGIAEoCUI24j8LEgl3YXJuQ29sb3KSQSUyGGhle
  CB2YWx1ZSBmb3Igd2FybiBjb2xvckoJIiNDRDNENTYiUgl3YXJuQ29sb3ISbQoQYmFja2dyb3VuZF9jb2xvchgHIAEoCUJC4j8RE
  g9iYWNrZ3JvdW5kQ29sb3KSQSsyHmhleCB2YWx1ZSBmb3IgYmFja2dyb3VuZCBjb2xvckoJIiNGQUZBRkEiUg9iYWNrZ3JvdW5kQ
  29sb3ISVQoKZm9udF9jb2xvchgIIAEoCUI24j8LEglmb250Q29sb3KSQSUyGGhleCB2YWx1ZSBmb3IgZm9udCBjb2xvckoJIiMwM
  DAwMDAiUglmb250Q29sb3ISfQoScHJpbWFyeV9jb2xvcl9kYXJrGAkgASgJQk/iPxISEHByaW1hcnlDb2xvckRhcmuSQTcyKmhle
  CB2YWx1ZSBmb3IgdGhlIHByaW1hcnkgY29sb3IgZGFyayB0aGVtZUoJIiNCQkJBRkEiUhBwcmltYXJ5Q29sb3JEYXJrEoUBChViY
  WNrZ3JvdW5kX2NvbG9yX2RhcmsYCiABKAlCUeI/FRITYmFja2dyb3VuZENvbG9yRGFya5JBNjIpaGV4IHZhbHVlIGZvciBiYWNrZ
  3JvdW5kIGNvbG9yIGRhcmsgdGhlbWVKCSIjMTExODI3IlITYmFja2dyb3VuZENvbG9yRGFyaxJwCg93YXJuX2NvbG9yX2RhcmsYC
  yABKAlCSOI/DxINd2FybkNvbG9yRGFya5JBMzImaGV4IHZhbHVlIGZvciB3YXJuaW5nIGNvbG9yIGRhcmsgdGhlbWVKCSIjRkYzQ
  jVCIlINd2FybkNvbG9yRGFyaxJtCg9mb250X2NvbG9yX2RhcmsYDCABKAlCReI/DxINZm9udENvbG9yRGFya5JBMDIjaGV4IHZhb
  HVlIGZvciBmb250IGNvbG9yIGRhcmsgdGhlbWVKCSIjRkZGRkZGIlINZm9udENvbG9yRGFyaxJCChFkaXNhYmxlX3dhdGVybWFya
  xgNIAEoCEIV4j8SEhBkaXNhYmxlV2F0ZXJtYXJrUhBkaXNhYmxlV2F0ZXJtYXJrEqYBCghsb2dvX3VybBgOIAEoCUKKAeI/CRIHb
  G9nb1VybJJBezIjaGV4IHZhbHVlIGZvciBmb250IGNvbG9yIGRhcmsgdGhlbWVKVCJodHRwczovL2FjbWUuY29tL2Fzc2V0cy92M
  S8xNjU2MTc4NTA2OTI2NTQ2MDEvcG9saWN5L2xhYmVsL2xvZ28tMTgwOTUwNDE2MzIxNDk0NjU3IlIHbG9nb1VybBKmAQoIaWNvb
  l91cmwYDyABKAlCigHiPwkSB2ljb25VcmySQXsyI2hleCB2YWx1ZSBmb3IgZm9udCBjb2xvciBkYXJrIHRoZW1lSlQiaHR0cHM6L
  y9hY21lLmNvbS9hc3NldHMvdjEvMTY1NjE3ODUwNjkyNjU0NjAxL3BvbGljeS9sYWJlbC9pY29uLTE4MDk1MDQ5ODg3NDE3ODgxN
  yJSB2ljb25VcmwSuQEKDWxvZ29fdXJsX2RhcmsYECABKAlClAHiPw0SC2xvZ29VcmxEYXJrkkGAATIjaGV4IHZhbHVlIGZvciBmb
  250IGNvbG9yIGRhcmsgdGhlbWVKWSJodHRwczovL2FjbWUuY29tL2Fzc2V0cy92MS8xNjU2MTc4NTA2OTI2NTQ2MDEvcG9saWN5L
  2xhYmVsL2xvZ28tZGFyay0xODA5NTAyMjkzNzY0NjEzNDUiUgtsb2dvVXJsRGFyaxK5AQoNaWNvbl91cmxfZGFyaxgRIAEoCUKUA
  eI/DRILaWNvblVybERhcmuSQYABMiNoZXggdmFsdWUgZm9yIGZvbnQgY29sb3IgZGFyayB0aGVtZUpZImh0dHBzOi8vYWNtZS5jb
  20vYXNzZXRzL3YxLzE2NTYxNzg1MDY5MjY1NDYwMS9wb2xpY3kvbGFiZWwvaWNvbi1kYXJrLTE4MDk1MDI0MzIzNzQwNTQ0MSJSC
  2ljb25VcmxEYXJrEicKCGZvbnRfdXJsGBIgASgJQgziPwkSB2ZvbnRVcmxSB2ZvbnRVcmwiwBkKC0xvZ2luUG9saWN5EkEKB2Rld
  GFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZGV0YWlscxKcAQoXYWxsb3dfdXNlc
  m5hbWVfcGFzc3dvcmQYAiABKAhCZOI/FxIVYWxsb3dVc2VybmFtZVBhc3N3b3JkkkFHMkVkZWZpbmVzIGlmIGEgdXNlciBpcyBhb
  Gxvd2VkIHRvIGxvZyBpbiB3aXRoIGhpcyB1c2VybmFtZSBhbmQgcGFzc3dvcmRSFWFsbG93VXNlcm5hbWVQYXNzd29yZBKEAQoOY
  Wxsb3dfcmVnaXN0ZXIYAyABKAhCXeI/DxINYWxsb3dSZWdpc3RlcpJBSDJGZGVmaW5lcyBpZiBhIHBlcnNvbiBpcyBhbGxvd2VkI
  HRvIHJlZ2lzdGVyIGEgdXNlciBvbiB0aGlzIG9yZ2FuaXphdGlvblINYWxsb3dSZWdpc3RlchKZAQoSYWxsb3dfZXh0ZXJuYWxfa
  WRwGAQgASgIQmviPxISEGFsbG93RXh0ZXJuYWxJZHCSQVMyUWRlZmluZXMgaWYgYSB1c2VyIGlzIGFsbG93ZWQgdG8gYWRkIGEgZ
  GVmaW5lZCBpZGVudGl0eSBwcm92aWRlci4gRS5nLiBHb29nbGUgYXV0aFIQYWxsb3dFeHRlcm5hbElkcBJiCglmb3JjZV9tZmEYB
  SABKAhCReI/ChIIZm9yY2VNZmGSQTUyM2RlZmluZXMgaWYgYSB1c2VyIE1VU1QgdXNlIGEgbXVsdGktZmFjdG9yIHRvIGxvZyBpb
  lIIZm9yY2VNZmESmAEKEXBhc3N3b3JkbGVzc190eXBlGAYgASgOMiMueml0YWRlbC5wb2xpY3kudjEuUGFzc3dvcmRsZXNzVHlwZ
  UJG4j8SEhBwYXNzd29yZGxlc3NUeXBlkkEuMixkZWZpbmVzIGlmIHBhc3N3b3JkbGVzcyBpcyBhbGxvd2VkIGZvciB1c2Vyc1IQc
  GFzc3dvcmRsZXNzVHlwZRJoCgppc19kZWZhdWx0GAcgASgIQkniPwsSCWlzRGVmYXVsdJJBODI2ZGVmaW5lcyBpZiB0aGUgb3JnY
  W5pemF0aW9uJ3MgYWRtaW4gY2hhbmdlZCB0aGUgcG9saWN5Uglpc0RlZmF1bHQSjQEKE2hpZGVfcGFzc3dvcmRfcmVzZXQYCCABK
  AhCXeI/ExIRaGlkZVBhc3N3b3JkUmVzZXSSQUQyQmRlZmluZXMgaWYgcGFzc3dvcmQgcmVzZXQgbGluayBzaG91bGQgYmUgc2hvd
  24gaW4gdGhlIGxvZ2luIHNjcmVlblIRaGlkZVBhc3N3b3JkUmVzZXQSxwEKGGlnbm9yZV91bmtub3duX3VzZXJuYW1lcxgJIAEoC
  EKMAeI/GBIWaWdub3JlVW5rbm93blVzZXJuYW1lc5JBbjJsZGVmaW5lcyBpZiB1bmtub3duIHVzZXJuYW1lIG9uIGxvZ2luIHNjc
  mVlbiBkaXJlY3RseSByZXR1cm5zIGFuIGVycm9yIG9yIGFsd2F5cyBkaXNwbGF5cyB0aGUgcGFzc3dvcmQgc2NyZWVuUhZpZ25vc
  mVVbmtub3duVXNlcm5hbWVzEtgBChRkZWZhdWx0X3JlZGlyZWN0X3VyaRgKIAEoCUKlAeI/FBISZGVmYXVsdFJlZGlyZWN0VXJpk
  kGKATJpZGVmaW5lcyB3aGVyZSB0aGUgdXNlciB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8gaWYgdGhlIGxvZ2luIGlzIHN0YXJ0ZWQgd
  2l0aG91dCBhcHAgY29udGV4dCAoZS5nLiBmcm9tIG1haWwpSh0iaHR0cHM6Ly9hY21lLmNvbS91aS9jb25zb2xlIlISZGVmYXVsd
  FJlZGlyZWN0VXJpEnsKF3Bhc3N3b3JkX2NoZWNrX2xpZmV0aW1lGAsgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQijiP
  xcSFXBhc3N3b3JkQ2hlY2tMaWZldGltZZJBC0oJIjg2NDAwMHMiUhVwYXNzd29yZENoZWNrTGlmZXRpbWUSiwEKHWV4dGVybmFsX
  2xvZ2luX2NoZWNrX2xpZmV0aW1lGAwgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQi3iPxwSGmV4dGVybmFsTG9naW5Da
  GVja0xpZmV0aW1lkkELSgkiODY0MDAwcyJSGmV4dGVybmFsTG9naW5DaGVja0xpZmV0aW1lEncKFm1mYV9pbml0X3NraXBfbGlmZ
  XRpbWUYDSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CJ+I/FRITbWZhSW5pdFNraXBMaWZldGltZZJBDEoKIjI1OTIwM
  DBzIlITbWZhSW5pdFNraXBMaWZldGltZRKHAQocc2Vjb25kX2ZhY3Rvcl9jaGVja19saWZldGltZRgOIAEoCzIZLmdvb2dsZS5wc
  m90b2J1Zi5EdXJhdGlvbkIr4j8bEhlzZWNvbmRGYWN0b3JDaGVja0xpZmV0aW1lkkEKSggiNjQ4MDBzIlIZc2Vjb25kRmFjdG9yQ
  2hlY2tMaWZldGltZRKEAQobbXVsdGlfZmFjdG9yX2NoZWNrX2xpZmV0aW1lGA8gASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0a
  W9uQiriPxoSGG11bHRpRmFjdG9yQ2hlY2tMaWZldGltZZJBCkoIIjQzMjAwcyJSGG11bHRpRmFjdG9yQ2hlY2tMaWZldGltZRJeC
  g5zZWNvbmRfZmFjdG9ycxgQIAMoDjIjLnppdGFkZWwucG9saWN5LnYxLlNlY29uZEZhY3RvclR5cGVCEuI/DxINc2Vjb25kRmFjd
  G9yc1INc2Vjb25kRmFjdG9ycxJaCg1tdWx0aV9mYWN0b3JzGBEgAygOMiIueml0YWRlbC5wb2xpY3kudjEuTXVsdGlGYWN0b3JUe
  XBlQhHiPw4SDG11bHRpRmFjdG9yc1IMbXVsdGlGYWN0b3JzEkEKBGlkcHMYEiADKAsyIi56aXRhZGVsLmlkcC52MS5JRFBMb2dpb
  lBvbGljeUxpbmtCCeI/BhIEaWRwc1IEaWRwcxKfAgoWYWxsb3dfZG9tYWluX2Rpc2NvdmVyeRgTIAEoCELoAeI/FhIUYWxsb3dEb
  21haW5EaXNjb3ZlcnmSQcsBMsgBSWYgc2V0IHRvIHRydWUsIHRoZSBzdWZmaXggKEBkb21haW4uY29tKSBvZiBhbiB1bmtub3duI
  HVzZXJuYW1lIGlucHV0IG9uIHRoZSBsb2dpbiBzY3JlZW4gd2lsbCBiZSBtYXRjaGVkIGFnYWluc3QgdGhlIG9yZyBkb21haW5zI
  GFuZCB3aWxsIHJlZGlyZWN0IHRvIHRoZSByZWdpc3RyYXRpb24gb2YgdGhhdCBvcmdhbml6YXRpb24gb24gc3VjY2Vzcy5SFGFsb
  G93RG9tYWluRGlzY292ZXJ5Er8BChhkaXNhYmxlX2xvZ2luX3dpdGhfZW1haWwYFCABKAhChQHiPxcSFWRpc2FibGVMb2dpbldpd
  GhFbWFpbJJBaDJmZGVmaW5lcyBpZiB0aGUgdXNlciBjYW4gYWRkaXRpb25hbGx5ICh0byB0aGUgbG9naW4gbmFtZSkgYmUgaWRlb
  nRpZmllZCBieSB0aGVpciB2ZXJpZmllZCBlbWFpbCBhZGRyZXNzUhVkaXNhYmxlTG9naW5XaXRoRW1haWwSvgEKGGRpc2FibGVfb
  G9naW5fd2l0aF9waG9uZRgVIAEoCEKEAeI/FxIVZGlzYWJsZUxvZ2luV2l0aFBob25lkkFnMmVkZWZpbmVzIGlmIHRoZSB1c2VyI
  GNhbiBhZGRpdGlvbmFsbHkgKHRvIHRoZSBsb2dpbiBuYW1lKSBiZSBpZGVudGlmaWVkIGJ5IHRoZWlyIHZlcmlmaWVkIHBob25lI
  G51bWJlclIVZGlzYWJsZUxvZ2luV2l0aFBob25lEtQBChRmb3JjZV9tZmFfbG9jYWxfb25seRgWIAEoCEKiAeI/ExIRZm9yY2VNZ
  mFMb2NhbE9ubHmSQYgBMoUBaWYgYWN0aXZhdGVkLCBvbmx5IGxvY2FsIGF1dGhlbnRpY2F0ZWQgdXNlcnMgYXJlIGZvcmNlZCB0b
  yB1c2UgTUZBLiBBdXRoZW50aWNhdGlvbiB0aHJvdWdoIElEUHMgd29uJ3QgcHJvbXB0IGEgTUZBIHN0ZXAgaW4gdGhlIGxvZ2luL
  lIRZm9yY2VNZmFMb2NhbE9ubHkitAUKGFBhc3N3b3JkQ29tcGxleGl0eVBvbGljeRJBCgdkZXRhaWxzGAEgASgLMhkueml0YWRlb
  C52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2RldGFpbHMSNQoKbWluX2xlbmd0aBgCIAEoBEIW4j8LEgltaW5MZW5nd
  GiSQQVKAyI4IlIJbWluTGVuZ3RoEnQKDWhhc191cHBlcmNhc2UYAyABKAhCT+I/DhIMaGFzVXBwZXJjYXNlkkE7MjlkZWZpbmVzI
  GlmIHRoZSBwYXNzd29yZCBNVVNUIGNvbnRhaW4gYW4gdXBwZXIgY2FzZSBsZXR0ZXJSDGhhc1VwcGVyY2FzZRJyCg1oYXNfbG93Z
  XJjYXNlGAQgASgIQk3iPw4SDGhhc0xvd2VyY2FzZZJBOTI3ZGVmaW5lcyBpZiB0aGUgcGFzc3dvcmQgTVVTVCBjb250YWluIGEgb
  G93ZXJjYXNlIGxldHRlclIMaGFzTG93ZXJjYXNlEl8KCmhhc19udW1iZXIYBSABKAhCQOI/CxIJaGFzTnVtYmVykkEvMi1kZWZpb
  mVzIGlmIHRoZSBwYXNzd29yZCBNVVNUIGNvbnRhaW4gYSBudW1iZXJSCWhhc051bWJlchJpCgpoYXNfc3ltYm9sGAYgASgIQkriP
  wsSCWhhc1N5bWJvbJJBOTI3ZGVmaW5lcyBpZiB0aGUgcGFzc3dvcmQgTVVTVCBjb250YWluIGEgc3ltYm9sLiBFLmcuICIkIlIJa
  GFzU3ltYm9sEmgKCmlzX2RlZmF1bHQYByABKAhCSeI/CxIJaXNEZWZhdWx0kkE4MjZkZWZpbmVzIGlmIHRoZSBvcmdhbml6YXRpb
  24ncyBhZG1pbiBjaGFuZ2VkIHRoZSBwb2xpY3lSCWlzRGVmYXVsdCK+AwoRUGFzc3dvcmRBZ2VQb2xpY3kSQQoHZGV0YWlscxgBI
  AEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlsc0IM4j8JEgdkZXRhaWxzUgdkZXRhaWxzEmQKDG1heF9hZ2VfZGF5cxgCIAEoB
  EJC4j8MEgptYXhBZ2VEYXlzkkEwMidNYXhpbXVtIGRheXMgc2luY2UgbGFzdCBwYXNzd29yZCBjaGFuZ2VKBSIzNjUiUgptYXhBZ
  2VEYXlzEpUBChBleHBpcmVfd2Fybl9kYXlzGAMgASgEQmviPxASDmV4cGlyZVdhcm5EYXlzkkFVMk1EYXlzIGJlZm9yZSB0aGUgc
  GFzc3dvcmQgZXhwaXJ5IHRoZSB1c2VyIGdldHMgbm90aWZpZWQgdG8gY2hhbmdlIHRoZSBwYXNzd29yZEoEIjEwIlIOZXhwaXJlV
  2FybkRheXMSaAoKaXNfZGVmYXVsdBgEIAEoCEJJ4j8LEglpc0RlZmF1bHSSQTgyNmRlZmluZXMgaWYgdGhlIG9yZ2FuaXphdGlvb
  idzIGFkbWluIGNoYW5nZWQgdGhlIHBvbGljeVIJaXNEZWZhdWx0IuADCg1Mb2Nrb3V0UG9saWN5EkEKB2RldGFpbHMYASABKAsyG
  S56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZGV0YWlscxKhAgoVbWF4X3Bhc3N3b3JkX2F0dGVtcHRzG
  AIgASgEQuwB4j8VEhNtYXhQYXNzd29yZEF0dGVtcHRzkkHQATLHAU1heGltdW0gcGFzc3dvcmQgY2hlY2sgYXR0ZW1wdHMgYmVmb
  3JlIHRoZSBhY2NvdW50IGdldHMgbG9ja2VkLiBBdHRlbXB0cyBhcmUgcmVzZXQgYXMgc29vbiBhcyB0aGUgcGFzc3dvcmQgaXMgZ
  W50ZXJlZCBjb3JyZWN0bHkgb3IgdGhlIHBhc3N3b3JkIGlzIHJlc2V0LiBJZiBzZXQgdG8gMCB0aGUgYWNjb3VudCB3aWxsIG5ld
  mVyIGJlIGxvY2tlZC5KBCIxMCJSE21heFBhc3N3b3JkQXR0ZW1wdHMSaAoKaXNfZGVmYXVsdBgEIAEoCEJJ4j8LEglpc0RlZmF1b
  HSSQTgyNmRlZmluZXMgaWYgdGhlIG9yZ2FuaXphdGlvbidzIGFkbWluIGNoYW5nZWQgdGhlIHBvbGljeVIJaXNEZWZhdWx0IqoEC
  g1Qcml2YWN5UG9saWN5EkEKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZ
  GV0YWlscxJdCgh0b3NfbGluaxgCIAEoCUJC4j8JEgd0b3NMaW5rkkEzSjEiaHR0cHM6Ly96aXRhZGVsLmNvbS9kb2NzL2xlZ2FsL
  3Rlcm1zLW9mLXNlcnZpY2UiUgd0b3NMaW5rEmcKDHByaXZhY3lfbGluaxgDIAEoCUJE4j8NEgtwcml2YWN5TGlua5JBMUovImh0d
  HBzOi8veml0YWRlbC5jb20vZG9jcy9sZWdhbC9wcml2YWN5LXBvbGljeSJSC3ByaXZhY3lMaW5rEi0KCmlzX2RlZmF1bHQYBCABK
  AhCDuI/CxIJaXNEZWZhdWx0Uglpc0RlZmF1bHQSXgoJaGVscF9saW5rGAUgASgJQkHiPwoSCGhlbHBMaW5rkkExSi8iaHR0cHM6L
  y96aXRhZGVsLmNvbS9kb2NzL21hbnVhbHMvaW50cm9kdWN0aW9uIlIIaGVscExpbmsSfwoNc3VwcG9ydF9lbWFpbBgGIAEoCUJa4
  j8OEgxzdXBwb3J0RW1haWySQTkyHWhlbHAgLyBzdXBwb3J0IGVtYWlsIGFkZHJlc3MuShgic3VwcG9ydC1lbWFpbEB0ZXN0LmNvb
  SL6QgpyCBjAAtABAWABUgxzdXBwb3J0RW1haWwipAIKEk5vdGlmaWNhdGlvblBvbGljeRJBCgdkZXRhaWxzGAEgASgLMhkueml0Y
  WRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2RldGFpbHMSLQoKaXNfZGVmYXVsdBgCIAEoCEIO4j8LEglpc0RlZ
  mF1bHRSCWlzRGVmYXVsdBKbAQoPcGFzc3dvcmRfY2hhbmdlGAMgASgIQnLiPxASDnBhc3N3b3JkQ2hhbmdlkkFcMlpJZiBzZXQgd
  G8gdHJ1ZSB0aGUgdXNlcnMgd2lsbCBnZXQgYSBub3RpZmljYXRpb24gd2hlbmV2ZXIgdGhlaXIgcGFzc3dvcmQgaGFzIGJlZW4gY
  2hhbmdlZC5SDnBhc3N3b3JkQ2hhbmdlKs0BChBTZWNvbmRGYWN0b3JUeXBlEkcKHlNFQ09ORF9GQUNUT1JfVFlQRV9VTlNQRUNJR
  klFRBAAGiPiPyASHlNFQ09ORF9GQUNUT1JfVFlQRV9VTlNQRUNJRklFRBI3ChZTRUNPTkRfRkFDVE9SX1RZUEVfT1RQEAEaG+I/G
  BIWU0VDT05EX0ZBQ1RPUl9UWVBFX09UUBI3ChZTRUNPTkRfRkFDVE9SX1RZUEVfVTJGEAIaG+I/GBIWU0VDT05EX0ZBQ1RPUl9UW
  VBFX1UyRiqzAQoPTXVsdGlGYWN0b3JUeXBlEkUKHU1VTFRJX0ZBQ1RPUl9UWVBFX1VOU1BFQ0lGSUVEEAAaIuI/HxIdTVVMVElfR
  kFDVE9SX1RZUEVfVU5TUEVDSUZJRUQSWQonTVVMVElfRkFDVE9SX1RZUEVfVTJGX1dJVEhfVkVSSUZJQ0FUSU9OEAEaLOI/KRInT
  VVMVElfRkFDVE9SX1RZUEVfVTJGX1dJVEhfVkVSSUZJQ0FUSU9OKpgBChBQYXNzd29yZGxlc3NUeXBlEkUKHVBBU1NXT1JETEVTU
  19UWVBFX05PVF9BTExPV0VEEAAaIuI/HxIdUEFTU1dPUkRMRVNTX1RZUEVfTk9UX0FMTE9XRUQSPQoZUEFTU1dPUkRMRVNTX1RZU
  EVfQUxMT1dFRBABGh7iPxsSGVBBU1NXT1JETEVTU19UWVBFX0FMTE9XRURCtgEKFWNvbS56aXRhZGVsLnBvbGljeS52MUILUG9sa
  WN5UHJvdG9QAVoqZ2l0aHViLmNvbS96aXRhZGVsL3ppdGFkZWwvcGtnL2dycGMvcG9saWN5ogIDWlBYqgIRWml0YWRlbC5Qb2xpY
  3kuVjHKAhFaaXRhZGVsXFBvbGljeVxWMeICHVppdGFkZWxcUG9saWN5XFYxXEdQQk1ldGFkYXRh6gITWml0YWRlbDo6UG9saWN5O
  jpWMWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.zitadel.v1.`object`.ObjectProto.javaDescriptor,
      com.zitadel.idp.v1.idp.IdpProto.javaDescriptor,
      com.google.protobuf.duration.DurationProto.javaDescriptor,
      com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto.javaDescriptor,
      com.validate.validate.ValidateProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}