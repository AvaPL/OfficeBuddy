// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.admin.v1.admin

@SerialVersionUID(0L)
final case class ImportDataResponse(
    errors: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataError] = _root_.scala.Seq.empty,
    success: _root_.scala.Option[com.zitadel.admin.v1.admin.ImportDataSuccess] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ImportDataResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      errors.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (success.isDefined) {
        val __value = success.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      errors.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      success.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearErrors = copy(errors = _root_.scala.Seq.empty)
    def addErrors(__vs: com.zitadel.admin.v1.admin.ImportDataError *): ImportDataResponse = addAllErrors(__vs)
    def addAllErrors(__vs: Iterable[com.zitadel.admin.v1.admin.ImportDataError]): ImportDataResponse = copy(errors = errors ++ __vs)
    def withErrors(__v: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataError]): ImportDataResponse = copy(errors = __v)
    def getSuccess: com.zitadel.admin.v1.admin.ImportDataSuccess = success.getOrElse(com.zitadel.admin.v1.admin.ImportDataSuccess.defaultInstance)
    def clearSuccess: ImportDataResponse = copy(success = _root_.scala.None)
    def withSuccess(__v: com.zitadel.admin.v1.admin.ImportDataSuccess): ImportDataResponse = copy(success = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => errors
        case 2 => success.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(errors.iterator.map(_.toPMessage).toVector)
        case 2 => success.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.admin.v1.admin.ImportDataResponse.type = com.zitadel.admin.v1.admin.ImportDataResponse
    // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.ImportDataResponse])
}

object ImportDataResponse extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ImportDataResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ImportDataResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.ImportDataResponse = {
    val __errors: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataError] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataError]
    var __success: _root_.scala.Option[com.zitadel.admin.v1.admin.ImportDataSuccess] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __errors += _root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ImportDataError](_input__)
        case 18 =>
          __success = Option(__success.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ImportDataSuccess](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.admin.v1.admin.ImportDataResponse(
        errors = __errors.result(),
        success = __success,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.ImportDataResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.admin.v1.admin.ImportDataResponse(
        errors = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataError]]).getOrElse(_root_.scala.Seq.empty),
        success = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.zitadel.admin.v1.admin.ImportDataSuccess]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(313)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(313)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.admin.v1.admin.ImportDataError
      case 2 => __out = com.zitadel.admin.v1.admin.ImportDataSuccess
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.admin.v1.admin.ImportDataResponse(
    errors = _root_.scala.Seq.empty,
    success = _root_.scala.None
  )
  implicit class ImportDataResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ImportDataResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.ImportDataResponse](_l) {
    def errors: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataError]] = field(_.errors)((c_, f_) => c_.copy(errors = f_))
    def success: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ImportDataSuccess] = field(_.getSuccess)((c_, f_) => c_.copy(success = Option(f_)))
    def optionalSuccess: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.admin.v1.admin.ImportDataSuccess]] = field(_.success)((c_, f_) => c_.copy(success = f_))
  }
  final val ERRORS_FIELD_NUMBER = 1
  final val SUCCESS_FIELD_NUMBER = 2
  def of(
    errors: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataError],
    success: _root_.scala.Option[com.zitadel.admin.v1.admin.ImportDataSuccess]
  ): _root_.com.zitadel.admin.v1.admin.ImportDataResponse = _root_.com.zitadel.admin.v1.admin.ImportDataResponse(
    errors,
    success
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.ImportDataResponse])
}
