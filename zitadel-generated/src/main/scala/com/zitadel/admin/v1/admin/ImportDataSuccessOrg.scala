// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.admin.v1.admin

@SerialVersionUID(0L)
final case class ImportDataSuccessOrg(
    orgId: _root_.scala.Predef.String = "",
    projectIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    projectRoles: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    oidcAppIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    apiAppIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    humanUserIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    machineUserIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    actionIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    triggerActions: _root_.scala.Seq[com.zitadel.management.v1.management.SetTriggerActionsRequest] = _root_.scala.Seq.empty,
    projectGrants: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant] = _root_.scala.Seq.empty,
    userGrants: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant] = _root_.scala.Seq.empty,
    orgMembers: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    projectMembers: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember] = _root_.scala.Seq.empty,
    projectGrantMembers: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember] = _root_.scala.Seq.empty,
    oidcIpds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    jwtIdps: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    idpLinks: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    userLinks: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks] = _root_.scala.Seq.empty,
    userMetadata: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata] = _root_.scala.Seq.empty,
    domains: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    appKeys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    machineKeys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ImportDataSuccessOrg] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = orgId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      projectIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      projectRoles.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      oidcAppIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      apiAppIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      humanUserIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      machineUserIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      actionIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
      }
      triggerActions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      projectGrants.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      userGrants.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      orgMembers.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
      }
      projectMembers.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      projectGrantMembers.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      oidcIpds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, __value)
      }
      jwtIdps.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, __value)
      }
      idpLinks.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, __value)
      }
      userLinks.foreach { __item =>
        val __value = __item
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      userMetadata.foreach { __item =>
        val __value = __item
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      domains.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(20, __value)
      }
      appKeys.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(21, __value)
      }
      machineKeys.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(22, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = orgId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      projectIds.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      projectRoles.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      oidcAppIds.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      apiAppIds.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      humanUserIds.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      machineUserIds.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      actionIds.foreach { __v =>
        val __m = __v
        _output__.writeString(8, __m)
      };
      triggerActions.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      projectGrants.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      userGrants.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      orgMembers.foreach { __v =>
        val __m = __v
        _output__.writeString(12, __m)
      };
      projectMembers.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      projectGrantMembers.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      oidcIpds.foreach { __v =>
        val __m = __v
        _output__.writeString(15, __m)
      };
      jwtIdps.foreach { __v =>
        val __m = __v
        _output__.writeString(16, __m)
      };
      idpLinks.foreach { __v =>
        val __m = __v
        _output__.writeString(17, __m)
      };
      userLinks.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      userMetadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      domains.foreach { __v =>
        val __m = __v
        _output__.writeString(20, __m)
      };
      appKeys.foreach { __v =>
        val __m = __v
        _output__.writeString(21, __m)
      };
      machineKeys.foreach { __v =>
        val __m = __v
        _output__.writeString(22, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withOrgId(__v: _root_.scala.Predef.String): ImportDataSuccessOrg = copy(orgId = __v)
    def clearProjectIds = copy(projectIds = _root_.scala.Seq.empty)
    def addProjectIds(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllProjectIds(__vs)
    def addAllProjectIds(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(projectIds = projectIds ++ __vs)
    def withProjectIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(projectIds = __v)
    def clearProjectRoles = copy(projectRoles = _root_.scala.Seq.empty)
    def addProjectRoles(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllProjectRoles(__vs)
    def addAllProjectRoles(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(projectRoles = projectRoles ++ __vs)
    def withProjectRoles(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(projectRoles = __v)
    def clearOidcAppIds = copy(oidcAppIds = _root_.scala.Seq.empty)
    def addOidcAppIds(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllOidcAppIds(__vs)
    def addAllOidcAppIds(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(oidcAppIds = oidcAppIds ++ __vs)
    def withOidcAppIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(oidcAppIds = __v)
    def clearApiAppIds = copy(apiAppIds = _root_.scala.Seq.empty)
    def addApiAppIds(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllApiAppIds(__vs)
    def addAllApiAppIds(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(apiAppIds = apiAppIds ++ __vs)
    def withApiAppIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(apiAppIds = __v)
    def clearHumanUserIds = copy(humanUserIds = _root_.scala.Seq.empty)
    def addHumanUserIds(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllHumanUserIds(__vs)
    def addAllHumanUserIds(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(humanUserIds = humanUserIds ++ __vs)
    def withHumanUserIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(humanUserIds = __v)
    def clearMachineUserIds = copy(machineUserIds = _root_.scala.Seq.empty)
    def addMachineUserIds(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllMachineUserIds(__vs)
    def addAllMachineUserIds(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(machineUserIds = machineUserIds ++ __vs)
    def withMachineUserIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(machineUserIds = __v)
    def clearActionIds = copy(actionIds = _root_.scala.Seq.empty)
    def addActionIds(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllActionIds(__vs)
    def addAllActionIds(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(actionIds = actionIds ++ __vs)
    def withActionIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(actionIds = __v)
    def clearTriggerActions = copy(triggerActions = _root_.scala.Seq.empty)
    def addTriggerActions(__vs: com.zitadel.management.v1.management.SetTriggerActionsRequest *): ImportDataSuccessOrg = addAllTriggerActions(__vs)
    def addAllTriggerActions(__vs: Iterable[com.zitadel.management.v1.management.SetTriggerActionsRequest]): ImportDataSuccessOrg = copy(triggerActions = triggerActions ++ __vs)
    def withTriggerActions(__v: _root_.scala.Seq[com.zitadel.management.v1.management.SetTriggerActionsRequest]): ImportDataSuccessOrg = copy(triggerActions = __v)
    def clearProjectGrants = copy(projectGrants = _root_.scala.Seq.empty)
    def addProjectGrants(__vs: com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant *): ImportDataSuccessOrg = addAllProjectGrants(__vs)
    def addAllProjectGrants(__vs: Iterable[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant]): ImportDataSuccessOrg = copy(projectGrants = projectGrants ++ __vs)
    def withProjectGrants(__v: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant]): ImportDataSuccessOrg = copy(projectGrants = __v)
    def clearUserGrants = copy(userGrants = _root_.scala.Seq.empty)
    def addUserGrants(__vs: com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant *): ImportDataSuccessOrg = addAllUserGrants(__vs)
    def addAllUserGrants(__vs: Iterable[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant]): ImportDataSuccessOrg = copy(userGrants = userGrants ++ __vs)
    def withUserGrants(__v: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant]): ImportDataSuccessOrg = copy(userGrants = __v)
    def clearOrgMembers = copy(orgMembers = _root_.scala.Seq.empty)
    def addOrgMembers(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllOrgMembers(__vs)
    def addAllOrgMembers(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(orgMembers = orgMembers ++ __vs)
    def withOrgMembers(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(orgMembers = __v)
    def clearProjectMembers = copy(projectMembers = _root_.scala.Seq.empty)
    def addProjectMembers(__vs: com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember *): ImportDataSuccessOrg = addAllProjectMembers(__vs)
    def addAllProjectMembers(__vs: Iterable[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember]): ImportDataSuccessOrg = copy(projectMembers = projectMembers ++ __vs)
    def withProjectMembers(__v: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember]): ImportDataSuccessOrg = copy(projectMembers = __v)
    def clearProjectGrantMembers = copy(projectGrantMembers = _root_.scala.Seq.empty)
    def addProjectGrantMembers(__vs: com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember *): ImportDataSuccessOrg = addAllProjectGrantMembers(__vs)
    def addAllProjectGrantMembers(__vs: Iterable[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember]): ImportDataSuccessOrg = copy(projectGrantMembers = projectGrantMembers ++ __vs)
    def withProjectGrantMembers(__v: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember]): ImportDataSuccessOrg = copy(projectGrantMembers = __v)
    def clearOidcIpds = copy(oidcIpds = _root_.scala.Seq.empty)
    def addOidcIpds(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllOidcIpds(__vs)
    def addAllOidcIpds(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(oidcIpds = oidcIpds ++ __vs)
    def withOidcIpds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(oidcIpds = __v)
    def clearJwtIdps = copy(jwtIdps = _root_.scala.Seq.empty)
    def addJwtIdps(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllJwtIdps(__vs)
    def addAllJwtIdps(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(jwtIdps = jwtIdps ++ __vs)
    def withJwtIdps(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(jwtIdps = __v)
    def clearIdpLinks = copy(idpLinks = _root_.scala.Seq.empty)
    def addIdpLinks(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllIdpLinks(__vs)
    def addAllIdpLinks(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(idpLinks = idpLinks ++ __vs)
    def withIdpLinks(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(idpLinks = __v)
    def clearUserLinks = copy(userLinks = _root_.scala.Seq.empty)
    def addUserLinks(__vs: com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks *): ImportDataSuccessOrg = addAllUserLinks(__vs)
    def addAllUserLinks(__vs: Iterable[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks]): ImportDataSuccessOrg = copy(userLinks = userLinks ++ __vs)
    def withUserLinks(__v: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks]): ImportDataSuccessOrg = copy(userLinks = __v)
    def clearUserMetadata = copy(userMetadata = _root_.scala.Seq.empty)
    def addUserMetadata(__vs: com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata *): ImportDataSuccessOrg = addAllUserMetadata(__vs)
    def addAllUserMetadata(__vs: Iterable[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata]): ImportDataSuccessOrg = copy(userMetadata = userMetadata ++ __vs)
    def withUserMetadata(__v: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata]): ImportDataSuccessOrg = copy(userMetadata = __v)
    def clearDomains = copy(domains = _root_.scala.Seq.empty)
    def addDomains(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllDomains(__vs)
    def addAllDomains(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(domains = domains ++ __vs)
    def withDomains(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(domains = __v)
    def clearAppKeys = copy(appKeys = _root_.scala.Seq.empty)
    def addAppKeys(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllAppKeys(__vs)
    def addAllAppKeys(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(appKeys = appKeys ++ __vs)
    def withAppKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(appKeys = __v)
    def clearMachineKeys = copy(machineKeys = _root_.scala.Seq.empty)
    def addMachineKeys(__vs: _root_.scala.Predef.String *): ImportDataSuccessOrg = addAllMachineKeys(__vs)
    def addAllMachineKeys(__vs: Iterable[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(machineKeys = machineKeys ++ __vs)
    def withMachineKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ImportDataSuccessOrg = copy(machineKeys = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = orgId
          if (__t != "") __t else null
        }
        case 2 => projectIds
        case 3 => projectRoles
        case 4 => oidcAppIds
        case 5 => apiAppIds
        case 6 => humanUserIds
        case 7 => machineUserIds
        case 8 => actionIds
        case 9 => triggerActions
        case 10 => projectGrants
        case 11 => userGrants
        case 12 => orgMembers
        case 13 => projectMembers
        case 14 => projectGrantMembers
        case 15 => oidcIpds
        case 16 => jwtIdps
        case 17 => idpLinks
        case 18 => userLinks
        case 19 => userMetadata
        case 20 => domains
        case 21 => appKeys
        case 22 => machineKeys
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(orgId)
        case 2 => _root_.scalapb.descriptors.PRepeated(projectIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(projectRoles.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(oidcAppIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(apiAppIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(humanUserIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(machineUserIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 8 => _root_.scalapb.descriptors.PRepeated(actionIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 9 => _root_.scalapb.descriptors.PRepeated(triggerActions.iterator.map(_.toPMessage).toVector)
        case 10 => _root_.scalapb.descriptors.PRepeated(projectGrants.iterator.map(_.toPMessage).toVector)
        case 11 => _root_.scalapb.descriptors.PRepeated(userGrants.iterator.map(_.toPMessage).toVector)
        case 12 => _root_.scalapb.descriptors.PRepeated(orgMembers.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 13 => _root_.scalapb.descriptors.PRepeated(projectMembers.iterator.map(_.toPMessage).toVector)
        case 14 => _root_.scalapb.descriptors.PRepeated(projectGrantMembers.iterator.map(_.toPMessage).toVector)
        case 15 => _root_.scalapb.descriptors.PRepeated(oidcIpds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 16 => _root_.scalapb.descriptors.PRepeated(jwtIdps.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 17 => _root_.scalapb.descriptors.PRepeated(idpLinks.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 18 => _root_.scalapb.descriptors.PRepeated(userLinks.iterator.map(_.toPMessage).toVector)
        case 19 => _root_.scalapb.descriptors.PRepeated(userMetadata.iterator.map(_.toPMessage).toVector)
        case 20 => _root_.scalapb.descriptors.PRepeated(domains.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 21 => _root_.scalapb.descriptors.PRepeated(appKeys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 22 => _root_.scalapb.descriptors.PRepeated(machineKeys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.admin.v1.admin.ImportDataSuccessOrg.type = com.zitadel.admin.v1.admin.ImportDataSuccessOrg
    // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.ImportDataSuccessOrg])
}

object ImportDataSuccessOrg extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ImportDataSuccessOrg] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ImportDataSuccessOrg] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.ImportDataSuccessOrg = {
    var __orgId: _root_.scala.Predef.String = ""
    val __projectIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __projectRoles: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __oidcAppIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __apiAppIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __humanUserIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __machineUserIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __actionIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __triggerActions: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.management.v1.management.SetTriggerActionsRequest] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.management.v1.management.SetTriggerActionsRequest]
    val __projectGrants: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant]
    val __userGrants: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant]
    val __orgMembers: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __projectMembers: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember]
    val __projectGrantMembers: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember]
    val __oidcIpds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __jwtIdps: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __idpLinks: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __userLinks: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks]
    val __userMetadata: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata]
    val __domains: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __appKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __machineKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __orgId = _input__.readStringRequireUtf8()
        case 18 =>
          __projectIds += _input__.readStringRequireUtf8()
        case 26 =>
          __projectRoles += _input__.readStringRequireUtf8()
        case 34 =>
          __oidcAppIds += _input__.readStringRequireUtf8()
        case 42 =>
          __apiAppIds += _input__.readStringRequireUtf8()
        case 50 =>
          __humanUserIds += _input__.readStringRequireUtf8()
        case 58 =>
          __machineUserIds += _input__.readStringRequireUtf8()
        case 66 =>
          __actionIds += _input__.readStringRequireUtf8()
        case 74 =>
          __triggerActions += _root_.scalapb.LiteParser.readMessage[com.zitadel.management.v1.management.SetTriggerActionsRequest](_input__)
        case 82 =>
          __projectGrants += _root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant](_input__)
        case 90 =>
          __userGrants += _root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant](_input__)
        case 98 =>
          __orgMembers += _input__.readStringRequireUtf8()
        case 106 =>
          __projectMembers += _root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember](_input__)
        case 114 =>
          __projectGrantMembers += _root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember](_input__)
        case 122 =>
          __oidcIpds += _input__.readStringRequireUtf8()
        case 130 =>
          __jwtIdps += _input__.readStringRequireUtf8()
        case 138 =>
          __idpLinks += _input__.readStringRequireUtf8()
        case 146 =>
          __userLinks += _root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks](_input__)
        case 154 =>
          __userMetadata += _root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata](_input__)
        case 162 =>
          __domains += _input__.readStringRequireUtf8()
        case 170 =>
          __appKeys += _input__.readStringRequireUtf8()
        case 178 =>
          __machineKeys += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.admin.v1.admin.ImportDataSuccessOrg(
        orgId = __orgId,
        projectIds = __projectIds.result(),
        projectRoles = __projectRoles.result(),
        oidcAppIds = __oidcAppIds.result(),
        apiAppIds = __apiAppIds.result(),
        humanUserIds = __humanUserIds.result(),
        machineUserIds = __machineUserIds.result(),
        actionIds = __actionIds.result(),
        triggerActions = __triggerActions.result(),
        projectGrants = __projectGrants.result(),
        userGrants = __userGrants.result(),
        orgMembers = __orgMembers.result(),
        projectMembers = __projectMembers.result(),
        projectGrantMembers = __projectGrantMembers.result(),
        oidcIpds = __oidcIpds.result(),
        jwtIdps = __jwtIdps.result(),
        idpLinks = __idpLinks.result(),
        userLinks = __userLinks.result(),
        userMetadata = __userMetadata.result(),
        domains = __domains.result(),
        appKeys = __appKeys.result(),
        machineKeys = __machineKeys.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.ImportDataSuccessOrg] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.admin.v1.admin.ImportDataSuccessOrg(
        orgId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        projectIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        projectRoles = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        oidcAppIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        apiAppIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        humanUserIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        machineUserIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        actionIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        triggerActions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[com.zitadel.management.v1.management.SetTriggerActionsRequest]]).getOrElse(_root_.scala.Seq.empty),
        projectGrants = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant]]).getOrElse(_root_.scala.Seq.empty),
        userGrants = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant]]).getOrElse(_root_.scala.Seq.empty),
        orgMembers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        projectMembers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember]]).getOrElse(_root_.scala.Seq.empty),
        projectGrantMembers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember]]).getOrElse(_root_.scala.Seq.empty),
        oidcIpds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        jwtIdps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        idpLinks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        userLinks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks]]).getOrElse(_root_.scala.Seq.empty),
        userMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata]]).getOrElse(_root_.scala.Seq.empty),
        domains = __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        appKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        machineKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(316)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(316)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 9 => __out = com.zitadel.management.v1.management.SetTriggerActionsRequest
      case 10 => __out = com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant
      case 11 => __out = com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant
      case 13 => __out = com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember
      case 14 => __out = com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember
      case 18 => __out = com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks
      case 19 => __out = com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.admin.v1.admin.ImportDataSuccessOrg(
    orgId = "",
    projectIds = _root_.scala.Seq.empty,
    projectRoles = _root_.scala.Seq.empty,
    oidcAppIds = _root_.scala.Seq.empty,
    apiAppIds = _root_.scala.Seq.empty,
    humanUserIds = _root_.scala.Seq.empty,
    machineUserIds = _root_.scala.Seq.empty,
    actionIds = _root_.scala.Seq.empty,
    triggerActions = _root_.scala.Seq.empty,
    projectGrants = _root_.scala.Seq.empty,
    userGrants = _root_.scala.Seq.empty,
    orgMembers = _root_.scala.Seq.empty,
    projectMembers = _root_.scala.Seq.empty,
    projectGrantMembers = _root_.scala.Seq.empty,
    oidcIpds = _root_.scala.Seq.empty,
    jwtIdps = _root_.scala.Seq.empty,
    idpLinks = _root_.scala.Seq.empty,
    userLinks = _root_.scala.Seq.empty,
    userMetadata = _root_.scala.Seq.empty,
    domains = _root_.scala.Seq.empty,
    appKeys = _root_.scala.Seq.empty,
    machineKeys = _root_.scala.Seq.empty
  )
  implicit class ImportDataSuccessOrgLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ImportDataSuccessOrg]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.ImportDataSuccessOrg](_l) {
    def orgId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.orgId)((c_, f_) => c_.copy(orgId = f_))
    def projectIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.projectIds)((c_, f_) => c_.copy(projectIds = f_))
    def projectRoles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.projectRoles)((c_, f_) => c_.copy(projectRoles = f_))
    def oidcAppIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.oidcAppIds)((c_, f_) => c_.copy(oidcAppIds = f_))
    def apiAppIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.apiAppIds)((c_, f_) => c_.copy(apiAppIds = f_))
    def humanUserIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.humanUserIds)((c_, f_) => c_.copy(humanUserIds = f_))
    def machineUserIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.machineUserIds)((c_, f_) => c_.copy(machineUserIds = f_))
    def actionIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.actionIds)((c_, f_) => c_.copy(actionIds = f_))
    def triggerActions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.management.v1.management.SetTriggerActionsRequest]] = field(_.triggerActions)((c_, f_) => c_.copy(triggerActions = f_))
    def projectGrants: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant]] = field(_.projectGrants)((c_, f_) => c_.copy(projectGrants = f_))
    def userGrants: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant]] = field(_.userGrants)((c_, f_) => c_.copy(userGrants = f_))
    def orgMembers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.orgMembers)((c_, f_) => c_.copy(orgMembers = f_))
    def projectMembers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember]] = field(_.projectMembers)((c_, f_) => c_.copy(projectMembers = f_))
    def projectGrantMembers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember]] = field(_.projectGrantMembers)((c_, f_) => c_.copy(projectGrantMembers = f_))
    def oidcIpds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.oidcIpds)((c_, f_) => c_.copy(oidcIpds = f_))
    def jwtIdps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.jwtIdps)((c_, f_) => c_.copy(jwtIdps = f_))
    def idpLinks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.idpLinks)((c_, f_) => c_.copy(idpLinks = f_))
    def userLinks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks]] = field(_.userLinks)((c_, f_) => c_.copy(userLinks = f_))
    def userMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata]] = field(_.userMetadata)((c_, f_) => c_.copy(userMetadata = f_))
    def domains: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.domains)((c_, f_) => c_.copy(domains = f_))
    def appKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.appKeys)((c_, f_) => c_.copy(appKeys = f_))
    def machineKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.machineKeys)((c_, f_) => c_.copy(machineKeys = f_))
  }
  final val ORG_ID_FIELD_NUMBER = 1
  final val PROJECT_IDS_FIELD_NUMBER = 2
  final val PROJECT_ROLES_FIELD_NUMBER = 3
  final val OIDC_APP_IDS_FIELD_NUMBER = 4
  final val API_APP_IDS_FIELD_NUMBER = 5
  final val HUMAN_USER_IDS_FIELD_NUMBER = 6
  final val MACHINE_USER_IDS_FIELD_NUMBER = 7
  final val ACTION_IDS_FIELD_NUMBER = 8
  final val TRIGGER_ACTIONS_FIELD_NUMBER = 9
  final val PROJECT_GRANTS_FIELD_NUMBER = 10
  final val USER_GRANTS_FIELD_NUMBER = 11
  final val ORG_MEMBERS_FIELD_NUMBER = 12
  final val PROJECT_MEMBERS_FIELD_NUMBER = 13
  final val PROJECT_GRANT_MEMBERS_FIELD_NUMBER = 14
  final val OIDC_IPDS_FIELD_NUMBER = 15
  final val JWT_IDPS_FIELD_NUMBER = 16
  final val IDP_LINKS_FIELD_NUMBER = 17
  final val USER_LINKS_FIELD_NUMBER = 18
  final val USER_METADATA_FIELD_NUMBER = 19
  final val DOMAINS_FIELD_NUMBER = 20
  final val APP_KEYS_FIELD_NUMBER = 21
  final val MACHINE_KEYS_FIELD_NUMBER = 22
  def of(
    orgId: _root_.scala.Predef.String,
    projectIds: _root_.scala.Seq[_root_.scala.Predef.String],
    projectRoles: _root_.scala.Seq[_root_.scala.Predef.String],
    oidcAppIds: _root_.scala.Seq[_root_.scala.Predef.String],
    apiAppIds: _root_.scala.Seq[_root_.scala.Predef.String],
    humanUserIds: _root_.scala.Seq[_root_.scala.Predef.String],
    machineUserIds: _root_.scala.Seq[_root_.scala.Predef.String],
    actionIds: _root_.scala.Seq[_root_.scala.Predef.String],
    triggerActions: _root_.scala.Seq[com.zitadel.management.v1.management.SetTriggerActionsRequest],
    projectGrants: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrant],
    userGrants: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserGrant],
    orgMembers: _root_.scala.Seq[_root_.scala.Predef.String],
    projectMembers: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectMember],
    projectGrantMembers: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessProjectGrantMember],
    oidcIpds: _root_.scala.Seq[_root_.scala.Predef.String],
    jwtIdps: _root_.scala.Seq[_root_.scala.Predef.String],
    idpLinks: _root_.scala.Seq[_root_.scala.Predef.String],
    userLinks: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserLinks],
    userMetadata: _root_.scala.Seq[com.zitadel.admin.v1.admin.ImportDataSuccessUserMetadata],
    domains: _root_.scala.Seq[_root_.scala.Predef.String],
    appKeys: _root_.scala.Seq[_root_.scala.Predef.String],
    machineKeys: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.com.zitadel.admin.v1.admin.ImportDataSuccessOrg = _root_.com.zitadel.admin.v1.admin.ImportDataSuccessOrg(
    orgId,
    projectIds,
    projectRoles,
    oidcAppIds,
    apiAppIds,
    humanUserIds,
    machineUserIds,
    actionIds,
    triggerActions,
    projectGrants,
    userGrants,
    orgMembers,
    projectMembers,
    projectGrantMembers,
    oidcIpds,
    jwtIdps,
    idpLinks,
    userLinks,
    userMetadata,
    domains,
    appKeys,
    machineKeys
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.ImportDataSuccessOrg])
}
