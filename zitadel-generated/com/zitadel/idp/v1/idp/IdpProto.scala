// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.idp.v1.idp

object IdpProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.zitadel.v1.`object`.ObjectProto,
    com.validate.validate.ValidateProto,
    com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto,
    com.google.protobuf.duration.DurationProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.zitadel.idp.v1.idp.IDP,
      com.zitadel.idp.v1.idp.IDPUserLink,
      com.zitadel.idp.v1.idp.IDPLoginPolicyLink,
      com.zitadel.idp.v1.idp.OIDCConfig,
      com.zitadel.idp.v1.idp.JWTConfig,
      com.zitadel.idp.v1.idp.IDPIDQuery,
      com.zitadel.idp.v1.idp.IDPNameQuery,
      com.zitadel.idp.v1.idp.IDPOwnerTypeQuery,
      com.zitadel.idp.v1.idp.Provider,
      com.zitadel.idp.v1.idp.ProviderConfig,
      com.zitadel.idp.v1.idp.OAuthConfig,
      com.zitadel.idp.v1.idp.GenericOIDCConfig,
      com.zitadel.idp.v1.idp.GitHubConfig,
      com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig,
      com.zitadel.idp.v1.idp.GoogleConfig,
      com.zitadel.idp.v1.idp.GitLabConfig,
      com.zitadel.idp.v1.idp.GitLabSelfHostedConfig,
      com.zitadel.idp.v1.idp.LDAPConfig,
      com.zitadel.idp.v1.idp.AzureADConfig,
      com.zitadel.idp.v1.idp.Options,
      com.zitadel.idp.v1.idp.LDAPAttributes,
      com.zitadel.idp.v1.idp.AzureADTenant
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChF6aXRhZGVsL2lkcC5wcm90bxIOeml0YWRlbC5pZHAudjEaFHppdGFkZWwvb2JqZWN0LnByb3RvGhd2YWxpZGF0ZS92YWxpZ
  GF0ZS5wcm90bxoucHJvdG9jLWdlbi1vcGVuYXBpdjIvb3B0aW9ucy9hbm5vdGF0aW9ucy5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL
  2R1cmF0aW9uLnByb3RvIvkFCgNJRFASLwoCaWQYASABKAlCH+I/BBICaWSSQRVKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSAmlkEkEKB
  2RldGFpbHMYAiABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZGV0YWlscxJhCgVzdGF0ZRgDI
  AEoDjIYLnppdGFkZWwuaWRwLnYxLklEUFN0YXRlQjHiPwcSBXN0YXRlkkEkMiJ0aGUgc3RhdGUgb2YgdGhlIGlkZW50aXR5IHByb
  3ZpZGVyUgVzdGF0ZRIqCgRuYW1lGAQgASgJQhbiPwYSBG5hbWWSQQpKCCJnb29nbGUiUgRuYW1lEqABCgxzdHlsaW5nX3R5cGUYB
  SABKA4yHi56aXRhZGVsLmlkcC52MS5JRFBTdHlsaW5nVHlwZUJd4j8NEgtzdHlsaW5nVHlwZZJBSjJIc29tZSBpZGVudGl0eSBwc
  m92aWRlcnMgc3BlY2lmeSB0aGUgc3R5bGluZyBvZiB0aGUgYnV0dG9uIHRvIHRoZWlyIGxvZ2luUgtzdHlsaW5nVHlwZRJuCgVvd
  25lchgGIAEoDjIcLnppdGFkZWwuaWRwLnYxLklEUE93bmVyVHlwZUI64j8HEgVvd25lcpJBLTIrdGhlIGFkbWluaXN0cmF0b3Igb
  2YgdGhpcyBpZGVudGl0eSBwcm92aWRlclIFb3duZXISTgoLb2lkY19jb25maWcYByABKAsyGi56aXRhZGVsLmlkcC52MS5PSURDQ
  29uZmlnQg/iPwwSCm9pZGNDb25maWdIAFIKb2lkY0NvbmZpZxJKCgpqd3RfY29uZmlnGAkgASgLMhkueml0YWRlbC5pZHAudjEuS
  ldUQ29uZmlnQg7iPwsSCWp3dENvbmZpZ0gAUglqd3RDb25maWcSNgoNYXV0b19yZWdpc3RlchgIIAEoCEIR4j8OEgxhdXRvUmVna
  XN0ZXJSDGF1dG9SZWdpc3RlckIICgZjb25maWcinQUKC0lEUFVzZXJMaW5rElAKB3VzZXJfaWQYASABKAlCN+I/CBIGdXNlcklkk
  kEpMhJ0aGUgaWQgb2YgdGhlIHVzZXJKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSBnVzZXJJZBJaCgZpZHBfaWQYAiABKAlCQ+I/BxIFa
  WRwSWSSQTYyH3RoZSBpZCBvZiB0aGUgaWRlbnRpdHkgcHJvdmlkZXJKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSBWlkcElkElcKCGlkc
  F9uYW1lGAMgASgJQjziPwkSB2lkcE5hbWWSQS0yIXRoZSBuYW1lIG9mIHRoZSBpZGVudGl0eSBwcm92aWRlckoIImdvb2dsZSJSB
  2lkcE5hbWUShQEKEHByb3ZpZGVkX3VzZXJfaWQYBCABKAlCW+I/EBIOcHJvdmlkZWRVc2VySWSSQUUyNHRoZSBpZCBvZiB0aGUgd
  XNlciBwcm92aWRlZCBieSB0aGUgaWRlbnRpdHkgcHJvdmlkZXJKDSJhcy0xMi1kZi04OSJSDnByb3ZpZGVkVXNlcklkEoMBChJwc
  m92aWRlZF91c2VyX25hbWUYBSABKAlCVeI/EhIQcHJvdmlkZWRVc2VyTmFtZZJBPTIfdGhlIGlkIG9mIHRoZSBpZGVudGl0eSBwc
  m92aWRlckoaImdpZ2kubG9uZy1uZWNrQGdtYWlsLmNvbSJSEHByb3ZpZGVkVXNlck5hbWUSeQoIaWRwX3R5cGUYBiABKA4yFy56a
  XRhZGVsLmlkcC52MS5JRFBUeXBlQkXiPwkSB2lkcFR5cGWSQTYyNHRoZSBhdXRob3JpemF0aW9uIGZyYW1ld29yayBvZiB0aGUga
  WRlbnRpdHkgcHJvdmlkZXJSB2lkcFR5cGUi2AIKEklEUExvZ2luUG9saWN5TGluaxJaCgZpZHBfaWQYASABKAlCQ+I/BxIFaWRwS
  WSSQTYyH3RoZSBpZCBvZiB0aGUgaWRlbnRpdHkgcHJvdmlkZXJKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSBWlkcElkElcKCGlkcF9uY
  W1lGAIgASgJQjziPwkSB2lkcE5hbWWSQS0yIXRoZSBuYW1lIG9mIHRoZSBpZGVudGl0eSBwcm92aWRlckoIImdvb2dsZSJSB2lkc
  E5hbWUSjAEKCGlkcF90eXBlGAMgASgOMhcueml0YWRlbC5pZHAudjEuSURQVHlwZUJY4j8JEgdpZHBUeXBlkkFJMjR0aGUgYXV0a
  G9yaXphdGlvbiBmcmFtZXdvcmsgb2YgdGhlIGlkZW50aXR5IHByb3ZpZGVyShFbIklEUF9UWVBFX09JREMiXVIHaWRwVHlwZSLFB
  QoKT0lEQ0NvbmZpZxJbCgljbGllbnRfaWQYASABKAlCPuI/ChIIY2xpZW50SWSSQS4yLGNsaWVudCBpZCBnZW5lcmF0ZWQgYnkgd
  GhlIGlkZW50aXR5IHByb3ZpZGVyUghjbGllbnRJZBJvCgZpc3N1ZXIYAiABKAlCV+I/CBIGaXNzdWVykkFJMih0aGUgT0lEQyBpc
  3N1ZXIgb2YgdGhlIGlkZW50aXR5IHByb3ZpZGVySh0iaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIlIGaXNzdWVyEpMBCgZzY
  29wZXMYAyADKAlCe+I/CBIGc2NvcGVzkkFtMkt0aGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxd
  WVzdCBvbiB0aGUgaWRlbnRpdHkgcHJvdmlkZXJKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXVIGc2NvcGVzErABChRka
  XNwbGF5X25hbWVfbWFwcGluZxgEIAEoDjIgLnppdGFkZWwuaWRwLnYxLk9JRENNYXBwaW5nRmllbGRCXOI/FBISZGlzcGxheU5hb
  WVNYXBwaW5nkkFCMkBkZWZpbml0aW9uIHdoaWNoIGZpZWxkIGlzIG1hcHBlZCB0byB0aGUgZGlzcGxheSBuYW1lIG9mIHRoZSB1c
  2VyUhJkaXNwbGF5TmFtZU1hcHBpbmcSnwEKEHVzZXJuYW1lX21hcHBpbmcYBSABKA4yIC56aXRhZGVsLmlkcC52MS5PSURDTWFwc
  GluZ0ZpZWxkQlLiPxESD3VzZXJuYW1lTWFwcGluZ5JBOzI5ZGVmaW5pdGlvbiB3aGljaCBmaWVsZCBpcyBtYXBwZWQgdG8gdGhlI
  GVtYWlsIG9mIHRoZSB1c2VyUg91c2VybmFtZU1hcHBpbmci2wQKCUpXVENvbmZpZxKMAQoMand0X2VuZHBvaW50GAEgASgJQmniP
  w0SC2p3dEVuZHBvaW50kkFMMit0aGUgZW5kcG9pbnQgd2hlcmUgdGhlIEpXVCBjYW4gYmUgZXh0cmFjdGVkSh0iaHR0cHM6Ly9hY
  2NvdW50cy5nb29nbGUuY29tIvpCB3IFEAEYyAFSC2p3dEVuZHBvaW50EncKBmlzc3VlchgCIAEoCUJf4j8IEgZpc3N1ZXKSQUcyJ
  nRoZSBpc3N1ZXIgb2YgdGhlIEpXVCAoZm9yIHZhbGlkYXRpb24pSh0iaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIvpCB3IFE
  AEYyAFSBmlzc3VlchKqAQoNa2V5c19lbmRwb2ludBgDIAEoCUKEAeI/DhIMa2V5c0VuZHBvaW50kkFmMkB0aGUgZW5kcG9pbnQgd
  G8gdGhlIGtleSAoSldLKSB3aGljaCBpcyB1c2VkIHRvIHNpZ24gdGhlIEpXVCB3aXRoSiIiaHR0cHM6Ly9hY2NvdW50cy5nb29nb
  GUuY29tL2tleXMi+kIHcgUQARjIAVIMa2V5c0VuZHBvaW50EpgBCgtoZWFkZXJfbmFtZRgEIAEoCUJ34j8MEgpoZWFkZXJOYW1lk
  kFbMkl0aGUgbmFtZSBvZiB0aGUgaGVhZGVyIHdoZXJlIHRoZSBKV1QgaXMgc2VudCBpbiwgZGVmYXVsdCBpcyBhdXRob3JpemF0a
  W9uSg4ieC1hdXRoLXRva2VuIvpCB3IFEAEYyAFSCmhlYWRlck5hbWUiRQoKSURQSURRdWVyeRI3CgJpZBgBIAEoCUIn4j8EEgJpZ
  JJBFUoTIjY5NjI5MDIzOTA2NDg4MzM0IvpCBXIDGMgBUgJpZCK7AQoMSURQTmFtZVF1ZXJ5EjIKBG5hbWUYASABKAlCHuI/BhIEb
  mFtZZJBCkoIImdvb2dsZSL6QgVyAxjIAVIEbmFtZRJ3CgZtZXRob2QYAiABKA4yGy56aXRhZGVsLnYxLlRleHRRdWVyeU1ldGhvZ
  EJC4j8IEgZtZXRob2SSQSwyKmRlZmluZXMgd2hpY2ggdGV4dCBlcXVhbGl0eSBtZXRob2QgaXMgdXNlZPpCBYIBAhABUgZtZXRob
  2QinAEKEUlEUE93bmVyVHlwZVF1ZXJ5EoYBCgpvd25lcl90eXBlGAEgASgOMhwueml0YWRlbC5pZHAudjEuSURQT3duZXJUeXBlQ
  kniPwsSCW93bmVyVHlwZZJBMDIuc2VhcmNoIGZvciBjdXN0b20gb3IgZ2xvYmFsIGlkZW50aXR5IHByb3ZpZGVyc/pCBYIBAhABU
  glvd25lclR5cGUiqAMKCFByb3ZpZGVyEi8KAmlkGAEgASgJQh/iPwQSAmlkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQiUgJpZBJBC
  gdkZXRhaWxzGAIgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2RldGFpbHMSOgoFc3RhdGUYA
  yABKA4yGC56aXRhZGVsLmlkcC52MS5JRFBTdGF0ZUIK4j8HEgVzdGF0ZVIFc3RhdGUSKgoEbmFtZRgEIAEoCUIW4j8GEgRuYW1lk
  kEKSggiR29vZ2xlIlIEbmFtZRI+CgVvd25lchgFIAEoDjIcLnppdGFkZWwuaWRwLnYxLklEUE93bmVyVHlwZUIK4j8HEgVvd25lc
  lIFb3duZXISOwoEdHlwZRgGIAEoDjIcLnppdGFkZWwuaWRwLnYxLlByb3ZpZGVyVHlwZUIJ4j8GEgR0eXBlUgR0eXBlEkMKBmNvb
  mZpZxgHIAEoCzIeLnppdGFkZWwuaWRwLnYxLlByb3ZpZGVyQ29uZmlnQgviPwgSBmNvbmZpZ1IGY29uZmlnIroGCg5Qcm92aWRlc
  kNvbmZpZxI/CgdvcHRpb25zGAEgASgLMhcueml0YWRlbC5pZHAudjEuT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb25zEjsKB
  GxkYXAYAiABKAsyGi56aXRhZGVsLmlkcC52MS5MREFQQ29uZmlnQgniPwYSBGxkYXBIAFIEbGRhcBJDCgZnb29nbGUYAyABKAsyH
  C56aXRhZGVsLmlkcC52MS5Hb29nbGVDb25maWdCC+I/CBIGZ29vZ2xlSABSBmdvb2dsZRI/CgVvYXV0aBgEIAEoCzIbLnppdGFkZ
  WwuaWRwLnYxLk9BdXRoQ29uZmlnQgriPwcSBW9hdXRoSABSBW9hdXRoEkIKBG9pZGMYBSABKAsyIS56aXRhZGVsLmlkcC52MS5HZ
  W5lcmljT0lEQ0NvbmZpZ0IJ4j8GEgRvaWRjSABSBG9pZGMSNwoDand0GAYgASgLMhkueml0YWRlbC5pZHAudjEuSldUQ29uZmlnQ
  gjiPwUSA2p3dEgAUgNqd3QSQwoGZ2l0aHViGAcgASgLMhwueml0YWRlbC5pZHAudjEuR2l0SHViQ29uZmlnQgviPwgSBmdpdGh1Y
  kgAUgZnaXRodWISWgoJZ2l0aHViX2VzGAggASgLMiwueml0YWRlbC5pZHAudjEuR2l0SHViRW50ZXJwcmlzZVNlcnZlckNvbmZpZ
  0IN4j8KEghnaXRodWJFc0gAUghnaXRodWJFcxJDCgZnaXRsYWIYCSABKAsyHC56aXRhZGVsLmlkcC52MS5HaXRMYWJDb25maWdCC
  +I/CBIGZ2l0bGFiSABSBmdpdGxhYhJtChJnaXRsYWJfc2VsZl9ob3N0ZWQYCiABKAsyJi56aXRhZGVsLmlkcC52MS5HaXRMYWJTZ
  WxmSG9zdGVkQ29uZmlnQhXiPxISEGdpdGxhYlNlbGZIb3N0ZWRIAFIQZ2l0bGFiU2VsZkhvc3RlZBJICghhenVyZV9hZBgLIAEoC
  zIdLnppdGFkZWwuaWRwLnYxLkF6dXJlQURDb25maWdCDOI/CRIHYXp1cmVBZEgAUgdhenVyZUFkQggKBmNvbmZpZyKfBwoLT0F1d
  GhDb25maWcSaAoJY2xpZW50X2lkGAEgASgJQkviPwoSCGNsaWVudElkkkE7MixjbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IHRoZSBpZ
  GVudGl0eSBwcm92aWRlckoLImNsaWVudC1pZCJSCGNsaWVudElkEr8BChZhdXRob3JpemF0aW9uX2VuZHBvaW50GAIgASgJQocB4
  j8XEhVhdXRob3JpemF0aW9uRW5kcG9pbnSSQWoyOHRoZSBlbmRwb2ludCB3aGVyZSBaSVRBREVMIHNlbmQgdGhlIHVzZXIgdG8gY
  XV0aGVudGljYXRlSi4iaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGgiUhVhdXRob3JpemF0aW9uR
  W5kcG9pbnQSkQEKDnRva2VuX2VuZHBvaW50GAMgASgJQmriPw8SDXRva2VuRW5kcG9pbnSSQVUyLHRoZSBlbmRwb2ludCB3aGVyZ
  SBaSVRBREVMIGNhbiBnZXQgdGhlIHRva2VuSiUiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iUg10b2tlbkVuZ
  HBvaW50EqcBCg11c2VyX2VuZHBvaW50GAQgASgJQoEB4j8OEgx1c2VyRW5kcG9pbnSSQW0yN3RoZSBlbmRwb2ludCB3aGVyZSBaS
  VRBREVMIGNhbiBnZXQgdGhlIHVzZXIgaW5mb3JtYXRpb25KMiJodHRwczovL29wZW5pZGNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vd
  jEvdXNlcmluZm8iUgx1c2VyRW5kcG9pbnQSkwEKBnNjb3BlcxgFIAMoCUJ74j8IEgZzY29wZXOSQW0yS3RoZSBzY29wZXMgcmVxd
  WVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IG9uIHRoZSBpZGVudGl0eSBwcm92aWRlckoeWyJvcGVuaWQiLCAic
  HJvZmlsZSIsICJlbWFpbCJdUgZzY29wZXMSjwEKDGlkX2F0dHJpYnV0ZRgGIAEoCUJs4j8NEgtpZEF0dHJpYnV0ZZJBWTJMZGVma
  W5lcyBob3cgdGhlIGF0dHJpYnV0ZSBpcyBjYWxsZWQgd2hlcmUgWklUQURFTCBjYW4gZ2V0IHRoZSBpZCBvZiB0aGUgdXNlckoJI
  nVzZXJfaWQiUgtpZEF0dHJpYnV0ZSLLAwoRR2VuZXJpY09JRENDb25maWcScAoGaXNzdWVyGAEgASgJQljiPwgSBmlzc3VlcpJBS
  jIodGhlIE9JREMgaXNzdWVyIG9mIHRoZSBpZGVudGl0eSBwcm92aWRlckoeImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS8iU
  gZpc3N1ZXISaAoJY2xpZW50X2lkGAIgASgJQkviPwoSCGNsaWVudElkkkE7MixjbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IHRoZSBpZ
  GVudGl0eSBwcm92aWRlckoLImNsaWVudC1pZCJSCGNsaWVudElkEpMBCgZzY29wZXMYAyADKAlCe+I/CBIGc2NvcGVzkkFtMkt0a
  GUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxdWVzdCBvbiB0aGUgaWRlbnRpdHkgcHJvdmlkZXJKH
  lsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXVIGc2NvcGVzEkQKE2lzX2lkX3Rva2VuX21hcHBpbmcYBCABKAhCFeI/EhIQa
  XNJZFRva2VuTWFwcGluZ1IQaXNJZFRva2VuTWFwcGluZyLyAQoMR2l0SHViQ29uZmlnElsKCWNsaWVudF9pZBgBIAEoCUI+4j8KE
  ghjbGllbnRJZJJBLjIfdGhlIGNsaWVudCBJRCBvZiB0aGUgR2l0SHViIEFwcEoLImNsaWVudC1pZCJSCGNsaWVudElkEoQBCgZzY
  29wZXMYAiADKAlCbOI/CBIGc2NvcGVzkkFeMjx0aGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxd
  WVzdCB0byBHaXRIdWJKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXVIGc2NvcGVzIsgDChxHaXRIdWJFbnRlcnByaXNlU
  2VydmVyQ29uZmlnElsKCWNsaWVudF9pZBgBIAEoCUI+4j8KEghjbGllbnRJZJJBLjIfdGhlIGNsaWVudCBJRCBvZiB0aGUgR2l0S
  HViIEFwcEoLImNsaWVudC1pZCJSCGNsaWVudElkElEKFmF1dGhvcml6YXRpb25fZW5kcG9pbnQYAiABKAlCGuI/FxIVYXV0aG9ya
  XphdGlvbkVuZHBvaW50UhVhdXRob3JpemF0aW9uRW5kcG9pbnQSOQoOdG9rZW5fZW5kcG9pbnQYAyABKAlCEuI/DxINdG9rZW5Fb
  mRwb2ludFINdG9rZW5FbmRwb2ludBI2Cg11c2VyX2VuZHBvaW50GAQgASgJQhHiPw4SDHVzZXJFbmRwb2ludFIMdXNlckVuZHBva
  W50EoQBCgZzY29wZXMYBSADKAlCbOI/CBIGc2NvcGVzkkFeMjx0aGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZ
  yB0aGUgcmVxdWVzdCB0byBHaXRIdWJKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXVIGc2NvcGVzIvYBCgxHb29nbGVDb
  25maWcSXwoJY2xpZW50X2lkGAEgASgJQkLiPwoSCGNsaWVudElkkkEyMiNjbGllbnQgaWQgb2YgdGhlIEdvb2dsZSBhcHBsaWNhd
  GlvbkoLImNsaWVudC1pZCJSCGNsaWVudElkEoQBCgZzY29wZXMYAiADKAlCbOI/CBIGc2NvcGVzkkFeMjx0aGUgc2NvcGVzIHJlc
  XVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxdWVzdCB0byBHb29nbGVKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1ha
  WwiXVIGc2NvcGVzIvYBCgxHaXRMYWJDb25maWcSXwoJY2xpZW50X2lkGAEgASgJQkLiPwoSCGNsaWVudElkkkEyMiNjbGllbnQga
  WQgb2YgdGhlIEdpdExhYiBhcHBsaWNhdGlvbkoLImNsaWVudC1pZCJSCGNsaWVudElkEoQBCgZzY29wZXMYAiADKAlCbOI/CBIGc
  2NvcGVzkkFeMjx0aGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxdWVzdCB0byBHaXRMYWJKHlsib
  3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXVIGc2NvcGVzIqUCChZHaXRMYWJTZWxmSG9zdGVkQ29uZmlnEiMKBmlzc3VlchgBI
  AEoCUIL4j8IEgZpc3N1ZXJSBmlzc3VlchJfCgljbGllbnRfaWQYAiABKAlCQuI/ChIIY2xpZW50SWSSQTIyI2NsaWVudCBpZCBvZ
  iB0aGUgR2l0TGFiIGFwcGxpY2F0aW9uSgsiY2xpZW50LWlkIlIIY2xpZW50SWQShAEKBnNjb3BlcxgDIAMoCUJs4j8IEgZzY29wZ
  XOSQV4yPHRoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IHRvIEdpdExhYkoeWyJvcGVua
  WQiLCAicHJvZmlsZSIsICJlbWFpbCJdUgZzY29wZXMi6QMKCkxEQVBDb25maWcSJgoHc2VydmVycxgBIAMoCUIM4j8JEgdzZXJ2Z
  XJzUgdzZXJ2ZXJzEioKCXN0YXJ0X3RscxgCIAEoCEIN4j8KEghzdGFydFRsc1IIc3RhcnRUbHMSJAoHYmFzZV9kbhgDIAEoCUIL4
  j8IEgZiYXNlRG5SBmJhc2VEbhIkCgdiaW5kX2RuGAQgASgJQgviPwgSBmJpbmREblIGYmluZERuEioKCXVzZXJfYmFzZRgFIAEoC
  UIN4j8KEgh1c2VyQmFzZVIIdXNlckJhc2USRgoTdXNlcl9vYmplY3RfY2xhc3NlcxgGIAMoCUIW4j8TEhF1c2VyT2JqZWN0Q2xhc
  3Nlc1IRdXNlck9iamVjdENsYXNzZXMSMwoMdXNlcl9maWx0ZXJzGAcgAygJQhDiPw0SC3VzZXJGaWx0ZXJzUgt1c2VyRmlsdGVyc
  xJBCgd0aW1lb3V0GAggASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgziPwkSB3RpbWVvdXRSB3RpbWVvdXQSTwoKYXR0c
  mlidXRlcxgJIAEoCzIeLnppdGFkZWwuaWRwLnYxLkxEQVBBdHRyaWJ1dGVzQg/iPwwSCmF0dHJpYnV0ZXNSCmF0dHJpYnV0ZXMij
  AUKDUF6dXJlQURDb25maWcSYQoJY2xpZW50X2lkGAEgASgJQkTiPwoSCGNsaWVudElkkkE0MiVjbGllbnQgaWQgb2YgdGhlIEF6d
  XJlIEFEIGFwcGxpY2F0aW9uSgsiY2xpZW50LWlkIlIIY2xpZW50SWQSmQEKBnRlbmFudBgCIAEoCzIdLnppdGFkZWwuaWRwLnYxL
  kF6dXJlQURUZW5hbnRCYuI/CBIGdGVuYW50kkFUMlJEZWZpbmVzIHdoYXQgdXNlciBhY2NvdW50cyBzaG91bGQgYmUgYWJsZSB0b
  yBsb2dpbiAoUGVyc29uYWwsIE9yZ2FuaXphdGlvbmFsLCBBbGwpUgZ0ZW5hbnQS5QEKDmVtYWlsX3ZlcmlmaWVkGAMgASgIQr0B4
  j8PEg1lbWFpbFZlcmlmaWVkkkGnATKkAUF6dXJlIEFEIGRvZXNuJ3Qgc2VuZCBpZiB0aGUgZW1haWwgaGFzIGJlZW4gdmVyaWZpZ
  WQuIEVuYWJsZSB0aGlzIGlmIHRoZSB1c2VyIGVtYWlsIHNob3VsZCBhbHdheXMgYmUgYWRkZWQgdmVyaWZpZWQgaW4gWklUQURFT
  CAobm8gdmVyaWZpY2F0aW9uIGVtYWlscyB3aWxsIGJlIHNlbnQpUg1lbWFpbFZlcmlmaWVkEpMBCgZzY29wZXMYBCADKAlCe+I/C
  BIGc2NvcGVzkkFtMj50aGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxdWVzdCB0byBBenVyZSBBR
  EorWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCIsICJVc2VyLlJlYWQiXVIGc2NvcGVzIpwFCgdPcHRpb25zEqEBChJpc19sa
  W5raW5nX2FsbG93ZWQYASABKAhCc+I/EhIQaXNMaW5raW5nQWxsb3dlZJJBWzJZRW5hYmxlIGlmIHVzZXJzIHNob3VsZCBiZSBhY
  mxlIHRvIGxpbmsgYW4gZXhpc3RpbmcgWklUQURFTCB1c2VyIHdpdGggYW4gZXh0ZXJuYWwgYWNjb3VudC5SEGlzTGlua2luZ0Fsb
  G93ZWQSrAEKE2lzX2NyZWF0aW9uX2FsbG93ZWQYAiABKAhCfOI/ExIRaXNDcmVhdGlvbkFsbG93ZWSSQWMyYUVuYWJsZSBpZiB1c
  2VycyBzaG91bGQgYmUgYWJsZSB0byBjcmVhdGUgYSBuZXcgYWNjb3VudCBpbiBaSVRBREVMIHdoZW4gdXNpbmcgYW4gZXh0ZXJuY
  WwgYWNjb3VudC5SEWlzQ3JlYXRpb25BbGxvd2VkEqkBChBpc19hdXRvX2NyZWF0aW9uGAMgASgIQn/iPxASDmlzQXV0b0NyZWF0a
  W9ukkFpMmdFbmFibGUgaWYgYSBuZXcgYWNjb3VudCBpbiBaSVRBREVMIHNob3VsZCBiZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd
  2hlbiBsb2dpbiB3aXRoIGFuIGV4dGVybmFsIGFjY291bnQuUg5pc0F1dG9DcmVhdGlvbhKRAQoOaXNfYXV0b191cGRhdGUYBCABK
  AhCa+I/DhIMaXNBdXRvVXBkYXRlkkFXMlVFbmFibGUgaWYgYSB0aGUgWklUQURFTCBhY2NvdW50IGZpZWxkcyBzaG91bGQgYmUgd
  XBkYXRlZCBhdXRvbWF0aWNhbGx5IG9uIGVhY2ggbG9naW4uUgxpc0F1dG9VcGRhdGUi2AgKDkxEQVBBdHRyaWJ1dGVzEjsKDGlkX
  2F0dHJpYnV0ZRgBIAEoCUIY4j8NEgtpZEF0dHJpYnV0ZfpCBXIDGMgBUgtpZEF0dHJpYnV0ZRJRChRmaXJzdF9uYW1lX2F0dHJpY
  nV0ZRgCIAEoCUIf4j8UEhJmaXJzdE5hbWVBdHRyaWJ1dGX6QgVyAxjIAVISZmlyc3ROYW1lQXR0cmlidXRlEk4KE2xhc3RfbmFtZ
  V9hdHRyaWJ1dGUYAyABKAlCHuI/ExIRbGFzdE5hbWVBdHRyaWJ1dGX6QgVyAxjIAVIRbGFzdE5hbWVBdHRyaWJ1dGUSVwoWZGlzc
  GxheV9uYW1lX2F0dHJpYnV0ZRgEIAEoCUIh4j8WEhRkaXNwbGF5TmFtZUF0dHJpYnV0ZfpCBXIDGMgBUhRkaXNwbGF5TmFtZUF0d
  HJpYnV0ZRJOChNuaWNrX25hbWVfYXR0cmlidXRlGAUgASgJQh7iPxMSEW5pY2tOYW1lQXR0cmlidXRl+kIFcgMYyAFSEW5pY2tOY
  W1lQXR0cmlidXRlEmkKHHByZWZlcnJlZF91c2VybmFtZV9hdHRyaWJ1dGUYBiABKAlCJ+I/HBIacHJlZmVycmVkVXNlcm5hbWVBd
  HRyaWJ1dGX6QgVyAxjIAVIacHJlZmVycmVkVXNlcm5hbWVBdHRyaWJ1dGUSRAoPZW1haWxfYXR0cmlidXRlGAcgASgJQhviPxASD
  mVtYWlsQXR0cmlidXRl+kIFcgMYyAFSDmVtYWlsQXR0cmlidXRlEl0KGGVtYWlsX3ZlcmlmaWVkX2F0dHJpYnV0ZRgIIAEoCUIj4
  j8YEhZlbWFpbFZlcmlmaWVkQXR0cmlidXRl+kIFcgMYyAFSFmVtYWlsVmVyaWZpZWRBdHRyaWJ1dGUSRAoPcGhvbmVfYXR0cmlid
  XRlGAkgASgJQhviPxASDnBob25lQXR0cmlidXRl+kIFcgMYyAFSDnBob25lQXR0cmlidXRlEl0KGHBob25lX3ZlcmlmaWVkX2F0d
  HJpYnV0ZRgKIAEoCUIj4j8YEhZwaG9uZVZlcmlmaWVkQXR0cmlidXRl+kIFcgMYyAFSFnBob25lVmVyaWZpZWRBdHRyaWJ1dGUSa
  QoccHJlZmVycmVkX2xhbmd1YWdlX2F0dHJpYnV0ZRgLIAEoCUIn4j8cEhpwcmVmZXJyZWRMYW5ndWFnZUF0dHJpYnV0ZfpCBXIDG
  MgBUhpwcmVmZXJyZWRMYW5ndWFnZUF0dHJpYnV0ZRJRChRhdmF0YXJfdXJsX2F0dHJpYnV0ZRgMIAEoCUIf4j8UEhJhdmF0YXJVc
  mxBdHRyaWJ1dGX6QgVyAxjIAVISYXZhdGFyVXJsQXR0cmlidXRlEkoKEXByb2ZpbGVfYXR0cmlidXRlGA0gASgJQh3iPxISEHByb
  2ZpbGVBdHRyaWJ1dGX6QgVyAxjIAVIQcHJvZmlsZUF0dHJpYnV0ZSKcAQoNQXp1cmVBRFRlbmFudBJVCgt0ZW5hbnRfdHlwZRgBI
  AEoDjIhLnppdGFkZWwuaWRwLnYxLkF6dXJlQURUZW5hbnRUeXBlQg/iPwwSCnRlbmFudFR5cGVIAFIKdGVuYW50VHlwZRIsCgl0Z
  W5hbnRfaWQYAiABKAlCDeI/ChIIdGVuYW50SWRIAFIIdGVuYW50SWRCBgoEdHlwZSqfAQoISURQU3RhdGUSNQoVSURQX1NUQVRFX
  1VOU1BFQ0lGSUVEEAAaGuI/FxIVSURQX1NUQVRFX1VOU1BFQ0lGSUVEEisKEElEUF9TVEFURV9BQ1RJVkUQARoV4j8SEhBJRFBfU
  1RBVEVfQUNUSVZFEi8KEklEUF9TVEFURV9JTkFDVElWRRACGhfiPxQSEklEUF9TVEFURV9JTkFDVElWRSqAAQoOSURQU3R5bGluZ
  1R5cGUSOwoYU1RZTElOR19UWVBFX1VOU1BFQ0lGSUVEEAAaHeI/GhIYU1RZTElOR19UWVBFX1VOU1BFQ0lGSUVEEjEKE1NUWUxJT
  kdfVFlQRV9HT09HTEUQARoY4j8VEhNTVFlMSU5HX1RZUEVfR09PR0xFKooBCgdJRFBUeXBlEjMKFElEUF9UWVBFX1VOU1BFQ0lGS
  UVEEAAaGeI/FhIUSURQX1RZUEVfVU5TUEVDSUZJRUQSJQoNSURQX1RZUEVfT0lEQxABGhLiPw8SDUlEUF9UWVBFX09JREMSIwoMS
  URQX1RZUEVfSldUEAMaEeI/DhIMSURQX1RZUEVfSldUKrcBCgxJRFBPd25lclR5cGUSPwoaSURQX09XTkVSX1RZUEVfVU5TUEVDS
  UZJRUQQABof4j8cEhpJRFBfT1dORVJfVFlQRV9VTlNQRUNJRklFRBI1ChVJRFBfT1dORVJfVFlQRV9TWVNURU0QARoa4j8XEhVJR
  FBfT1dORVJfVFlQRV9TWVNURU0SLwoSSURQX09XTkVSX1RZUEVfT1JHEAIaF+I/FBISSURQX09XTkVSX1RZUEVfT1JHKu8BChBPS
  URDTWFwcGluZ0ZpZWxkEkcKHk9JRENfTUFQUElOR19GSUVMRF9VTlNQRUNJRklFRBAAGiPiPyASHk9JRENfTUFQUElOR19GSUVMR
  F9VTlNQRUNJRklFRBJVCiVPSURDX01BUFBJTkdfRklFTERfUFJFRkVSUkVEX1VTRVJOQU1FEAEaKuI/JxIlT0lEQ19NQVBQSU5HX
  0ZJRUxEX1BSRUZFUlJFRF9VU0VSTkFNRRI7ChhPSURDX01BUFBJTkdfRklFTERfRU1BSUwQAhod4j8aEhhPSURDX01BUFBJTkdfR
  klFTERfRU1BSUwqggEKDElEUEZpZWxkTmFtZRI/ChpJRFBfRklFTERfTkFNRV9VTlNQRUNJRklFRBAAGh/iPxwSGklEUF9GSUVMR
  F9OQU1FX1VOU1BFQ0lGSUVEEjEKE0lEUF9GSUVMRF9OQU1FX05BTUUQARoY4j8VEhNJRFBfRklFTERfTkFNRV9OQU1FKvEECgxQc
  m92aWRlclR5cGUSPQoZUFJPVklERVJfVFlQRV9VTlNQRUNJRklFRBAAGh7iPxsSGVBST1ZJREVSX1RZUEVfVU5TUEVDSUZJRUQSL
  woSUFJPVklERVJfVFlQRV9PSURDEAEaF+I/FBISUFJPVklERVJfVFlQRV9PSURDEi0KEVBST1ZJREVSX1RZUEVfSldUEAIaFuI/E
  xIRUFJPVklERVJfVFlQRV9KV1QSLwoSUFJPVklERVJfVFlQRV9MREFQEAMaF+I/FBISUFJPVklERVJfVFlQRV9MREFQEjEKE1BST
  1ZJREVSX1RZUEVfT0FVVEgQBBoY4j8VEhNQUk9WSURFUl9UWVBFX09BVVRIEjcKFlBST1ZJREVSX1RZUEVfQVpVUkVfQUQQBRob4
  j8YEhZQUk9WSURFUl9UWVBFX0FaVVJFX0FEEjMKFFBST1ZJREVSX1RZUEVfR0lUSFVCEAYaGeI/FhIUUFJPVklERVJfVFlQRV9HS
  VRIVUISOQoXUFJPVklERVJfVFlQRV9HSVRIVUJfRVMQBxoc4j8ZEhdQUk9WSURFUl9UWVBFX0dJVEhVQl9FUxIzChRQUk9WSURFU
  l9UWVBFX0dJVExBQhAIGhniPxYSFFBST1ZJREVSX1RZUEVfR0lUTEFCEksKIFBST1ZJREVSX1RZUEVfR0lUTEFCX1NFTEZfSE9TV
  EVEEAkaJeI/IhIgUFJPVklERVJfVFlQRV9HSVRMQUJfU0VMRl9IT1NURUQSMwoUUFJPVklERVJfVFlQRV9HT09HTEUQChoZ4j8WE
  hRQUk9WSURFUl9UWVBFX0dPT0dMRSrwAQoRQXp1cmVBRFRlbmFudFR5cGUSQQobQVpVUkVfQURfVEVOQU5UX1RZUEVfQ09NTU9OE
  AAaIOI/HRIbQVpVUkVfQURfVEVOQU5UX1RZUEVfQ09NTU9OEk8KIkFaVVJFX0FEX1RFTkFOVF9UWVBFX09SR0FOSVNBVElPTlMQA
  Ron4j8kEiJBWlVSRV9BRF9URU5BTlRfVFlQRV9PUkdBTklTQVRJT05TEkcKHkFaVVJFX0FEX1RFTkFOVF9UWVBFX0NPTlNVTUVSU
  xACGiPiPyASHkFaVVJFX0FEX1RFTkFOVF9UWVBFX0NPTlNVTUVSU0KhAQoSY29tLnppdGFkZWwuaWRwLnYxQghJZHBQcm90b1ABW
  idnaXRodWIuY29tL3ppdGFkZWwveml0YWRlbC9wa2cvZ3JwYy9pZHCiAgNaSViqAg5aaXRhZGVsLklkcC5WMcoCDlppdGFkZWxcS
  WRwXFYx4gIaWml0YWRlbFxJZHBcVjFcR1BCTWV0YWRhdGHqAhBaaXRhZGVsOjpJZHA6OlYxYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.zitadel.v1.`object`.ObjectProto.javaDescriptor,
      com.validate.validate.ValidateProto.javaDescriptor,
      com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto.javaDescriptor,
      com.google.protobuf.duration.DurationProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}