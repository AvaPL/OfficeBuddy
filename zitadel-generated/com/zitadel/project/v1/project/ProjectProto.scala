// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.project.v1.project

object ProjectProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.zitadel.v1.`object`.ObjectProto,
    com.validate.validate.ValidateProto,
    com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.zitadel.project.v1.project.Project,
      com.zitadel.project.v1.project.GrantedProject,
      com.zitadel.project.v1.project.ProjectQuery,
      com.zitadel.project.v1.project.ProjectNameQuery,
      com.zitadel.project.v1.project.ProjectResourceOwnerQuery,
      com.zitadel.project.v1.project.Role,
      com.zitadel.project.v1.project.RoleQuery,
      com.zitadel.project.v1.project.RoleKeyQuery,
      com.zitadel.project.v1.project.RoleDisplayNameQuery,
      com.zitadel.project.v1.project.ProjectGrantQuery,
      com.zitadel.project.v1.project.AllProjectGrantQuery,
      com.zitadel.project.v1.project.GrantProjectNameQuery,
      com.zitadel.project.v1.project.GrantRoleKeyQuery,
      com.zitadel.project.v1.project.ProjectIDQuery,
      com.zitadel.project.v1.project.GrantedOrgIDQuery
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChV6aXRhZGVsL3Byb2plY3QucHJvdG8SEnppdGFkZWwucHJvamVjdC52MRoUeml0YWRlbC9vYmplY3QucHJvdG8aF3ZhbGlkY
  XRlL3ZhbGlkYXRlLnByb3RvGi5wcm90b2MtZ2VuLW9wZW5hcGl2Mi9vcHRpb25zL2Fubm90YXRpb25zLnByb3RvIu0ECgdQcm9qZ
  WN0Ei8KAmlkGAEgASgJQh/iPwQSAmlkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQiUgJpZBJBCgdkZXRhaWxzGAIgASgLMhkueml0Y
  WRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2RldGFpbHMSLQoEbmFtZRgDIAEoCUIZ4j8GEgRuYW1lkkENSgsiT
  XlQcm9qZWN0IlIEbmFtZRJjCgVzdGF0ZRgEIAEoDjIgLnppdGFkZWwucHJvamVjdC52MS5Qcm9qZWN0U3RhdGVCK+I/BxIFc3Rhd
  GWSQR4yHGN1cnJlbnQgc3RhdGUgb2YgdGhlIHByb2plY3RSBXN0YXRlEk8KFnByb2plY3Rfcm9sZV9hc3NlcnRpb24YBSABKAhCG
  eI/FhIUcHJvamVjdFJvbGVBc3NlcnRpb25SFHByb2plY3RSb2xlQXNzZXJ0aW9uEkMKEnByb2plY3Rfcm9sZV9jaGVjaxgGIAEoC
  EIV4j8SEhBwcm9qZWN0Um9sZUNoZWNrUhBwcm9qZWN0Um9sZUNoZWNrEkAKEWhhc19wcm9qZWN0X2NoZWNrGAcgASgIQhTiPxESD
  2hhc1Byb2plY3RDaGVja1IPaGFzUHJvamVjdENoZWNrEoEBChhwcml2YXRlX2xhYmVsaW5nX3NldHRpbmcYCCABKA4yKi56aXRhZ
  GVsLnByb2plY3QudjEuUHJpdmF0ZUxhYmVsaW5nU2V0dGluZ0Ib4j8YEhZwcml2YXRlTGFiZWxpbmdTZXR0aW5nUhZwcml2YXRlT
  GFiZWxpbmdTZXR0aW5nIrkGCg5HcmFudGVkUHJvamVjdBI/CghncmFudF9pZBgBIAEoCUIk4j8JEgdncmFudElkkkEVShMiNjk2M
  jkwMjM5MDY0ODgzMzQiUgdncmFudElkEk8KDmdyYW50ZWRfb3JnX2lkGAIgASgJQiniPw4SDGdyYW50ZWRPcmdJZJJBFUoTIjY5N
  jI5MDIzOTA2NDg4MzM0IlIMZ3JhbnRlZE9yZ0lkElUKEGdyYW50ZWRfb3JnX25hbWUYAyABKAlCK+I/EBIOZ3JhbnRlZE9yZ05hb
  WWSQRVKEyJTb21lIE9yZ2FuaXNhdGlvbiJSDmdyYW50ZWRPcmdOYW1lElcKEWdyYW50ZWRfcm9sZV9rZXlzGAQgAygJQiviPxESD
  2dyYW50ZWRSb2xlS2V5c5JBFEoSWyJyb2xlLnN1cGVyLm1hbiJdUg9ncmFudGVkUm9sZUtleXMSbgoFc3RhdGUYBSABKA4yJS56a
  XRhZGVsLnByb2plY3QudjEuUHJvamVjdEdyYW50U3RhdGVCMeI/BxIFc3RhdGWSQSQyImN1cnJlbnQgc3RhdGUgb2YgdGhlIHByb
  2plY3QgZ3JhbnRSBXN0YXRlEkUKCnByb2plY3RfaWQYBiABKAlCJuI/CxIJcHJvamVjdElkkkEVShMiNjk2MjkwMjM5MDY0ODgzM
  zQiUglwcm9qZWN0SWQSQQoMcHJvamVjdF9uYW1lGAcgASgJQh7iPw0SC3Byb2plY3ROYW1lkkELSgkiWklUQURFTCJSC3Byb2plY
  3ROYW1lElUKEHByb2plY3Rfb3duZXJfaWQYCCABKAlCK+I/EBIOcHJvamVjdE93bmVySWSSQRVKEyI2OTYyOTAyMzkwNjQ4ODMzN
  CJSDnByb2plY3RPd25lcklkElEKEnByb2plY3Rfb3duZXJfbmFtZRgJIAEoCUIj4j8SEhBwcm9qZWN0T3duZXJOYW1lkkELSgkiW
  klUQURFTCJSEHByb2plY3RPd25lck5hbWUSQQoHZGV0YWlscxgKIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlsc0IM4j8JE
  gdkZXRhaWxzUgdkZXRhaWxzIoYCCgxQcm9qZWN0UXVlcnkSVQoKbmFtZV9xdWVyeRgBIAEoCzIkLnppdGFkZWwucHJvamVjdC52M
  S5Qcm9qZWN0TmFtZVF1ZXJ5Qg7iPwsSCW5hbWVRdWVyeUgAUgluYW1lUXVlcnkSkAEKHHByb2plY3RfcmVzb3VyY2Vfb3duZXJfc
  XVlcnkYAiABKAsyLS56aXRhZGVsLnByb2plY3QudjEuUHJvamVjdFJlc291cmNlT3duZXJRdWVyeUIe4j8bEhlwcm9qZWN0UmVzb
  3VyY2VPd25lclF1ZXJ5SABSGXByb2plY3RSZXNvdXJjZU93bmVyUXVlcnlCDAoFcXVlcnkSA/hCASLAAQoQUHJvamVjdE5hbWVRd
  WVyeRIzCgRuYW1lGAEgASgJQh/iPwYSBG5hbWWSQQtKCSJaSVRBREVMIvpCBXIDGMgBUgRuYW1lEncKBm1ldGhvZBgCIAEoDjIbL
  nppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZGVmaW5lcyB3aGljaCB0ZXh0IGVxdWFsaXR5IG1ld
  GhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCJ2ChlQcm9qZWN0UmVzb3VyY2VPd25lclF1ZXJ5ElkKDnJlc291cmNlX293bmVyG
  AEgASgJQjLiPw8SDXJlc291cmNlT3duZXKSQRVKEyI2OTYyOTAyMzkwNjQ4ODMzNCL6QgVyAxjIAVINcmVzb3VyY2VPd25lciLuA
  QoEUm9sZRIvCgNrZXkYASABKAlCHeI/BRIDa2V5kkESShAicm9sZS5zdXBlci5tYW4iUgNrZXkSQQoHZGV0YWlscxgCIAEoCzIZL
  nppdGFkZWwudjEuT2JqZWN0RGV0YWlsc0IM4j8JEgdkZXRhaWxzUgdkZXRhaWxzEkMKDGRpc3BsYXlfbmFtZRgDIAEoCUIg4j8NE
  gtkaXNwbGF5TmFtZZJBDUoLIlN1cGVyIG1hbiJSC2Rpc3BsYXlOYW1lEi0KBWdyb3VwGAQgASgJQhfiPwcSBWdyb3VwkkEKSggic
  GVvcGxlIlIFZ3JvdXAi2gEKCVJvbGVRdWVyeRJOCglrZXlfcXVlcnkYASABKAsyIC56aXRhZGVsLnByb2plY3QudjEuUm9sZUtle
  VF1ZXJ5Qg3iPwoSCGtleVF1ZXJ5SABSCGtleVF1ZXJ5Em8KEmRpc3BsYXlfbmFtZV9xdWVyeRgCIAEoCzIoLnppdGFkZWwucHJva
  mVjdC52MS5Sb2xlRGlzcGxheU5hbWVRdWVyeUIV4j8SEhBkaXNwbGF5TmFtZVF1ZXJ5SABSEGRpc3BsYXlOYW1lUXVlcnlCDAoFc
  XVlcnkSA/hCASLAAQoMUm9sZUtleVF1ZXJ5EjcKA2tleRgBIAEoCUIl4j8FEgNrZXmSQRJKECJyb2xlLnN1cGVyLm1hbiL6QgVyA
  xjIAVIDa2V5EncKBm1ldGhvZBgCIAEoDjIbLnppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZGVma
  W5lcyB3aGljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCLYAQoUUm9sZURpc3BsYXlOYW1lU
  XVlcnkSRwoMZGlzcGxheV9uYW1lGAEgASgJQiTiPw0SC2Rpc3BsYXlOYW1lkkEJSgciU1VQRVIi+kIFcgMYyAFSC2Rpc3BsYXlOY
  W1lEncKBm1ldGhvZBgCIAEoDjIbLnppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZGVmaW5lcyB3a
  GljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCL1AQoRUHJvamVjdEdyYW50UXVlcnkScAoSc
  HJvamVjdF9uYW1lX3F1ZXJ5GAEgASgLMikueml0YWRlbC5wcm9qZWN0LnYxLkdyYW50UHJvamVjdE5hbWVRdWVyeUIV4j8SEhBwc
  m9qZWN0TmFtZVF1ZXJ5SABSEHByb2plY3ROYW1lUXVlcnkSYAoOcm9sZV9rZXlfcXVlcnkYAiABKAsyJS56aXRhZGVsLnByb2plY
  3QudjEuR3JhbnRSb2xlS2V5UXVlcnlCEeI/DhIMcm9sZUtleVF1ZXJ5SABSDHJvbGVLZXlRdWVyeUIMCgVxdWVyeRID+EIBIs8DC
  hRBbGxQcm9qZWN0R3JhbnRRdWVyeRJwChJwcm9qZWN0X25hbWVfcXVlcnkYASABKAsyKS56aXRhZGVsLnByb2plY3QudjEuR3Jhb
  nRQcm9qZWN0TmFtZVF1ZXJ5QhXiPxISEHByb2plY3ROYW1lUXVlcnlIAFIQcHJvamVjdE5hbWVRdWVyeRJgCg5yb2xlX2tleV9xd
  WVyeRgCIAEoCzIlLnppdGFkZWwucHJvamVjdC52MS5HcmFudFJvbGVLZXlRdWVyeUIR4j8OEgxyb2xlS2V5UXVlcnlIAFIMcm9sZ
  UtleVF1ZXJ5EmMKEHByb2plY3RfaWRfcXVlcnkYAyABKAsyIi56aXRhZGVsLnByb2plY3QudjEuUHJvamVjdElEUXVlcnlCE+I/E
  BIOcHJvamVjdElkUXVlcnlIAFIOcHJvamVjdElkUXVlcnkScAoUZ3JhbnRlZF9vcmdfaWRfcXVlcnkYBCABKAsyJS56aXRhZGVsL
  nByb2plY3QudjEuR3JhbnRlZE9yZ0lEUXVlcnlCFuI/ExIRZ3JhbnRlZE9yZ0lkUXVlcnlIAFIRZ3JhbnRlZE9yZ0lkUXVlcnlCD
  AoFcXVlcnkSA/hCASLFAQoVR3JhbnRQcm9qZWN0TmFtZVF1ZXJ5EjMKBG5hbWUYASABKAlCH+I/BhIEbmFtZZJBC0oJIlpJVEFER
  Uwi+kIFcgMYyAFSBG5hbWUSdwoGbWV0aG9kGAIgASgOMhsueml0YWRlbC52MS5UZXh0UXVlcnlNZXRob2RCQuI/CBIGbWV0aG9kk
  kEsMipkZWZpbmVzIHdoaWNoIHRleHQgZXF1YWxpdHkgbWV0aG9kIGlzIHVzZWT6QgWCAQIQAVIGbWV0aG9kItIBChFHcmFudFJvb
  GVLZXlRdWVyeRJECghyb2xlX2tleRgBIAEoCUIp4j8JEgdyb2xlS2V5kkESShAicm9sZS5zdXBlci5tYW4i+kIFcgMYyAFSB3Jvb
  GVLZXkSdwoGbWV0aG9kGAIgASgOMhsueml0YWRlbC52MS5UZXh0UXVlcnlNZXRob2RCQuI/CBIGbWV0aG9kkkEsMipkZWZpbmVzI
  HdoaWNoIHRleHQgZXF1YWxpdHkgbWV0aG9kIGlzIHVzZWT6QgWCAQIQAVIGbWV0aG9kIl8KDlByb2plY3RJRFF1ZXJ5Ek0KCnByb
  2plY3RfaWQYASABKAlCLuI/CxIJcHJvamVjdElkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQi+kIFcgMYyAFSCXByb2plY3RJZCJsC
  hFHcmFudGVkT3JnSURRdWVyeRJXCg5ncmFudGVkX29yZ19pZBgBIAEoCUIx4j8OEgxncmFudGVkT3JnSWSSQRVKEyI2OTYyOTAyM
  zkwNjQ4ODMzNCL6QgVyAxjIAVIMZ3JhbnRlZE9yZ0lkKrsBCgxQcm9qZWN0U3RhdGUSPQoZUFJPSkVDVF9TVEFURV9VTlNQRUNJR
  klFRBAAGh7iPxsSGVBST0pFQ1RfU1RBVEVfVU5TUEVDSUZJRUQSMwoUUFJPSkVDVF9TVEFURV9BQ1RJVkUQARoZ4j8WEhRQUk9KR
  UNUX1NUQVRFX0FDVElWRRI3ChZQUk9KRUNUX1NUQVRFX0lOQUNUSVZFEAIaG+I/GBIWUFJPSkVDVF9TVEFURV9JTkFDVElWRSqDA
  woWUHJpdmF0ZUxhYmVsaW5nU2V0dGluZxJTCiRQUklWQVRFX0xBQkVMSU5HX1NFVFRJTkdfVU5TUEVDSUZJRUQQABop4j8mEiRQU
  klWQVRFX0xBQkVMSU5HX1NFVFRJTkdfVU5TUEVDSUZJRUQShwEKPlBSSVZBVEVfTEFCRUxJTkdfU0VUVElOR19FTkZPUkNFX1BST
  0pFQ1RfUkVTT1VSQ0VfT1dORVJfUE9MSUNZEAEaQ+I/QBI+UFJJVkFURV9MQUJFTElOR19TRVRUSU5HX0VORk9SQ0VfUFJPSkVDV
  F9SRVNPVVJDRV9PV05FUl9QT0xJQ1kSiQEKP1BSSVZBVEVfTEFCRUxJTkdfU0VUVElOR19BTExPV19MT0dJTl9VU0VSX1JFU09VU
  kNFX09XTkVSX1BPTElDWRACGkTiP0ESP1BSSVZBVEVfTEFCRUxJTkdfU0VUVElOR19BTExPV19MT0dJTl9VU0VSX1JFU09VUkNFX
  09XTkVSX1BPTElDWSrkAQoRUHJvamVjdEdyYW50U3RhdGUSSQofUFJPSkVDVF9HUkFOVF9TVEFURV9VTlNQRUNJRklFRBAAGiTiP
  yESH1BST0pFQ1RfR1JBTlRfU1RBVEVfVU5TUEVDSUZJRUQSPwoaUFJPSkVDVF9HUkFOVF9TVEFURV9BQ1RJVkUQARof4j8cEhpQU
  k9KRUNUX0dSQU5UX1NUQVRFX0FDVElWRRJDChxQUk9KRUNUX0dSQU5UX1NUQVRFX0lOQUNUSVZFEAIaIeI/HhIcUFJPSkVDVF9HU
  kFOVF9TVEFURV9JTkFDVElWRUK9AQoWY29tLnppdGFkZWwucHJvamVjdC52MUIMUHJvamVjdFByb3RvUAFaK2dpdGh1Yi5jb20ve
  ml0YWRlbC96aXRhZGVsL3BrZy9ncnBjL3Byb2plY3SiAgNaUFiqAhJaaXRhZGVsLlByb2plY3QuVjHKAhJaaXRhZGVsXFByb2plY
  3RcVjHiAh5aaXRhZGVsXFByb2plY3RcVjFcR1BCTWV0YWRhdGHqAhRaaXRhZGVsOjpQcm9qZWN0OjpWMWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.zitadel.v1.`object`.ObjectProto.javaDescriptor,
      com.validate.validate.ValidateProto.javaDescriptor,
      com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}