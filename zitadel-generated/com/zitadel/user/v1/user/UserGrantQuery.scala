// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.user.v1.user

@SerialVersionUID(0L)
final case class UserGrantQuery(
    query: com.zitadel.user.v1.user.UserGrantQuery.Query = com.zitadel.user.v1.user.UserGrantQuery.Query.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UserGrantQuery] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (query.projectIdQuery.isDefined) {
        val __value = query.projectIdQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.userIdQuery.isDefined) {
        val __value = query.userIdQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.withGrantedQuery.isDefined) {
        val __value = query.withGrantedQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.roleKeyQuery.isDefined) {
        val __value = query.roleKeyQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.projectGrantIdQuery.isDefined) {
        val __value = query.projectGrantIdQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.userNameQuery.isDefined) {
        val __value = query.userNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.firstNameQuery.isDefined) {
        val __value = query.firstNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.lastNameQuery.isDefined) {
        val __value = query.lastNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.emailQuery.isDefined) {
        val __value = query.emailQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.orgNameQuery.isDefined) {
        val __value = query.orgNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.orgDomainQuery.isDefined) {
        val __value = query.orgDomainQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.projectNameQuery.isDefined) {
        val __value = query.projectNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.displayNameQuery.isDefined) {
        val __value = query.displayNameQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.userTypeQuery.isDefined) {
        val __value = query.userTypeQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      query.projectIdQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.userIdQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.withGrantedQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.roleKeyQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.projectGrantIdQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.userNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.firstNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.lastNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.emailQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.orgNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.orgDomainQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.projectNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.displayNameQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.userTypeQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getProjectIdQuery: com.zitadel.user.v1.user.UserGrantProjectIDQuery = query.projectIdQuery.getOrElse(com.zitadel.user.v1.user.UserGrantProjectIDQuery.defaultInstance)
    def withProjectIdQuery(__v: com.zitadel.user.v1.user.UserGrantProjectIDQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectIdQuery(__v))
    def getUserIdQuery: com.zitadel.user.v1.user.UserGrantUserIDQuery = query.userIdQuery.getOrElse(com.zitadel.user.v1.user.UserGrantUserIDQuery.defaultInstance)
    def withUserIdQuery(__v: com.zitadel.user.v1.user.UserGrantUserIDQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserIdQuery(__v))
    def getWithGrantedQuery: com.zitadel.user.v1.user.UserGrantWithGrantedQuery = query.withGrantedQuery.getOrElse(com.zitadel.user.v1.user.UserGrantWithGrantedQuery.defaultInstance)
    def withWithGrantedQuery(__v: com.zitadel.user.v1.user.UserGrantWithGrantedQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.WithGrantedQuery(__v))
    def getRoleKeyQuery: com.zitadel.user.v1.user.UserGrantRoleKeyQuery = query.roleKeyQuery.getOrElse(com.zitadel.user.v1.user.UserGrantRoleKeyQuery.defaultInstance)
    def withRoleKeyQuery(__v: com.zitadel.user.v1.user.UserGrantRoleKeyQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.RoleKeyQuery(__v))
    def getProjectGrantIdQuery: com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery = query.projectGrantIdQuery.getOrElse(com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery.defaultInstance)
    def withProjectGrantIdQuery(__v: com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectGrantIdQuery(__v))
    def getUserNameQuery: com.zitadel.user.v1.user.UserGrantUserNameQuery = query.userNameQuery.getOrElse(com.zitadel.user.v1.user.UserGrantUserNameQuery.defaultInstance)
    def withUserNameQuery(__v: com.zitadel.user.v1.user.UserGrantUserNameQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserNameQuery(__v))
    def getFirstNameQuery: com.zitadel.user.v1.user.UserGrantFirstNameQuery = query.firstNameQuery.getOrElse(com.zitadel.user.v1.user.UserGrantFirstNameQuery.defaultInstance)
    def withFirstNameQuery(__v: com.zitadel.user.v1.user.UserGrantFirstNameQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.FirstNameQuery(__v))
    def getLastNameQuery: com.zitadel.user.v1.user.UserGrantLastNameQuery = query.lastNameQuery.getOrElse(com.zitadel.user.v1.user.UserGrantLastNameQuery.defaultInstance)
    def withLastNameQuery(__v: com.zitadel.user.v1.user.UserGrantLastNameQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.LastNameQuery(__v))
    def getEmailQuery: com.zitadel.user.v1.user.UserGrantEmailQuery = query.emailQuery.getOrElse(com.zitadel.user.v1.user.UserGrantEmailQuery.defaultInstance)
    def withEmailQuery(__v: com.zitadel.user.v1.user.UserGrantEmailQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.EmailQuery(__v))
    def getOrgNameQuery: com.zitadel.user.v1.user.UserGrantOrgNameQuery = query.orgNameQuery.getOrElse(com.zitadel.user.v1.user.UserGrantOrgNameQuery.defaultInstance)
    def withOrgNameQuery(__v: com.zitadel.user.v1.user.UserGrantOrgNameQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.OrgNameQuery(__v))
    def getOrgDomainQuery: com.zitadel.user.v1.user.UserGrantOrgDomainQuery = query.orgDomainQuery.getOrElse(com.zitadel.user.v1.user.UserGrantOrgDomainQuery.defaultInstance)
    def withOrgDomainQuery(__v: com.zitadel.user.v1.user.UserGrantOrgDomainQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.OrgDomainQuery(__v))
    def getProjectNameQuery: com.zitadel.user.v1.user.UserGrantProjectNameQuery = query.projectNameQuery.getOrElse(com.zitadel.user.v1.user.UserGrantProjectNameQuery.defaultInstance)
    def withProjectNameQuery(__v: com.zitadel.user.v1.user.UserGrantProjectNameQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectNameQuery(__v))
    def getDisplayNameQuery: com.zitadel.user.v1.user.UserGrantDisplayNameQuery = query.displayNameQuery.getOrElse(com.zitadel.user.v1.user.UserGrantDisplayNameQuery.defaultInstance)
    def withDisplayNameQuery(__v: com.zitadel.user.v1.user.UserGrantDisplayNameQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.DisplayNameQuery(__v))
    def getUserTypeQuery: com.zitadel.user.v1.user.UserGrantUserTypeQuery = query.userTypeQuery.getOrElse(com.zitadel.user.v1.user.UserGrantUserTypeQuery.defaultInstance)
    def withUserTypeQuery(__v: com.zitadel.user.v1.user.UserGrantUserTypeQuery): UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserTypeQuery(__v))
    def clearQuery: UserGrantQuery = copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.Empty)
    def withQuery(__v: com.zitadel.user.v1.user.UserGrantQuery.Query): UserGrantQuery = copy(query = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => query.projectIdQuery.orNull
        case 2 => query.userIdQuery.orNull
        case 3 => query.withGrantedQuery.orNull
        case 4 => query.roleKeyQuery.orNull
        case 5 => query.projectGrantIdQuery.orNull
        case 6 => query.userNameQuery.orNull
        case 7 => query.firstNameQuery.orNull
        case 8 => query.lastNameQuery.orNull
        case 9 => query.emailQuery.orNull
        case 10 => query.orgNameQuery.orNull
        case 11 => query.orgDomainQuery.orNull
        case 12 => query.projectNameQuery.orNull
        case 13 => query.displayNameQuery.orNull
        case 14 => query.userTypeQuery.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => query.projectIdQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => query.userIdQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => query.withGrantedQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => query.roleKeyQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => query.projectGrantIdQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => query.userNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => query.firstNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => query.lastNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => query.emailQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => query.orgNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => query.orgDomainQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => query.projectNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => query.displayNameQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => query.userTypeQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.user.v1.user.UserGrantQuery.type = com.zitadel.user.v1.user.UserGrantQuery
    // @@protoc_insertion_point(GeneratedMessage[zitadel.user.v1.UserGrantQuery])
}

object UserGrantQuery extends scalapb.GeneratedMessageCompanion[com.zitadel.user.v1.user.UserGrantQuery] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.user.v1.user.UserGrantQuery] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.user.v1.user.UserGrantQuery = {
    var __query: com.zitadel.user.v1.user.UserGrantQuery.Query = com.zitadel.user.v1.user.UserGrantQuery.Query.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectIdQuery(__query.projectIdQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantProjectIDQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserIdQuery(__query.userIdQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantUserIDQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.WithGrantedQuery(__query.withGrantedQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantWithGrantedQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.RoleKeyQuery(__query.roleKeyQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantRoleKeyQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectGrantIdQuery(__query.projectGrantIdQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserNameQuery(__query.userNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantUserNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.FirstNameQuery(__query.firstNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantFirstNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.LastNameQuery(__query.lastNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantLastNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.EmailQuery(__query.emailQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantEmailQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 82 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.OrgNameQuery(__query.orgNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantOrgNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 90 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.OrgDomainQuery(__query.orgDomainQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantOrgDomainQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 98 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectNameQuery(__query.projectNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantProjectNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 106 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.DisplayNameQuery(__query.displayNameQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantDisplayNameQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 114 =>
          __query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserTypeQuery(__query.userTypeQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.UserGrantUserTypeQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.user.v1.user.UserGrantQuery(
        query = __query,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.user.v1.user.UserGrantQuery] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.user.v1.user.UserGrantQuery(
        query = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectIDQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectIdQuery(_))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserIDQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.UserIdQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantWithGrantedQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.WithGrantedQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantRoleKeyQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.RoleKeyQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectGrantIdQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserNameQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.UserNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantFirstNameQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.FirstNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantLastNameQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.LastNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantEmailQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.EmailQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantOrgNameQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.OrgNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantOrgDomainQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.OrgDomainQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectNameQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantDisplayNameQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.DisplayNameQuery(_)))
            .orElse[com.zitadel.user.v1.user.UserGrantQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserTypeQuery]]).map(com.zitadel.user.v1.user.UserGrantQuery.Query.UserTypeQuery(_)))
            .getOrElse(com.zitadel.user.v1.user.UserGrantQuery.Query.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes().get(32)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(32)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.user.v1.user.UserGrantProjectIDQuery
      case 2 => __out = com.zitadel.user.v1.user.UserGrantUserIDQuery
      case 3 => __out = com.zitadel.user.v1.user.UserGrantWithGrantedQuery
      case 4 => __out = com.zitadel.user.v1.user.UserGrantRoleKeyQuery
      case 5 => __out = com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery
      case 6 => __out = com.zitadel.user.v1.user.UserGrantUserNameQuery
      case 7 => __out = com.zitadel.user.v1.user.UserGrantFirstNameQuery
      case 8 => __out = com.zitadel.user.v1.user.UserGrantLastNameQuery
      case 9 => __out = com.zitadel.user.v1.user.UserGrantEmailQuery
      case 10 => __out = com.zitadel.user.v1.user.UserGrantOrgNameQuery
      case 11 => __out = com.zitadel.user.v1.user.UserGrantOrgDomainQuery
      case 12 => __out = com.zitadel.user.v1.user.UserGrantProjectNameQuery
      case 13 => __out = com.zitadel.user.v1.user.UserGrantDisplayNameQuery
      case 14 => __out = com.zitadel.user.v1.user.UserGrantUserTypeQuery
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.user.v1.user.UserGrantQuery(
    query = com.zitadel.user.v1.user.UserGrantQuery.Query.Empty
  )
  sealed trait Query extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isProjectIdQuery: _root_.scala.Boolean = false
    def isUserIdQuery: _root_.scala.Boolean = false
    def isWithGrantedQuery: _root_.scala.Boolean = false
    def isRoleKeyQuery: _root_.scala.Boolean = false
    def isProjectGrantIdQuery: _root_.scala.Boolean = false
    def isUserNameQuery: _root_.scala.Boolean = false
    def isFirstNameQuery: _root_.scala.Boolean = false
    def isLastNameQuery: _root_.scala.Boolean = false
    def isEmailQuery: _root_.scala.Boolean = false
    def isOrgNameQuery: _root_.scala.Boolean = false
    def isOrgDomainQuery: _root_.scala.Boolean = false
    def isProjectNameQuery: _root_.scala.Boolean = false
    def isDisplayNameQuery: _root_.scala.Boolean = false
    def isUserTypeQuery: _root_.scala.Boolean = false
    def projectIdQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectIDQuery] = _root_.scala.None
    def userIdQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserIDQuery] = _root_.scala.None
    def withGrantedQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantWithGrantedQuery] = _root_.scala.None
    def roleKeyQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantRoleKeyQuery] = _root_.scala.None
    def projectGrantIdQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery] = _root_.scala.None
    def userNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserNameQuery] = _root_.scala.None
    def firstNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantFirstNameQuery] = _root_.scala.None
    def lastNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantLastNameQuery] = _root_.scala.None
    def emailQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantEmailQuery] = _root_.scala.None
    def orgNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantOrgNameQuery] = _root_.scala.None
    def orgDomainQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantOrgDomainQuery] = _root_.scala.None
    def projectNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectNameQuery] = _root_.scala.None
    def displayNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantDisplayNameQuery] = _root_.scala.None
    def userTypeQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserTypeQuery] = _root_.scala.None
  }
  object Query {
    @SerialVersionUID(0L)
    case object Empty extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ProjectIdQuery(value: com.zitadel.user.v1.user.UserGrantProjectIDQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantProjectIDQuery
      override def isProjectIdQuery: _root_.scala.Boolean = true
      override def projectIdQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectIDQuery] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class UserIdQuery(value: com.zitadel.user.v1.user.UserGrantUserIDQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantUserIDQuery
      override def isUserIdQuery: _root_.scala.Boolean = true
      override def userIdQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserIDQuery] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class WithGrantedQuery(value: com.zitadel.user.v1.user.UserGrantWithGrantedQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantWithGrantedQuery
      override def isWithGrantedQuery: _root_.scala.Boolean = true
      override def withGrantedQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantWithGrantedQuery] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class RoleKeyQuery(value: com.zitadel.user.v1.user.UserGrantRoleKeyQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantRoleKeyQuery
      override def isRoleKeyQuery: _root_.scala.Boolean = true
      override def roleKeyQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantRoleKeyQuery] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class ProjectGrantIdQuery(value: com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery
      override def isProjectGrantIdQuery: _root_.scala.Boolean = true
      override def projectGrantIdQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class UserNameQuery(value: com.zitadel.user.v1.user.UserGrantUserNameQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantUserNameQuery
      override def isUserNameQuery: _root_.scala.Boolean = true
      override def userNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserNameQuery] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class FirstNameQuery(value: com.zitadel.user.v1.user.UserGrantFirstNameQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantFirstNameQuery
      override def isFirstNameQuery: _root_.scala.Boolean = true
      override def firstNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantFirstNameQuery] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class LastNameQuery(value: com.zitadel.user.v1.user.UserGrantLastNameQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantLastNameQuery
      override def isLastNameQuery: _root_.scala.Boolean = true
      override def lastNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantLastNameQuery] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class EmailQuery(value: com.zitadel.user.v1.user.UserGrantEmailQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantEmailQuery
      override def isEmailQuery: _root_.scala.Boolean = true
      override def emailQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantEmailQuery] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class OrgNameQuery(value: com.zitadel.user.v1.user.UserGrantOrgNameQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantOrgNameQuery
      override def isOrgNameQuery: _root_.scala.Boolean = true
      override def orgNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantOrgNameQuery] = Some(value)
      override def number: _root_.scala.Int = 10
    }
    @SerialVersionUID(0L)
    final case class OrgDomainQuery(value: com.zitadel.user.v1.user.UserGrantOrgDomainQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantOrgDomainQuery
      override def isOrgDomainQuery: _root_.scala.Boolean = true
      override def orgDomainQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantOrgDomainQuery] = Some(value)
      override def number: _root_.scala.Int = 11
    }
    @SerialVersionUID(0L)
    final case class ProjectNameQuery(value: com.zitadel.user.v1.user.UserGrantProjectNameQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantProjectNameQuery
      override def isProjectNameQuery: _root_.scala.Boolean = true
      override def projectNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantProjectNameQuery] = Some(value)
      override def number: _root_.scala.Int = 12
    }
    @SerialVersionUID(0L)
    final case class DisplayNameQuery(value: com.zitadel.user.v1.user.UserGrantDisplayNameQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantDisplayNameQuery
      override def isDisplayNameQuery: _root_.scala.Boolean = true
      override def displayNameQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantDisplayNameQuery] = Some(value)
      override def number: _root_.scala.Int = 13
    }
    @SerialVersionUID(0L)
    final case class UserTypeQuery(value: com.zitadel.user.v1.user.UserGrantUserTypeQuery) extends com.zitadel.user.v1.user.UserGrantQuery.Query {
      type ValueType = com.zitadel.user.v1.user.UserGrantUserTypeQuery
      override def isUserTypeQuery: _root_.scala.Boolean = true
      override def userTypeQuery: _root_.scala.Option[com.zitadel.user.v1.user.UserGrantUserTypeQuery] = Some(value)
      override def number: _root_.scala.Int = 14
    }
  }
  implicit class UserGrantQueryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantQuery]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.user.v1.user.UserGrantQuery](_l) {
    def projectIdQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantProjectIDQuery] = field(_.getProjectIdQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectIdQuery(f_)))
    def userIdQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantUserIDQuery] = field(_.getUserIdQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserIdQuery(f_)))
    def withGrantedQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantWithGrantedQuery] = field(_.getWithGrantedQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.WithGrantedQuery(f_)))
    def roleKeyQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantRoleKeyQuery] = field(_.getRoleKeyQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.RoleKeyQuery(f_)))
    def projectGrantIdQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery] = field(_.getProjectGrantIdQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectGrantIdQuery(f_)))
    def userNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantUserNameQuery] = field(_.getUserNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserNameQuery(f_)))
    def firstNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantFirstNameQuery] = field(_.getFirstNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.FirstNameQuery(f_)))
    def lastNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantLastNameQuery] = field(_.getLastNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.LastNameQuery(f_)))
    def emailQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantEmailQuery] = field(_.getEmailQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.EmailQuery(f_)))
    def orgNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantOrgNameQuery] = field(_.getOrgNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.OrgNameQuery(f_)))
    def orgDomainQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantOrgDomainQuery] = field(_.getOrgDomainQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.OrgDomainQuery(f_)))
    def projectNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantProjectNameQuery] = field(_.getProjectNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.ProjectNameQuery(f_)))
    def displayNameQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantDisplayNameQuery] = field(_.getDisplayNameQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.DisplayNameQuery(f_)))
    def userTypeQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantUserTypeQuery] = field(_.getUserTypeQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.UserGrantQuery.Query.UserTypeQuery(f_)))
    def query: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserGrantQuery.Query] = field(_.query)((c_, f_) => c_.copy(query = f_))
  }
  final val PROJECT_ID_QUERY_FIELD_NUMBER = 1
  final val USER_ID_QUERY_FIELD_NUMBER = 2
  final val WITH_GRANTED_QUERY_FIELD_NUMBER = 3
  final val ROLE_KEY_QUERY_FIELD_NUMBER = 4
  final val PROJECT_GRANT_ID_QUERY_FIELD_NUMBER = 5
  final val USER_NAME_QUERY_FIELD_NUMBER = 6
  final val FIRST_NAME_QUERY_FIELD_NUMBER = 7
  final val LAST_NAME_QUERY_FIELD_NUMBER = 8
  final val EMAIL_QUERY_FIELD_NUMBER = 9
  final val ORG_NAME_QUERY_FIELD_NUMBER = 10
  final val ORG_DOMAIN_QUERY_FIELD_NUMBER = 11
  final val PROJECT_NAME_QUERY_FIELD_NUMBER = 12
  final val DISPLAY_NAME_QUERY_FIELD_NUMBER = 13
  final val USER_TYPE_QUERY_FIELD_NUMBER = 14
  def of(
    query: com.zitadel.user.v1.user.UserGrantQuery.Query
  ): _root_.com.zitadel.user.v1.user.UserGrantQuery = _root_.com.zitadel.user.v1.user.UserGrantQuery(
    query
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.user.v1.UserGrantQuery])
}
