// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.user.v1.user

@SerialVersionUID(0L)
final case class MembershipQuery(
    query: com.zitadel.user.v1.user.MembershipQuery.Query = com.zitadel.user.v1.user.MembershipQuery.Query.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MembershipQuery] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (query.orgQuery.isDefined) {
        val __value = query.orgQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.projectQuery.isDefined) {
        val __value = query.projectQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.projectGrantQuery.isDefined) {
        val __value = query.projectGrantQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (query.iamQuery.isDefined) {
        val __value = query.iamQuery.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      query.orgQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.projectQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.projectGrantQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      query.iamQuery.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getOrgQuery: com.zitadel.user.v1.user.MembershipOrgQuery = query.orgQuery.getOrElse(com.zitadel.user.v1.user.MembershipOrgQuery.defaultInstance)
    def withOrgQuery(__v: com.zitadel.user.v1.user.MembershipOrgQuery): MembershipQuery = copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.OrgQuery(__v))
    def getProjectQuery: com.zitadel.user.v1.user.MembershipProjectQuery = query.projectQuery.getOrElse(com.zitadel.user.v1.user.MembershipProjectQuery.defaultInstance)
    def withProjectQuery(__v: com.zitadel.user.v1.user.MembershipProjectQuery): MembershipQuery = copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.ProjectQuery(__v))
    def getProjectGrantQuery: com.zitadel.user.v1.user.MembershipProjectGrantQuery = query.projectGrantQuery.getOrElse(com.zitadel.user.v1.user.MembershipProjectGrantQuery.defaultInstance)
    def withProjectGrantQuery(__v: com.zitadel.user.v1.user.MembershipProjectGrantQuery): MembershipQuery = copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.ProjectGrantQuery(__v))
    def getIamQuery: com.zitadel.user.v1.user.MembershipIAMQuery = query.iamQuery.getOrElse(com.zitadel.user.v1.user.MembershipIAMQuery.defaultInstance)
    def withIamQuery(__v: com.zitadel.user.v1.user.MembershipIAMQuery): MembershipQuery = copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.IamQuery(__v))
    def clearQuery: MembershipQuery = copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.Empty)
    def withQuery(__v: com.zitadel.user.v1.user.MembershipQuery.Query): MembershipQuery = copy(query = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => query.orgQuery.orNull
        case 2 => query.projectQuery.orNull
        case 3 => query.projectGrantQuery.orNull
        case 4 => query.iamQuery.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => query.orgQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => query.projectQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => query.projectGrantQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => query.iamQuery.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.user.v1.user.MembershipQuery.type = com.zitadel.user.v1.user.MembershipQuery
    // @@protoc_insertion_point(GeneratedMessage[zitadel.user.v1.MembershipQuery])
}

object MembershipQuery extends scalapb.GeneratedMessageCompanion[com.zitadel.user.v1.user.MembershipQuery] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.user.v1.user.MembershipQuery] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.user.v1.user.MembershipQuery = {
    var __query: com.zitadel.user.v1.user.MembershipQuery.Query = com.zitadel.user.v1.user.MembershipQuery.Query.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __query = com.zitadel.user.v1.user.MembershipQuery.Query.OrgQuery(__query.orgQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.MembershipOrgQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __query = com.zitadel.user.v1.user.MembershipQuery.Query.ProjectQuery(__query.projectQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.MembershipProjectQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __query = com.zitadel.user.v1.user.MembershipQuery.Query.ProjectGrantQuery(__query.projectGrantQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.MembershipProjectGrantQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __query = com.zitadel.user.v1.user.MembershipQuery.Query.IamQuery(__query.iamQuery.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.MembershipIAMQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.user.v1.user.MembershipQuery(
        query = __query,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.user.v1.user.MembershipQuery] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.user.v1.user.MembershipQuery(
        query = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.MembershipOrgQuery]]).map(com.zitadel.user.v1.user.MembershipQuery.Query.OrgQuery(_))
            .orElse[com.zitadel.user.v1.user.MembershipQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.MembershipProjectQuery]]).map(com.zitadel.user.v1.user.MembershipQuery.Query.ProjectQuery(_)))
            .orElse[com.zitadel.user.v1.user.MembershipQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.MembershipProjectGrantQuery]]).map(com.zitadel.user.v1.user.MembershipQuery.Query.ProjectGrantQuery(_)))
            .orElse[com.zitadel.user.v1.user.MembershipQuery.Query](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.MembershipIAMQuery]]).map(com.zitadel.user.v1.user.MembershipQuery.Query.IamQuery(_)))
            .getOrElse(com.zitadel.user.v1.user.MembershipQuery.Query.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes().get(23)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(23)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.user.v1.user.MembershipOrgQuery
      case 2 => __out = com.zitadel.user.v1.user.MembershipProjectQuery
      case 3 => __out = com.zitadel.user.v1.user.MembershipProjectGrantQuery
      case 4 => __out = com.zitadel.user.v1.user.MembershipIAMQuery
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.user.v1.user.MembershipQuery(
    query = com.zitadel.user.v1.user.MembershipQuery.Query.Empty
  )
  sealed trait Query extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isOrgQuery: _root_.scala.Boolean = false
    def isProjectQuery: _root_.scala.Boolean = false
    def isProjectGrantQuery: _root_.scala.Boolean = false
    def isIamQuery: _root_.scala.Boolean = false
    def orgQuery: _root_.scala.Option[com.zitadel.user.v1.user.MembershipOrgQuery] = _root_.scala.None
    def projectQuery: _root_.scala.Option[com.zitadel.user.v1.user.MembershipProjectQuery] = _root_.scala.None
    def projectGrantQuery: _root_.scala.Option[com.zitadel.user.v1.user.MembershipProjectGrantQuery] = _root_.scala.None
    def iamQuery: _root_.scala.Option[com.zitadel.user.v1.user.MembershipIAMQuery] = _root_.scala.None
  }
  object Query {
    @SerialVersionUID(0L)
    case object Empty extends com.zitadel.user.v1.user.MembershipQuery.Query {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class OrgQuery(value: com.zitadel.user.v1.user.MembershipOrgQuery) extends com.zitadel.user.v1.user.MembershipQuery.Query {
      type ValueType = com.zitadel.user.v1.user.MembershipOrgQuery
      override def isOrgQuery: _root_.scala.Boolean = true
      override def orgQuery: _root_.scala.Option[com.zitadel.user.v1.user.MembershipOrgQuery] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class ProjectQuery(value: com.zitadel.user.v1.user.MembershipProjectQuery) extends com.zitadel.user.v1.user.MembershipQuery.Query {
      type ValueType = com.zitadel.user.v1.user.MembershipProjectQuery
      override def isProjectQuery: _root_.scala.Boolean = true
      override def projectQuery: _root_.scala.Option[com.zitadel.user.v1.user.MembershipProjectQuery] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class ProjectGrantQuery(value: com.zitadel.user.v1.user.MembershipProjectGrantQuery) extends com.zitadel.user.v1.user.MembershipQuery.Query {
      type ValueType = com.zitadel.user.v1.user.MembershipProjectGrantQuery
      override def isProjectGrantQuery: _root_.scala.Boolean = true
      override def projectGrantQuery: _root_.scala.Option[com.zitadel.user.v1.user.MembershipProjectGrantQuery] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class IamQuery(value: com.zitadel.user.v1.user.MembershipIAMQuery) extends com.zitadel.user.v1.user.MembershipQuery.Query {
      type ValueType = com.zitadel.user.v1.user.MembershipIAMQuery
      override def isIamQuery: _root_.scala.Boolean = true
      override def iamQuery: _root_.scala.Option[com.zitadel.user.v1.user.MembershipIAMQuery] = Some(value)
      override def number: _root_.scala.Int = 4
    }
  }
  implicit class MembershipQueryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.MembershipQuery]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.user.v1.user.MembershipQuery](_l) {
    def orgQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.MembershipOrgQuery] = field(_.getOrgQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.OrgQuery(f_)))
    def projectQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.MembershipProjectQuery] = field(_.getProjectQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.ProjectQuery(f_)))
    def projectGrantQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.MembershipProjectGrantQuery] = field(_.getProjectGrantQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.ProjectGrantQuery(f_)))
    def iamQuery: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.MembershipIAMQuery] = field(_.getIamQuery)((c_, f_) => c_.copy(query = com.zitadel.user.v1.user.MembershipQuery.Query.IamQuery(f_)))
    def query: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.MembershipQuery.Query] = field(_.query)((c_, f_) => c_.copy(query = f_))
  }
  final val ORG_QUERY_FIELD_NUMBER = 1
  final val PROJECT_QUERY_FIELD_NUMBER = 2
  final val PROJECT_GRANT_QUERY_FIELD_NUMBER = 3
  final val IAM_QUERY_FIELD_NUMBER = 4
  def of(
    query: com.zitadel.user.v1.user.MembershipQuery.Query
  ): _root_.com.zitadel.user.v1.user.MembershipQuery = _root_.com.zitadel.user.v1.user.MembershipQuery(
    query
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.user.v1.MembershipQuery])
}
