// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.user.v1.user

@SerialVersionUID(0L)
final case class User(
    id: _root_.scala.Predef.String = "",
    details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails] = _root_.scala.None,
    state: com.zitadel.user.v1.user.UserState = com.zitadel.user.v1.user.UserState.USER_STATE_UNSPECIFIED,
    userName: _root_.scala.Predef.String = "",
    loginNames: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    preferredLoginName: _root_.scala.Predef.String = "",
    `type`: com.zitadel.user.v1.user.User.Type = com.zitadel.user.v1.user.User.Type.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[User] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (details.isDefined) {
        val __value = details.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = state.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      
      {
        val __value = userName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      loginNames.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      
      {
        val __value = preferredLoginName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      if (`type`.human.isDefined) {
        val __value = `type`.human.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.machine.isDefined) {
        val __value = `type`.machine.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      details.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = state.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      {
        val __v = userName
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      loginNames.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      {
        val __v = preferredLoginName
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      `type`.human.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.machine.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Predef.String): User = copy(id = __v)
    def getDetails: com.zitadel.v1.`object`.ObjectDetails = details.getOrElse(com.zitadel.v1.`object`.ObjectDetails.defaultInstance)
    def clearDetails: User = copy(details = _root_.scala.None)
    def withDetails(__v: com.zitadel.v1.`object`.ObjectDetails): User = copy(details = Option(__v))
    def withState(__v: com.zitadel.user.v1.user.UserState): User = copy(state = __v)
    def withUserName(__v: _root_.scala.Predef.String): User = copy(userName = __v)
    def clearLoginNames = copy(loginNames = _root_.scala.Seq.empty)
    def addLoginNames(__vs: _root_.scala.Predef.String *): User = addAllLoginNames(__vs)
    def addAllLoginNames(__vs: Iterable[_root_.scala.Predef.String]): User = copy(loginNames = loginNames ++ __vs)
    def withLoginNames(__v: _root_.scala.Seq[_root_.scala.Predef.String]): User = copy(loginNames = __v)
    def withPreferredLoginName(__v: _root_.scala.Predef.String): User = copy(preferredLoginName = __v)
    def getHuman: com.zitadel.user.v1.user.Human = `type`.human.getOrElse(com.zitadel.user.v1.user.Human.defaultInstance)
    def withHuman(__v: com.zitadel.user.v1.user.Human): User = copy(`type` = com.zitadel.user.v1.user.User.Type.Human(__v))
    def getMachine: com.zitadel.user.v1.user.Machine = `type`.machine.getOrElse(com.zitadel.user.v1.user.Machine.defaultInstance)
    def withMachine(__v: com.zitadel.user.v1.user.Machine): User = copy(`type` = com.zitadel.user.v1.user.User.Type.Machine(__v))
    def clearType: User = copy(`type` = com.zitadel.user.v1.user.User.Type.Empty)
    def withType(__v: com.zitadel.user.v1.user.User.Type): User = copy(`type` = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => details.orNull
        case 3 => {
          val __t = state.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 4 => {
          val __t = userName
          if (__t != "") __t else null
        }
        case 5 => loginNames
        case 6 => {
          val __t = preferredLoginName
          if (__t != "") __t else null
        }
        case 7 => `type`.human.orNull
        case 8 => `type`.machine.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => details.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
        case 4 => _root_.scalapb.descriptors.PString(userName)
        case 5 => _root_.scalapb.descriptors.PRepeated(loginNames.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PString(preferredLoginName)
        case 7 => `type`.human.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => `type`.machine.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.user.v1.user.User.type = com.zitadel.user.v1.user.User
    // @@protoc_insertion_point(GeneratedMessage[zitadel.user.v1.User])
}

object User extends scalapb.GeneratedMessageCompanion[com.zitadel.user.v1.user.User] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.user.v1.user.User] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.user.v1.user.User = {
    var __id: _root_.scala.Predef.String = ""
    var __details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails] = _root_.scala.None
    var __state: com.zitadel.user.v1.user.UserState = com.zitadel.user.v1.user.UserState.USER_STATE_UNSPECIFIED
    var __userName: _root_.scala.Predef.String = ""
    val __loginNames: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __preferredLoginName: _root_.scala.Predef.String = ""
    var __type: com.zitadel.user.v1.user.User.Type = com.zitadel.user.v1.user.User.Type.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __id = _input__.readStringRequireUtf8()
        case 18 =>
          __details = Option(__details.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.v1.`object`.ObjectDetails](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __state = com.zitadel.user.v1.user.UserState.fromValue(_input__.readEnum())
        case 34 =>
          __userName = _input__.readStringRequireUtf8()
        case 42 =>
          __loginNames += _input__.readStringRequireUtf8()
        case 50 =>
          __preferredLoginName = _input__.readStringRequireUtf8()
        case 58 =>
          __type = com.zitadel.user.v1.user.User.Type.Human(__type.human.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.Human](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __type = com.zitadel.user.v1.user.User.Type.Machine(__type.machine.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.user.v1.user.Machine](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.user.v1.user.User(
        id = __id,
        details = __details,
        state = __state,
        userName = __userName,
        loginNames = __loginNames.result(),
        preferredLoginName = __preferredLoginName,
        `type` = __type,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.user.v1.user.User] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.user.v1.user.User(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        details = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails]]),
        state = com.zitadel.user.v1.user.UserState.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.zitadel.user.v1.user.UserState.USER_STATE_UNSPECIFIED.scalaValueDescriptor).number),
        userName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        loginNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        preferredLoginName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.Human]]).map(com.zitadel.user.v1.user.User.Type.Human(_))
            .orElse[com.zitadel.user.v1.user.User.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[com.zitadel.user.v1.user.Machine]]).map(com.zitadel.user.v1.user.User.Type.Machine(_)))
            .getOrElse(com.zitadel.user.v1.user.User.Type.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.zitadel.v1.`object`.ObjectDetails
      case 7 => __out = com.zitadel.user.v1.user.Human
      case 8 => __out = com.zitadel.user.v1.user.Machine
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => com.zitadel.user.v1.user.UserState
    }
  }
  lazy val defaultInstance = com.zitadel.user.v1.user.User(
    id = "",
    details = _root_.scala.None,
    state = com.zitadel.user.v1.user.UserState.USER_STATE_UNSPECIFIED,
    userName = "",
    loginNames = _root_.scala.Seq.empty,
    preferredLoginName = "",
    `type` = com.zitadel.user.v1.user.User.Type.Empty
  )
  sealed trait Type extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isHuman: _root_.scala.Boolean = false
    def isMachine: _root_.scala.Boolean = false
    def human: _root_.scala.Option[com.zitadel.user.v1.user.Human] = _root_.scala.None
    def machine: _root_.scala.Option[com.zitadel.user.v1.user.Machine] = _root_.scala.None
  }
  object Type {
    @SerialVersionUID(0L)
    case object Empty extends com.zitadel.user.v1.user.User.Type {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Human(value: com.zitadel.user.v1.user.Human) extends com.zitadel.user.v1.user.User.Type {
      type ValueType = com.zitadel.user.v1.user.Human
      override def isHuman: _root_.scala.Boolean = true
      override def human: _root_.scala.Option[com.zitadel.user.v1.user.Human] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class Machine(value: com.zitadel.user.v1.user.Machine) extends com.zitadel.user.v1.user.User.Type {
      type ValueType = com.zitadel.user.v1.user.Machine
      override def isMachine: _root_.scala.Boolean = true
      override def machine: _root_.scala.Option[com.zitadel.user.v1.user.Machine] = Some(value)
      override def number: _root_.scala.Int = 8
    }
  }
  implicit class UserLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.User]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.user.v1.user.User](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def details: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.v1.`object`.ObjectDetails] = field(_.getDetails)((c_, f_) => c_.copy(details = Option(f_)))
    def optionalDetails: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails]] = field(_.details)((c_, f_) => c_.copy(details = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.UserState] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def userName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userName)((c_, f_) => c_.copy(userName = f_))
    def loginNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.loginNames)((c_, f_) => c_.copy(loginNames = f_))
    def preferredLoginName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.preferredLoginName)((c_, f_) => c_.copy(preferredLoginName = f_))
    def human: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.Human] = field(_.getHuman)((c_, f_) => c_.copy(`type` = com.zitadel.user.v1.user.User.Type.Human(f_)))
    def machine: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.Machine] = field(_.getMachine)((c_, f_) => c_.copy(`type` = com.zitadel.user.v1.user.User.Type.Machine(f_)))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.user.v1.user.User.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val DETAILS_FIELD_NUMBER = 2
  final val STATE_FIELD_NUMBER = 3
  final val USER_NAME_FIELD_NUMBER = 4
  final val LOGIN_NAMES_FIELD_NUMBER = 5
  final val PREFERRED_LOGIN_NAME_FIELD_NUMBER = 6
  final val HUMAN_FIELD_NUMBER = 7
  final val MACHINE_FIELD_NUMBER = 8
  def of(
    id: _root_.scala.Predef.String,
    details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails],
    state: com.zitadel.user.v1.user.UserState,
    userName: _root_.scala.Predef.String,
    loginNames: _root_.scala.Seq[_root_.scala.Predef.String],
    preferredLoginName: _root_.scala.Predef.String,
    `type`: com.zitadel.user.v1.user.User.Type
  ): _root_.com.zitadel.user.v1.user.User = _root_.com.zitadel.user.v1.user.User(
    id,
    details,
    state,
    userName,
    loginNames,
    preferredLoginName,
    `type`
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.user.v1.User])
}
