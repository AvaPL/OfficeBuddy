// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.policy.v1.policy

/** @param primaryColor
  *   hex value for primary color
  * @param isDefault
  *   defines if the organization's admin changed the policy
  * @param hideLoginNameSuffix
  *   hides the org suffix on the login form if the scope &92;"urn:zitadel:iam:org:domain:primary:{domainname}&92;" is set
  * @param warnColor
  *   hex value for secondary color
  * @param backgroundColor
  *   hex value for background color
  * @param fontColor
  *   hex value for font color
  * @param primaryColorDark
  *   hex value for primary color dark theme
  * @param backgroundColorDark
  *   hex value for background color dark theme
  * @param warnColorDark
  *   hex value for warning color dark theme
  * @param fontColorDark
  *   hex value for font color dark theme
  */
@SerialVersionUID(0L)
final case class LabelPolicy(
    details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails] = _root_.scala.None,
    primaryColor: _root_.scala.Predef.String = "",
    isDefault: _root_.scala.Boolean = false,
    hideLoginNameSuffix: _root_.scala.Boolean = false,
    warnColor: _root_.scala.Predef.String = "",
    backgroundColor: _root_.scala.Predef.String = "",
    fontColor: _root_.scala.Predef.String = "",
    primaryColorDark: _root_.scala.Predef.String = "",
    backgroundColorDark: _root_.scala.Predef.String = "",
    warnColorDark: _root_.scala.Predef.String = "",
    fontColorDark: _root_.scala.Predef.String = "",
    disableWatermark: _root_.scala.Boolean = false,
    logoUrl: _root_.scala.Predef.String = "",
    iconUrl: _root_.scala.Predef.String = "",
    logoUrlDark: _root_.scala.Predef.String = "",
    iconUrlDark: _root_.scala.Predef.String = "",
    fontUrl: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LabelPolicy] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (details.isDefined) {
        val __value = details.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = primaryColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = isDefault
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = hideLoginNameSuffix
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = warnColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = backgroundColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = fontColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = primaryColorDark
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      
      {
        val __value = backgroundColorDark
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
        }
      };
      
      {
        val __value = warnColorDark
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
        }
      };
      
      {
        val __value = fontColorDark
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
        }
      };
      
      {
        val __value = disableWatermark
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(13, __value)
        }
      };
      
      {
        val __value = logoUrl
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, __value)
        }
      };
      
      {
        val __value = iconUrl
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, __value)
        }
      };
      
      {
        val __value = logoUrlDark
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, __value)
        }
      };
      
      {
        val __value = iconUrlDark
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, __value)
        }
      };
      
      {
        val __value = fontUrl
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(18, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      details.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = primaryColor
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = isDefault
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = hideLoginNameSuffix
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = warnColor
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = backgroundColor
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = fontColor
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = primaryColorDark
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = backgroundColorDark
        if (!__v.isEmpty) {
          _output__.writeString(10, __v)
        }
      };
      {
        val __v = warnColorDark
        if (!__v.isEmpty) {
          _output__.writeString(11, __v)
        }
      };
      {
        val __v = fontColorDark
        if (!__v.isEmpty) {
          _output__.writeString(12, __v)
        }
      };
      {
        val __v = disableWatermark
        if (__v != false) {
          _output__.writeBool(13, __v)
        }
      };
      {
        val __v = logoUrl
        if (!__v.isEmpty) {
          _output__.writeString(14, __v)
        }
      };
      {
        val __v = iconUrl
        if (!__v.isEmpty) {
          _output__.writeString(15, __v)
        }
      };
      {
        val __v = logoUrlDark
        if (!__v.isEmpty) {
          _output__.writeString(16, __v)
        }
      };
      {
        val __v = iconUrlDark
        if (!__v.isEmpty) {
          _output__.writeString(17, __v)
        }
      };
      {
        val __v = fontUrl
        if (!__v.isEmpty) {
          _output__.writeString(18, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getDetails: com.zitadel.v1.`object`.ObjectDetails = details.getOrElse(com.zitadel.v1.`object`.ObjectDetails.defaultInstance)
    def clearDetails: LabelPolicy = copy(details = _root_.scala.None)
    def withDetails(__v: com.zitadel.v1.`object`.ObjectDetails): LabelPolicy = copy(details = Option(__v))
    def withPrimaryColor(__v: _root_.scala.Predef.String): LabelPolicy = copy(primaryColor = __v)
    def withIsDefault(__v: _root_.scala.Boolean): LabelPolicy = copy(isDefault = __v)
    def withHideLoginNameSuffix(__v: _root_.scala.Boolean): LabelPolicy = copy(hideLoginNameSuffix = __v)
    def withWarnColor(__v: _root_.scala.Predef.String): LabelPolicy = copy(warnColor = __v)
    def withBackgroundColor(__v: _root_.scala.Predef.String): LabelPolicy = copy(backgroundColor = __v)
    def withFontColor(__v: _root_.scala.Predef.String): LabelPolicy = copy(fontColor = __v)
    def withPrimaryColorDark(__v: _root_.scala.Predef.String): LabelPolicy = copy(primaryColorDark = __v)
    def withBackgroundColorDark(__v: _root_.scala.Predef.String): LabelPolicy = copy(backgroundColorDark = __v)
    def withWarnColorDark(__v: _root_.scala.Predef.String): LabelPolicy = copy(warnColorDark = __v)
    def withFontColorDark(__v: _root_.scala.Predef.String): LabelPolicy = copy(fontColorDark = __v)
    def withDisableWatermark(__v: _root_.scala.Boolean): LabelPolicy = copy(disableWatermark = __v)
    def withLogoUrl(__v: _root_.scala.Predef.String): LabelPolicy = copy(logoUrl = __v)
    def withIconUrl(__v: _root_.scala.Predef.String): LabelPolicy = copy(iconUrl = __v)
    def withLogoUrlDark(__v: _root_.scala.Predef.String): LabelPolicy = copy(logoUrlDark = __v)
    def withIconUrlDark(__v: _root_.scala.Predef.String): LabelPolicy = copy(iconUrlDark = __v)
    def withFontUrl(__v: _root_.scala.Predef.String): LabelPolicy = copy(fontUrl = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => details.orNull
        case 2 => {
          val __t = primaryColor
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = isDefault
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = hideLoginNameSuffix
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = warnColor
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = backgroundColor
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = fontColor
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = primaryColorDark
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = backgroundColorDark
          if (__t != "") __t else null
        }
        case 11 => {
          val __t = warnColorDark
          if (__t != "") __t else null
        }
        case 12 => {
          val __t = fontColorDark
          if (__t != "") __t else null
        }
        case 13 => {
          val __t = disableWatermark
          if (__t != false) __t else null
        }
        case 14 => {
          val __t = logoUrl
          if (__t != "") __t else null
        }
        case 15 => {
          val __t = iconUrl
          if (__t != "") __t else null
        }
        case 16 => {
          val __t = logoUrlDark
          if (__t != "") __t else null
        }
        case 17 => {
          val __t = iconUrlDark
          if (__t != "") __t else null
        }
        case 18 => {
          val __t = fontUrl
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => details.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(primaryColor)
        case 4 => _root_.scalapb.descriptors.PBoolean(isDefault)
        case 5 => _root_.scalapb.descriptors.PBoolean(hideLoginNameSuffix)
        case 6 => _root_.scalapb.descriptors.PString(warnColor)
        case 7 => _root_.scalapb.descriptors.PString(backgroundColor)
        case 8 => _root_.scalapb.descriptors.PString(fontColor)
        case 9 => _root_.scalapb.descriptors.PString(primaryColorDark)
        case 10 => _root_.scalapb.descriptors.PString(backgroundColorDark)
        case 11 => _root_.scalapb.descriptors.PString(warnColorDark)
        case 12 => _root_.scalapb.descriptors.PString(fontColorDark)
        case 13 => _root_.scalapb.descriptors.PBoolean(disableWatermark)
        case 14 => _root_.scalapb.descriptors.PString(logoUrl)
        case 15 => _root_.scalapb.descriptors.PString(iconUrl)
        case 16 => _root_.scalapb.descriptors.PString(logoUrlDark)
        case 17 => _root_.scalapb.descriptors.PString(iconUrlDark)
        case 18 => _root_.scalapb.descriptors.PString(fontUrl)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.policy.v1.policy.LabelPolicy.type = com.zitadel.policy.v1.policy.LabelPolicy
    // @@protoc_insertion_point(GeneratedMessage[zitadel.policy.v1.LabelPolicy])
}

object LabelPolicy extends scalapb.GeneratedMessageCompanion[com.zitadel.policy.v1.policy.LabelPolicy] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.policy.v1.policy.LabelPolicy] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.policy.v1.policy.LabelPolicy = {
    var __details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails] = _root_.scala.None
    var __primaryColor: _root_.scala.Predef.String = ""
    var __isDefault: _root_.scala.Boolean = false
    var __hideLoginNameSuffix: _root_.scala.Boolean = false
    var __warnColor: _root_.scala.Predef.String = ""
    var __backgroundColor: _root_.scala.Predef.String = ""
    var __fontColor: _root_.scala.Predef.String = ""
    var __primaryColorDark: _root_.scala.Predef.String = ""
    var __backgroundColorDark: _root_.scala.Predef.String = ""
    var __warnColorDark: _root_.scala.Predef.String = ""
    var __fontColorDark: _root_.scala.Predef.String = ""
    var __disableWatermark: _root_.scala.Boolean = false
    var __logoUrl: _root_.scala.Predef.String = ""
    var __iconUrl: _root_.scala.Predef.String = ""
    var __logoUrlDark: _root_.scala.Predef.String = ""
    var __iconUrlDark: _root_.scala.Predef.String = ""
    var __fontUrl: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __details = Option(__details.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.v1.`object`.ObjectDetails](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __primaryColor = _input__.readStringRequireUtf8()
        case 32 =>
          __isDefault = _input__.readBool()
        case 40 =>
          __hideLoginNameSuffix = _input__.readBool()
        case 50 =>
          __warnColor = _input__.readStringRequireUtf8()
        case 58 =>
          __backgroundColor = _input__.readStringRequireUtf8()
        case 66 =>
          __fontColor = _input__.readStringRequireUtf8()
        case 74 =>
          __primaryColorDark = _input__.readStringRequireUtf8()
        case 82 =>
          __backgroundColorDark = _input__.readStringRequireUtf8()
        case 90 =>
          __warnColorDark = _input__.readStringRequireUtf8()
        case 98 =>
          __fontColorDark = _input__.readStringRequireUtf8()
        case 104 =>
          __disableWatermark = _input__.readBool()
        case 114 =>
          __logoUrl = _input__.readStringRequireUtf8()
        case 122 =>
          __iconUrl = _input__.readStringRequireUtf8()
        case 130 =>
          __logoUrlDark = _input__.readStringRequireUtf8()
        case 138 =>
          __iconUrlDark = _input__.readStringRequireUtf8()
        case 146 =>
          __fontUrl = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.policy.v1.policy.LabelPolicy(
        details = __details,
        primaryColor = __primaryColor,
        isDefault = __isDefault,
        hideLoginNameSuffix = __hideLoginNameSuffix,
        warnColor = __warnColor,
        backgroundColor = __backgroundColor,
        fontColor = __fontColor,
        primaryColorDark = __primaryColorDark,
        backgroundColorDark = __backgroundColorDark,
        warnColorDark = __warnColorDark,
        fontColorDark = __fontColorDark,
        disableWatermark = __disableWatermark,
        logoUrl = __logoUrl,
        iconUrl = __iconUrl,
        logoUrlDark = __logoUrlDark,
        iconUrlDark = __iconUrlDark,
        fontUrl = __fontUrl,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.policy.v1.policy.LabelPolicy] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.policy.v1.policy.LabelPolicy(
        details = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails]]),
        primaryColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        isDefault = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        hideLoginNameSuffix = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        warnColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        backgroundColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fontColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        primaryColorDark = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        backgroundColorDark = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        warnColorDark = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fontColorDark = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        disableWatermark = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        logoUrl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        iconUrl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        logoUrlDark = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        iconUrlDark = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fontUrl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PolicyProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PolicyProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.v1.`object`.ObjectDetails
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.policy.v1.policy.LabelPolicy(
    details = _root_.scala.None,
    primaryColor = "",
    isDefault = false,
    hideLoginNameSuffix = false,
    warnColor = "",
    backgroundColor = "",
    fontColor = "",
    primaryColorDark = "",
    backgroundColorDark = "",
    warnColorDark = "",
    fontColorDark = "",
    disableWatermark = false,
    logoUrl = "",
    iconUrl = "",
    logoUrlDark = "",
    iconUrlDark = "",
    fontUrl = ""
  )
  implicit class LabelPolicyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.policy.v1.policy.LabelPolicy]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.policy.v1.policy.LabelPolicy](_l) {
    def details: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.v1.`object`.ObjectDetails] = field(_.getDetails)((c_, f_) => c_.copy(details = Option(f_)))
    def optionalDetails: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails]] = field(_.details)((c_, f_) => c_.copy(details = f_))
    def primaryColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.primaryColor)((c_, f_) => c_.copy(primaryColor = f_))
    def isDefault: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isDefault)((c_, f_) => c_.copy(isDefault = f_))
    def hideLoginNameSuffix: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hideLoginNameSuffix)((c_, f_) => c_.copy(hideLoginNameSuffix = f_))
    def warnColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.warnColor)((c_, f_) => c_.copy(warnColor = f_))
    def backgroundColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.backgroundColor)((c_, f_) => c_.copy(backgroundColor = f_))
    def fontColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fontColor)((c_, f_) => c_.copy(fontColor = f_))
    def primaryColorDark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.primaryColorDark)((c_, f_) => c_.copy(primaryColorDark = f_))
    def backgroundColorDark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.backgroundColorDark)((c_, f_) => c_.copy(backgroundColorDark = f_))
    def warnColorDark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.warnColorDark)((c_, f_) => c_.copy(warnColorDark = f_))
    def fontColorDark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fontColorDark)((c_, f_) => c_.copy(fontColorDark = f_))
    def disableWatermark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.disableWatermark)((c_, f_) => c_.copy(disableWatermark = f_))
    def logoUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.logoUrl)((c_, f_) => c_.copy(logoUrl = f_))
    def iconUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.iconUrl)((c_, f_) => c_.copy(iconUrl = f_))
    def logoUrlDark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.logoUrlDark)((c_, f_) => c_.copy(logoUrlDark = f_))
    def iconUrlDark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.iconUrlDark)((c_, f_) => c_.copy(iconUrlDark = f_))
    def fontUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fontUrl)((c_, f_) => c_.copy(fontUrl = f_))
  }
  final val DETAILS_FIELD_NUMBER = 1
  final val PRIMARY_COLOR_FIELD_NUMBER = 2
  final val IS_DEFAULT_FIELD_NUMBER = 4
  final val HIDE_LOGIN_NAME_SUFFIX_FIELD_NUMBER = 5
  final val WARN_COLOR_FIELD_NUMBER = 6
  final val BACKGROUND_COLOR_FIELD_NUMBER = 7
  final val FONT_COLOR_FIELD_NUMBER = 8
  final val PRIMARY_COLOR_DARK_FIELD_NUMBER = 9
  final val BACKGROUND_COLOR_DARK_FIELD_NUMBER = 10
  final val WARN_COLOR_DARK_FIELD_NUMBER = 11
  final val FONT_COLOR_DARK_FIELD_NUMBER = 12
  final val DISABLE_WATERMARK_FIELD_NUMBER = 13
  final val LOGO_URL_FIELD_NUMBER = 14
  final val ICON_URL_FIELD_NUMBER = 15
  final val LOGO_URL_DARK_FIELD_NUMBER = 16
  final val ICON_URL_DARK_FIELD_NUMBER = 17
  final val FONT_URL_FIELD_NUMBER = 18
  def of(
    details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails],
    primaryColor: _root_.scala.Predef.String,
    isDefault: _root_.scala.Boolean,
    hideLoginNameSuffix: _root_.scala.Boolean,
    warnColor: _root_.scala.Predef.String,
    backgroundColor: _root_.scala.Predef.String,
    fontColor: _root_.scala.Predef.String,
    primaryColorDark: _root_.scala.Predef.String,
    backgroundColorDark: _root_.scala.Predef.String,
    warnColorDark: _root_.scala.Predef.String,
    fontColorDark: _root_.scala.Predef.String,
    disableWatermark: _root_.scala.Boolean,
    logoUrl: _root_.scala.Predef.String,
    iconUrl: _root_.scala.Predef.String,
    logoUrlDark: _root_.scala.Predef.String,
    iconUrlDark: _root_.scala.Predef.String,
    fontUrl: _root_.scala.Predef.String
  ): _root_.com.zitadel.policy.v1.policy.LabelPolicy = _root_.com.zitadel.policy.v1.policy.LabelPolicy(
    details,
    primaryColor,
    isDefault,
    hideLoginNameSuffix,
    warnColor,
    backgroundColor,
    fontColor,
    primaryColorDark,
    backgroundColorDark,
    warnColorDark,
    fontColorDark,
    disableWatermark,
    logoUrl,
    iconUrl,
    logoUrlDark,
    iconUrlDark,
    fontUrl
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.policy.v1.LabelPolicy])
}
