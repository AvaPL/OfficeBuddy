// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.settings.v2alpha.branding_settings

/** @param primaryColor
  *   hex value for primary color
  * @param backgroundColor
  *   hex value for background color
  * @param warnColor
  *   hex value for warning color
  * @param fontColor
  *   hex value for font color
  * @param logoUrl
  *   url where the logo is served
  * @param iconUrl
  *   url where the icon is served
  */
@SerialVersionUID(0L)
final case class Theme(
    primaryColor: _root_.scala.Predef.String = "",
    backgroundColor: _root_.scala.Predef.String = "",
    warnColor: _root_.scala.Predef.String = "",
    fontColor: _root_.scala.Predef.String = "",
    logoUrl: _root_.scala.Predef.String = "",
    iconUrl: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Theme] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = primaryColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = backgroundColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = warnColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = fontColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = logoUrl
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = iconUrl
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = primaryColor
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = backgroundColor
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = warnColor
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = fontColor
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = logoUrl
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = iconUrl
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withPrimaryColor(__v: _root_.scala.Predef.String): Theme = copy(primaryColor = __v)
    def withBackgroundColor(__v: _root_.scala.Predef.String): Theme = copy(backgroundColor = __v)
    def withWarnColor(__v: _root_.scala.Predef.String): Theme = copy(warnColor = __v)
    def withFontColor(__v: _root_.scala.Predef.String): Theme = copy(fontColor = __v)
    def withLogoUrl(__v: _root_.scala.Predef.String): Theme = copy(logoUrl = __v)
    def withIconUrl(__v: _root_.scala.Predef.String): Theme = copy(iconUrl = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = primaryColor
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = backgroundColor
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = warnColor
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = fontColor
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = logoUrl
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = iconUrl
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(primaryColor)
        case 2 => _root_.scalapb.descriptors.PString(backgroundColor)
        case 3 => _root_.scalapb.descriptors.PString(warnColor)
        case 4 => _root_.scalapb.descriptors.PString(fontColor)
        case 5 => _root_.scalapb.descriptors.PString(logoUrl)
        case 6 => _root_.scalapb.descriptors.PString(iconUrl)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.settings.v2alpha.branding_settings.Theme.type = com.zitadel.settings.v2alpha.branding_settings.Theme
    // @@protoc_insertion_point(GeneratedMessage[zitadel.settings.v2alpha.Theme])
}

object Theme extends scalapb.GeneratedMessageCompanion[com.zitadel.settings.v2alpha.branding_settings.Theme] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.settings.v2alpha.branding_settings.Theme] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.settings.v2alpha.branding_settings.Theme = {
    var __primaryColor: _root_.scala.Predef.String = ""
    var __backgroundColor: _root_.scala.Predef.String = ""
    var __warnColor: _root_.scala.Predef.String = ""
    var __fontColor: _root_.scala.Predef.String = ""
    var __logoUrl: _root_.scala.Predef.String = ""
    var __iconUrl: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __primaryColor = _input__.readStringRequireUtf8()
        case 18 =>
          __backgroundColor = _input__.readStringRequireUtf8()
        case 26 =>
          __warnColor = _input__.readStringRequireUtf8()
        case 34 =>
          __fontColor = _input__.readStringRequireUtf8()
        case 42 =>
          __logoUrl = _input__.readStringRequireUtf8()
        case 50 =>
          __iconUrl = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.settings.v2alpha.branding_settings.Theme(
        primaryColor = __primaryColor,
        backgroundColor = __backgroundColor,
        warnColor = __warnColor,
        fontColor = __fontColor,
        logoUrl = __logoUrl,
        iconUrl = __iconUrl,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.settings.v2alpha.branding_settings.Theme] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.settings.v2alpha.branding_settings.Theme(
        primaryColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        backgroundColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        warnColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fontColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        logoUrl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        iconUrl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BrandingSettingsProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BrandingSettingsProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.settings.v2alpha.branding_settings.Theme(
    primaryColor = "",
    backgroundColor = "",
    warnColor = "",
    fontColor = "",
    logoUrl = "",
    iconUrl = ""
  )
  implicit class ThemeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.settings.v2alpha.branding_settings.Theme]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.settings.v2alpha.branding_settings.Theme](_l) {
    def primaryColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.primaryColor)((c_, f_) => c_.copy(primaryColor = f_))
    def backgroundColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.backgroundColor)((c_, f_) => c_.copy(backgroundColor = f_))
    def warnColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.warnColor)((c_, f_) => c_.copy(warnColor = f_))
    def fontColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fontColor)((c_, f_) => c_.copy(fontColor = f_))
    def logoUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.logoUrl)((c_, f_) => c_.copy(logoUrl = f_))
    def iconUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.iconUrl)((c_, f_) => c_.copy(iconUrl = f_))
  }
  final val PRIMARY_COLOR_FIELD_NUMBER = 1
  final val BACKGROUND_COLOR_FIELD_NUMBER = 2
  final val WARN_COLOR_FIELD_NUMBER = 3
  final val FONT_COLOR_FIELD_NUMBER = 4
  final val LOGO_URL_FIELD_NUMBER = 5
  final val ICON_URL_FIELD_NUMBER = 6
  def of(
    primaryColor: _root_.scala.Predef.String,
    backgroundColor: _root_.scala.Predef.String,
    warnColor: _root_.scala.Predef.String,
    fontColor: _root_.scala.Predef.String,
    logoUrl: _root_.scala.Predef.String,
    iconUrl: _root_.scala.Predef.String
  ): _root_.com.zitadel.settings.v2alpha.branding_settings.Theme = _root_.com.zitadel.settings.v2alpha.branding_settings.Theme(
    primaryColor,
    backgroundColor,
    warnColor,
    fontColor,
    logoUrl,
    iconUrl
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.settings.v2alpha.Theme])
}
