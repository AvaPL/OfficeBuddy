// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.settings.v2alpha.login_settings

object LoginSettingsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto,
    com.zitadel.settings.v2alpha.settings.SettingsProto,
    com.google.protobuf.duration.DurationProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.zitadel.settings.v2alpha.login_settings.LoginSettings,
      com.zitadel.settings.v2alpha.login_settings.IdentityProvider
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Ci16aXRhZGVsL3NldHRpbmdzL3YyYWxwaGEvbG9naW5fc2V0dGluZ3MucHJvdG8SGHppdGFkZWwuc2V0dGluZ3MudjJhbHBoY
  RoucHJvdG9jLWdlbi1vcGVuYXBpdjIvb3B0aW9ucy9hbm5vdGF0aW9ucy5wcm90bxoneml0YWRlbC9zZXR0aW5ncy92MmFscGhhL
  3NldHRpbmdzLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8ihRwKDUxvZ2luU2V0dGluZ3MSnAEKF2FsbG93X
  3VzZXJuYW1lX3Bhc3N3b3JkGAEgASgIQmTiPxcSFWFsbG93VXNlcm5hbWVQYXNzd29yZJJBRzJFZGVmaW5lcyBpZiBhIHVzZXIga
  XMgYWxsb3dlZCB0byBsb2cgaW4gd2l0aCBoaXMgdXNlcm5hbWUgYW5kIHBhc3N3b3JkUhVhbGxvd1VzZXJuYW1lUGFzc3dvcmQSh
  AEKDmFsbG93X3JlZ2lzdGVyGAIgASgIQl3iPw8SDWFsbG93UmVnaXN0ZXKSQUgyRmRlZmluZXMgaWYgYSBwZXJzb24gaXMgYWxsb
  3dlZCB0byByZWdpc3RlciBhIHVzZXIgb24gdGhpcyBvcmdhbml6YXRpb25SDWFsbG93UmVnaXN0ZXISmQEKEmFsbG93X2V4dGVyb
  mFsX2lkcBgDIAEoCEJr4j8SEhBhbGxvd0V4dGVybmFsSWRwkkFTMlFkZWZpbmVzIGlmIGEgdXNlciBpcyBhbGxvd2VkIHRvIGFkZ
  CBhIGRlZmluZWQgaWRlbnRpdHkgcHJvdmlkZXIuIEUuZy4gR29vZ2xlIGF1dGhSEGFsbG93RXh0ZXJuYWxJZHASYgoJZm9yY2Vfb
  WZhGAQgASgIQkXiPwoSCGZvcmNlTWZhkkE1MjNkZWZpbmVzIGlmIGEgdXNlciBNVVNUIHVzZSBhIG11bHRpLWZhY3RvciB0byBsb
  2cgaW5SCGZvcmNlTWZhEowBCg1wYXNza2V5c190eXBlGAUgASgOMiYueml0YWRlbC5zZXR0aW5ncy52MmFscGhhLlBhc3NrZXlzV
  HlwZUI/4j8OEgxwYXNza2V5c1R5cGWSQSsyKWRlZmluZXMgaWYgcGFzc2tleXMgYXJlIGFsbG93ZWQgZm9yIHVzZXJzUgxwYXNza
  2V5c1R5cGUSjQEKE2hpZGVfcGFzc3dvcmRfcmVzZXQYBiABKAhCXeI/ExIRaGlkZVBhc3N3b3JkUmVzZXSSQUQyQmRlZmluZXMga
  WYgcGFzc3dvcmQgcmVzZXQgbGluayBzaG91bGQgYmUgc2hvd24gaW4gdGhlIGxvZ2luIHNjcmVlblIRaGlkZVBhc3N3b3JkUmVzZ
  XQSxwEKGGlnbm9yZV91bmtub3duX3VzZXJuYW1lcxgHIAEoCEKMAeI/GBIWaWdub3JlVW5rbm93blVzZXJuYW1lc5JBbjJsZGVma
  W5lcyBpZiB1bmtub3duIHVzZXJuYW1lIG9uIGxvZ2luIHNjcmVlbiBkaXJlY3RseSByZXR1cm5zIGFuIGVycm9yIG9yIGFsd2F5c
  yBkaXNwbGF5cyB0aGUgcGFzc3dvcmQgc2NyZWVuUhZpZ25vcmVVbmtub3duVXNlcm5hbWVzEtgBChRkZWZhdWx0X3JlZGlyZWN0X
  3VyaRgIIAEoCUKlAeI/FBISZGVmYXVsdFJlZGlyZWN0VXJpkkGKATJpZGVmaW5lcyB3aGVyZSB0aGUgdXNlciB3aWxsIGJlIHJlZ
  GlyZWN0ZWQgdG8gaWYgdGhlIGxvZ2luIGlzIHN0YXJ0ZWQgd2l0aG91dCBhcHAgY29udGV4dCAoZS5nLiBmcm9tIG1haWwpSh0ia
  HR0cHM6Ly9hY21lLmNvbS91aS9jb25zb2xlIlISZGVmYXVsdFJlZGlyZWN0VXJpEssBChdwYXNzd29yZF9jaGVja19saWZldGltZ
  RgJIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkJ44j8XEhVwYXNzd29yZENoZWNrTGlmZXRpbWWSQVsyTkRlZmluZXMgY
  WZ0ZXIgaG93IG11Y2ggdGltZSB0aGUgdXNlciBoYXMgdG8gcmUtYXV0aGVudGljYXRlIHdpdGggdGhlIHBhc3N3b3JkLkoJIjg2N
  DAwMHMiUhVwYXNzd29yZENoZWNrTGlmZXRpbWUS5AEKHWV4dGVybmFsX2xvZ2luX2NoZWNrX2xpZmV0aW1lGAogASgLMhkuZ29vZ
  2xlLnByb3RvYnVmLkR1cmF0aW9uQoUB4j8cEhpleHRlcm5hbExvZ2luQ2hlY2tMaWZldGltZZJBYzJWRGVmaW5lcyBhZnRlciBob
  3cgbXVjaCB0aW1lIHRoZSB1c2VyIGhhcyB0byByZS1hdXRoZW50aWNhdGUgd2l0aCBhbiBleHRlcm5hbCBwcm92aWRlci5KCSI4N
  jQwMDBzIlIaZXh0ZXJuYWxMb2dpbkNoZWNrTGlmZXRpbWUSuAEKFm1mYV9pbml0X3NraXBfbGlmZXRpbWUYCyABKAsyGS5nb29nb
  GUucHJvdG9idWYuRHVyYXRpb25CaOI/FRITbWZhSW5pdFNraXBMaWZldGltZZJBTTI/RGVmaW5lcyBhZnRlciBob3cgbXVjaCB0a
  W1lIHRoZSBtZmEgcHJvbXB0IHdpbGwgYmUgc2hvd24gYWdhaW4uSgoiMjU5MjAwMHMiUhNtZmFJbml0U2tpcExpZmV0aW1lEsEBC
  hxzZWNvbmRfZmFjdG9yX2NoZWNrX2xpZmV0aW1lGAwgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQmXiPxsSGXNlY29uZ
  EZhY3RvckNoZWNrTGlmZXRpbWWSQUQyOERlZmluZXMgYWZ0ZXIgaG93IGxvbmcgdGhlIHNlY29uZC1mYWN0b3IgY2hlY2sgaXMgd
  mFsaWQuSggiNjQ4MDBzIlIZc2Vjb25kRmFjdG9yQ2hlY2tMaWZldGltZRK3AQobbXVsdGlfZmFjdG9yX2NoZWNrX2xpZmV0aW1lG
  A0gASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQl3iPxoSGG11bHRpRmFjdG9yQ2hlY2tMaWZldGltZZJBPTIxRGVmaW5lc
  yBob3cgbG9uZyB0aGUgbXVsdGktZmFjdG9yIGNoZWNrIGlzIHZhbGlkLkoIIjQzMjAwcyJSGG11bHRpRmFjdG9yQ2hlY2tMaWZld
  GltZRJlCg5zZWNvbmRfZmFjdG9ycxgOIAMoDjIqLnppdGFkZWwuc2V0dGluZ3MudjJhbHBoYS5TZWNvbmRGYWN0b3JUeXBlQhLiP
  w8SDXNlY29uZEZhY3RvcnNSDXNlY29uZEZhY3RvcnMSYQoNbXVsdGlfZmFjdG9ycxgPIAMoDjIpLnppdGFkZWwuc2V0dGluZ3Mud
  jJhbHBoYS5NdWx0aUZhY3RvclR5cGVCEeI/DhIMbXVsdGlGYWN0b3JzUgxtdWx0aUZhY3RvcnMSnwIKFmFsbG93X2RvbWFpbl9ka
  XNjb3ZlcnkYECABKAhC6AHiPxYSFGFsbG93RG9tYWluRGlzY292ZXJ5kkHLATLIAUlmIHNldCB0byB0cnVlLCB0aGUgc3VmZml4I
  ChAZG9tYWluLmNvbSkgb2YgYW4gdW5rbm93biB1c2VybmFtZSBpbnB1dCBvbiB0aGUgbG9naW4gc2NyZWVuIHdpbGwgYmUgbWF0Y
  2hlZCBhZ2FpbnN0IHRoZSBvcmcgZG9tYWlucyBhbmQgd2lsbCByZWRpcmVjdCB0byB0aGUgcmVnaXN0cmF0aW9uIG9mIHRoYXQgb
  3JnYW5pemF0aW9uIG9uIHN1Y2Nlc3MuUhRhbGxvd0RvbWFpbkRpc2NvdmVyeRK/AQoYZGlzYWJsZV9sb2dpbl93aXRoX2VtYWlsG
  BEgASgIQoUB4j8XEhVkaXNhYmxlTG9naW5XaXRoRW1haWySQWgyZmRlZmluZXMgaWYgdGhlIHVzZXIgY2FuIGFkZGl0aW9uYWxse
  SAodG8gdGhlIGxvZ2luIG5hbWUpIGJlIGlkZW50aWZpZWQgYnkgdGhlaXIgdmVyaWZpZWQgZW1haWwgYWRkcmVzc1IVZGlzYWJsZ
  UxvZ2luV2l0aEVtYWlsEr4BChhkaXNhYmxlX2xvZ2luX3dpdGhfcGhvbmUYEiABKAhChAHiPxcSFWRpc2FibGVMb2dpbldpdGhQa
  G9uZZJBZzJlZGVmaW5lcyBpZiB0aGUgdXNlciBjYW4gYWRkaXRpb25hbGx5ICh0byB0aGUgbG9naW4gbmFtZSkgYmUgaWRlbnRpZ
  mllZCBieSB0aGVpciB2ZXJpZmllZCBwaG9uZSBudW1iZXJSFWRpc2FibGVMb2dpbldpdGhQaG9uZRLVAQoTcmVzb3VyY2Vfb3duZ
  XJfdHlwZRgTIAEoDjIrLnppdGFkZWwuc2V0dGluZ3MudjJhbHBoYS5SZXNvdXJjZU93bmVyVHlwZUJ44j8TEhFyZXNvdXJjZU93b
  mVyVHlwZZJBXzJdcmVzb3VyY2Vfb3duZXJfdHlwZSByZXR1cm5zIGlmIHRoZSBzZXR0aW5ncyBpcyBtYW5hZ2VkIG9uIHRoZSBvc
  mdhbml6YXRpb24gb3Igb24gdGhlIGluc3RhbmNlUhFyZXNvdXJjZU93bmVyVHlwZRLUAQoUZm9yY2VfbWZhX2xvY2FsX29ubHkYF
  iABKAhCogHiPxMSEWZvcmNlTWZhTG9jYWxPbmx5kkGIATKFAWlmIGFjdGl2YXRlZCwgb25seSBsb2NhbCBhdXRoZW50aWNhdGVkI
  HVzZXJzIGFyZSBmb3JjZWQgdG8gdXNlIE1GQS4gQXV0aGVudGljYXRpb24gdGhyb3VnaCBJRFBzIHdvbid0IHByb21wdCBhIE1GQ
  SBzdGVwIGluIHRoZSBsb2dpbi5SEWZvcmNlTWZhTG9jYWxPbmx5IpkBChBJZGVudGl0eVByb3ZpZGVyEhcKAmlkGAEgASgJQgfiP
  wQSAmlkUgJpZBIdCgRuYW1lGAIgASgJQgniPwYSBG5hbWVSBG5hbWUSTQoEdHlwZRgDIAEoDjIuLnppdGFkZWwuc2V0dGluZ3Mud
  jJhbHBoYS5JZGVudGl0eVByb3ZpZGVyVHlwZUIJ4j8GEgR0eXBlUgR0eXBlKs0BChBTZWNvbmRGYWN0b3JUeXBlEkcKHlNFQ09OR
  F9GQUNUT1JfVFlQRV9VTlNQRUNJRklFRBAAGiPiPyASHlNFQ09ORF9GQUNUT1JfVFlQRV9VTlNQRUNJRklFRBI3ChZTRUNPTkRfR
  kFDVE9SX1RZUEVfT1RQEAEaG+I/GBIWU0VDT05EX0ZBQ1RPUl9UWVBFX09UUBI3ChZTRUNPTkRfRkFDVE9SX1RZUEVfVTJGEAIaG
  +I/GBIWU0VDT05EX0ZBQ1RPUl9UWVBFX1UyRiqzAQoPTXVsdGlGYWN0b3JUeXBlEkUKHU1VTFRJX0ZBQ1RPUl9UWVBFX1VOU1BFQ
  0lGSUVEEAAaIuI/HxIdTVVMVElfRkFDVE9SX1RZUEVfVU5TUEVDSUZJRUQSWQonTVVMVElfRkFDVE9SX1RZUEVfVTJGX1dJVEhfV
  kVSSUZJQ0FUSU9OEAEaLOI/KRInTVVMVElfRkFDVE9SX1RZUEVfVTJGX1dJVEhfVkVSSUZJQ0FUSU9OKoQBCgxQYXNza2V5c1R5c
  GUSPQoZUEFTU0tFWVNfVFlQRV9OT1RfQUxMT1dFRBAAGh7iPxsSGVBBU1NLRVlTX1RZUEVfTk9UX0FMTE9XRUQSNQoVUEFTU0tFW
  VNfVFlQRV9BTExPV0VEEAEaGuI/FxIVUEFTU0tFWVNfVFlQRV9BTExPV0VEKr8GChRJZGVudGl0eVByb3ZpZGVyVHlwZRJPCiJJR
  EVOVElUWV9QUk9WSURFUl9UWVBFX1VOU1BFQ0lGSUVEEAAaJ+I/JBIiSURFTlRJVFlfUFJPVklERVJfVFlQRV9VTlNQRUNJRklFR
  BJBChtJREVOVElUWV9QUk9WSURFUl9UWVBFX09JREMQARog4j8dEhtJREVOVElUWV9QUk9WSURFUl9UWVBFX09JREMSPwoaSURFT
  lRJVFlfUFJPVklERVJfVFlQRV9KV1QQAhof4j8cEhpJREVOVElUWV9QUk9WSURFUl9UWVBFX0pXVBJBChtJREVOVElUWV9QUk9WS
  URFUl9UWVBFX0xEQVAQAxog4j8dEhtJREVOVElUWV9QUk9WSURFUl9UWVBFX0xEQVASQwocSURFTlRJVFlfUFJPVklERVJfVFlQR
  V9PQVVUSBAEGiHiPx4SHElERU5USVRZX1BST1ZJREVSX1RZUEVfT0FVVEgSSQofSURFTlRJVFlfUFJPVklERVJfVFlQRV9BWlVSR
  V9BRBAFGiTiPyESH0lERU5USVRZX1BST1ZJREVSX1RZUEVfQVpVUkVfQUQSRQodSURFTlRJVFlfUFJPVklERVJfVFlQRV9HSVRIV
  UIQBhoi4j8fEh1JREVOVElUWV9QUk9WSURFUl9UWVBFX0dJVEhVQhJLCiBJREVOVElUWV9QUk9WSURFUl9UWVBFX0dJVEhVQl9FU
  xAHGiXiPyISIElERU5USVRZX1BST1ZJREVSX1RZUEVfR0lUSFVCX0VTEkUKHUlERU5USVRZX1BST1ZJREVSX1RZUEVfR0lUTEFCE
  AgaIuI/HxIdSURFTlRJVFlfUFJPVklERVJfVFlQRV9HSVRMQUISXQopSURFTlRJVFlfUFJPVklERVJfVFlQRV9HSVRMQUJfU0VMR
  l9IT1NURUQQCRou4j8rEilJREVOVElUWV9QUk9WSURFUl9UWVBFX0dJVExBQl9TRUxGX0hPU1RFRBJFCh1JREVOVElUWV9QUk9WS
  URFUl9UWVBFX0dPT0dMRRAKGiLiPx8SHUlERU5USVRZX1BST1ZJREVSX1RZUEVfR09PR0xFQvMBChxjb20ueml0YWRlbC5zZXR0a
  W5ncy52MmFscGhhQhJMb2dpblNldHRpbmdzUHJvdG9QAVo9Z2l0aHViLmNvbS96aXRhZGVsL3ppdGFkZWwvcGtnL2dycGMvc2V0d
  GluZ3MvdjJhbHBoYTtzZXR0aW5nc6ICA1pTWKoCGFppdGFkZWwuU2V0dGluZ3MuVjJhbHBoYcoCGFppdGFkZWxcU2V0dGluZ3NcV
  jJhbHBoYeICJFppdGFkZWxcU2V0dGluZ3NcVjJhbHBoYVxHUEJNZXRhZGF0YeoCGlppdGFkZWw6OlNldHRpbmdzOjpWMmFscGhhY
  gZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto.javaDescriptor,
      com.zitadel.settings.v2alpha.settings.SettingsProto.javaDescriptor,
      com.google.protobuf.duration.DurationProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}