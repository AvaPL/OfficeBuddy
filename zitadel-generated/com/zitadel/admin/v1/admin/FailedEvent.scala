// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.admin.v1.admin

@SerialVersionUID(0L)
final case class FailedEvent(
    database: _root_.scala.Predef.String = "",
    viewName: _root_.scala.Predef.String = "",
    failedSequence: _root_.scala.Long = 0L,
    failureCount: _root_.scala.Long = 0L,
    errorMessage: _root_.scala.Predef.String = "",
    lastFailed: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FailedEvent] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = database
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = viewName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = failedSequence
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      
      {
        val __value = failureCount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      
      {
        val __value = errorMessage
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      if (lastFailed.isDefined) {
        val __value = lastFailed.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = database
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = viewName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = failedSequence
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = failureCount
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      {
        val __v = errorMessage
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      lastFailed.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withDatabase(__v: _root_.scala.Predef.String): FailedEvent = copy(database = __v)
    def withViewName(__v: _root_.scala.Predef.String): FailedEvent = copy(viewName = __v)
    def withFailedSequence(__v: _root_.scala.Long): FailedEvent = copy(failedSequence = __v)
    def withFailureCount(__v: _root_.scala.Long): FailedEvent = copy(failureCount = __v)
    def withErrorMessage(__v: _root_.scala.Predef.String): FailedEvent = copy(errorMessage = __v)
    def getLastFailed: com.google.protobuf.timestamp.Timestamp = lastFailed.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearLastFailed: FailedEvent = copy(lastFailed = _root_.scala.None)
    def withLastFailed(__v: com.google.protobuf.timestamp.Timestamp): FailedEvent = copy(lastFailed = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = database
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = viewName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = failedSequence
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = failureCount
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = errorMessage
          if (__t != "") __t else null
        }
        case 6 => lastFailed.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(database)
        case 2 => _root_.scalapb.descriptors.PString(viewName)
        case 3 => _root_.scalapb.descriptors.PLong(failedSequence)
        case 4 => _root_.scalapb.descriptors.PLong(failureCount)
        case 5 => _root_.scalapb.descriptors.PString(errorMessage)
        case 6 => lastFailed.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.admin.v1.admin.FailedEvent.type = com.zitadel.admin.v1.admin.FailedEvent
    // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.FailedEvent])
}

object FailedEvent extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.FailedEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.FailedEvent] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.FailedEvent = {
    var __database: _root_.scala.Predef.String = ""
    var __viewName: _root_.scala.Predef.String = ""
    var __failedSequence: _root_.scala.Long = 0L
    var __failureCount: _root_.scala.Long = 0L
    var __errorMessage: _root_.scala.Predef.String = ""
    var __lastFailed: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __database = _input__.readStringRequireUtf8()
        case 18 =>
          __viewName = _input__.readStringRequireUtf8()
        case 24 =>
          __failedSequence = _input__.readUInt64()
        case 32 =>
          __failureCount = _input__.readUInt64()
        case 42 =>
          __errorMessage = _input__.readStringRequireUtf8()
        case 50 =>
          __lastFailed = Option(__lastFailed.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.admin.v1.admin.FailedEvent(
        database = __database,
        viewName = __viewName,
        failedSequence = __failedSequence,
        failureCount = __failureCount,
        errorMessage = __errorMessage,
        lastFailed = __lastFailed,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.FailedEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.admin.v1.admin.FailedEvent(
        database = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        viewName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        failedSequence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        failureCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        errorMessage = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        lastFailed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(309)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(309)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.admin.v1.admin.FailedEvent(
    database = "",
    viewName = "",
    failedSequence = 0L,
    failureCount = 0L,
    errorMessage = "",
    lastFailed = _root_.scala.None
  )
  implicit class FailedEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.FailedEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.FailedEvent](_l) {
    def database: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.database)((c_, f_) => c_.copy(database = f_))
    def viewName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.viewName)((c_, f_) => c_.copy(viewName = f_))
    def failedSequence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.failedSequence)((c_, f_) => c_.copy(failedSequence = f_))
    def failureCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.failureCount)((c_, f_) => c_.copy(failureCount = f_))
    def errorMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.errorMessage)((c_, f_) => c_.copy(errorMessage = f_))
    def lastFailed: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getLastFailed)((c_, f_) => c_.copy(lastFailed = Option(f_)))
    def optionalLastFailed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.lastFailed)((c_, f_) => c_.copy(lastFailed = f_))
  }
  final val DATABASE_FIELD_NUMBER = 1
  final val VIEW_NAME_FIELD_NUMBER = 2
  final val FAILED_SEQUENCE_FIELD_NUMBER = 3
  final val FAILURE_COUNT_FIELD_NUMBER = 4
  final val ERROR_MESSAGE_FIELD_NUMBER = 5
  final val LAST_FAILED_FIELD_NUMBER = 6
  def of(
    database: _root_.scala.Predef.String,
    viewName: _root_.scala.Predef.String,
    failedSequence: _root_.scala.Long,
    failureCount: _root_.scala.Long,
    errorMessage: _root_.scala.Predef.String,
    lastFailed: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]
  ): _root_.com.zitadel.admin.v1.admin.FailedEvent = _root_.com.zitadel.admin.v1.admin.FailedEvent(
    database,
    viewName,
    failedSequence,
    failureCount,
    errorMessage,
    lastFailed
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.FailedEvent])
}
