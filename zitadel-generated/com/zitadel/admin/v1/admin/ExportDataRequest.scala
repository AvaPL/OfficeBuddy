// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.admin.v1.admin

@SerialVersionUID(0L)
final case class ExportDataRequest(
    orgIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    excludedOrgIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    withPasswords: _root_.scala.Boolean = false,
    withOtp: _root_.scala.Boolean = false,
    responseOutput: _root_.scala.Boolean = false,
    localOutput: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput] = _root_.scala.None,
    s3Output: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output] = _root_.scala.None,
    gcsOutput: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput] = _root_.scala.None,
    timeout: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExportDataRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      orgIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
      excludedOrgIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      
      {
        val __value = withPasswords
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      
      {
        val __value = withOtp
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = responseOutput
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      if (localOutput.isDefined) {
        val __value = localOutput.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (s3Output.isDefined) {
        val __value = s3Output.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (gcsOutput.isDefined) {
        val __value = gcsOutput.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = timeout
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      orgIds.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      excludedOrgIds.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      {
        val __v = withPasswords
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = withOtp
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = responseOutput
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      localOutput.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      s3Output.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      gcsOutput.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = timeout
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearOrgIds = copy(orgIds = _root_.scala.Seq.empty)
    def addOrgIds(__vs: _root_.scala.Predef.String *): ExportDataRequest = addAllOrgIds(__vs)
    def addAllOrgIds(__vs: Iterable[_root_.scala.Predef.String]): ExportDataRequest = copy(orgIds = orgIds ++ __vs)
    def withOrgIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ExportDataRequest = copy(orgIds = __v)
    def clearExcludedOrgIds = copy(excludedOrgIds = _root_.scala.Seq.empty)
    def addExcludedOrgIds(__vs: _root_.scala.Predef.String *): ExportDataRequest = addAllExcludedOrgIds(__vs)
    def addAllExcludedOrgIds(__vs: Iterable[_root_.scala.Predef.String]): ExportDataRequest = copy(excludedOrgIds = excludedOrgIds ++ __vs)
    def withExcludedOrgIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ExportDataRequest = copy(excludedOrgIds = __v)
    def withWithPasswords(__v: _root_.scala.Boolean): ExportDataRequest = copy(withPasswords = __v)
    def withWithOtp(__v: _root_.scala.Boolean): ExportDataRequest = copy(withOtp = __v)
    def withResponseOutput(__v: _root_.scala.Boolean): ExportDataRequest = copy(responseOutput = __v)
    def getLocalOutput: com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput = localOutput.getOrElse(com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput.defaultInstance)
    def clearLocalOutput: ExportDataRequest = copy(localOutput = _root_.scala.None)
    def withLocalOutput(__v: com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput): ExportDataRequest = copy(localOutput = Option(__v))
    def getS3Output: com.zitadel.admin.v1.admin.ExportDataRequest.S3Output = s3Output.getOrElse(com.zitadel.admin.v1.admin.ExportDataRequest.S3Output.defaultInstance)
    def clearS3Output: ExportDataRequest = copy(s3Output = _root_.scala.None)
    def withS3Output(__v: com.zitadel.admin.v1.admin.ExportDataRequest.S3Output): ExportDataRequest = copy(s3Output = Option(__v))
    def getGcsOutput: com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput = gcsOutput.getOrElse(com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput.defaultInstance)
    def clearGcsOutput: ExportDataRequest = copy(gcsOutput = _root_.scala.None)
    def withGcsOutput(__v: com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput): ExportDataRequest = copy(gcsOutput = Option(__v))
    def withTimeout(__v: _root_.scala.Predef.String): ExportDataRequest = copy(timeout = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => orgIds
        case 2 => excludedOrgIds
        case 3 => {
          val __t = withPasswords
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = withOtp
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = responseOutput
          if (__t != false) __t else null
        }
        case 6 => localOutput.orNull
        case 7 => s3Output.orNull
        case 8 => gcsOutput.orNull
        case 9 => {
          val __t = timeout
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(orgIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(excludedOrgIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PBoolean(withPasswords)
        case 4 => _root_.scalapb.descriptors.PBoolean(withOtp)
        case 5 => _root_.scalapb.descriptors.PBoolean(responseOutput)
        case 6 => localOutput.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => s3Output.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => gcsOutput.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PString(timeout)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.admin.v1.admin.ExportDataRequest.type = com.zitadel.admin.v1.admin.ExportDataRequest
    // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.ExportDataRequest])
}

object ExportDataRequest extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ExportDataRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ExportDataRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.ExportDataRequest = {
    val __orgIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __excludedOrgIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __withPasswords: _root_.scala.Boolean = false
    var __withOtp: _root_.scala.Boolean = false
    var __responseOutput: _root_.scala.Boolean = false
    var __localOutput: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput] = _root_.scala.None
    var __s3Output: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output] = _root_.scala.None
    var __gcsOutput: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput] = _root_.scala.None
    var __timeout: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __orgIds += _input__.readStringRequireUtf8()
        case 18 =>
          __excludedOrgIds += _input__.readStringRequireUtf8()
        case 24 =>
          __withPasswords = _input__.readBool()
        case 32 =>
          __withOtp = _input__.readBool()
        case 40 =>
          __responseOutput = _input__.readBool()
        case 50 =>
          __localOutput = Option(__localOutput.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __s3Output = Option(__s3Output.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __gcsOutput = Option(__gcsOutput.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __timeout = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.admin.v1.admin.ExportDataRequest(
        orgIds = __orgIds.result(),
        excludedOrgIds = __excludedOrgIds.result(),
        withPasswords = __withPasswords,
        withOtp = __withOtp,
        responseOutput = __responseOutput,
        localOutput = __localOutput,
        s3Output = __s3Output,
        gcsOutput = __gcsOutput,
        timeout = __timeout,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.ExportDataRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.admin.v1.admin.ExportDataRequest(
        orgIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        excludedOrgIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        withPasswords = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        withOtp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        responseOutput = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        localOutput = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput]]),
        s3Output = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output]]),
        gcsOutput = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput]]),
        timeout = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(323)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(323)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput
      case 7 => __out = com.zitadel.admin.v1.admin.ExportDataRequest.S3Output
      case 8 => __out = com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput,
      _root_.com.zitadel.admin.v1.admin.ExportDataRequest.S3Output,
      _root_.com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.admin.v1.admin.ExportDataRequest(
    orgIds = _root_.scala.Seq.empty,
    excludedOrgIds = _root_.scala.Seq.empty,
    withPasswords = false,
    withOtp = false,
    responseOutput = false,
    localOutput = _root_.scala.None,
    s3Output = _root_.scala.None,
    gcsOutput = _root_.scala.None,
    timeout = ""
  )
  @SerialVersionUID(0L)
  final case class LocalOutput(
      path: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LocalOutput] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = path
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = path
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withPath(__v: _root_.scala.Predef.String): LocalOutput = copy(path = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = path
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(path)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput.type = com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput
      // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.ExportDataRequest.LocalOutput])
  }
  
  object LocalOutput extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput = {
      var __path: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __path = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput(
          path = __path,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput(
          path = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.zitadel.admin.v1.admin.ExportDataRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.zitadel.admin.v1.admin.ExportDataRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput(
      path = ""
    )
    implicit class LocalOutputLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput](_l) {
      def path: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.path)((c_, f_) => c_.copy(path = f_))
    }
    final val PATH_FIELD_NUMBER = 1
    def of(
      path: _root_.scala.Predef.String
    ): _root_.com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput = _root_.com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput(
      path
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.ExportDataRequest.LocalOutput])
  }
  
  @SerialVersionUID(0L)
  final case class S3Output(
      path: _root_.scala.Predef.String = "",
      endpoint: _root_.scala.Predef.String = "",
      accessKeyId: _root_.scala.Predef.String = "",
      secretAccessKey: _root_.scala.Predef.String = "",
      ssl: _root_.scala.Boolean = false,
      bucket: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[S3Output] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = path
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = endpoint
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        
        {
          val __value = accessKeyId
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        
        {
          val __value = secretAccessKey
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
          }
        };
        
        {
          val __value = ssl
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
          }
        };
        
        {
          val __value = bucket
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = path
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = endpoint
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = accessKeyId
          if (!__v.isEmpty) {
            _output__.writeString(3, __v)
          }
        };
        {
          val __v = secretAccessKey
          if (!__v.isEmpty) {
            _output__.writeString(4, __v)
          }
        };
        {
          val __v = ssl
          if (__v != false) {
            _output__.writeBool(5, __v)
          }
        };
        {
          val __v = bucket
          if (!__v.isEmpty) {
            _output__.writeString(6, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withPath(__v: _root_.scala.Predef.String): S3Output = copy(path = __v)
      def withEndpoint(__v: _root_.scala.Predef.String): S3Output = copy(endpoint = __v)
      def withAccessKeyId(__v: _root_.scala.Predef.String): S3Output = copy(accessKeyId = __v)
      def withSecretAccessKey(__v: _root_.scala.Predef.String): S3Output = copy(secretAccessKey = __v)
      def withSsl(__v: _root_.scala.Boolean): S3Output = copy(ssl = __v)
      def withBucket(__v: _root_.scala.Predef.String): S3Output = copy(bucket = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = path
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = endpoint
            if (__t != "") __t else null
          }
          case 3 => {
            val __t = accessKeyId
            if (__t != "") __t else null
          }
          case 4 => {
            val __t = secretAccessKey
            if (__t != "") __t else null
          }
          case 5 => {
            val __t = ssl
            if (__t != false) __t else null
          }
          case 6 => {
            val __t = bucket
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(path)
          case 2 => _root_.scalapb.descriptors.PString(endpoint)
          case 3 => _root_.scalapb.descriptors.PString(accessKeyId)
          case 4 => _root_.scalapb.descriptors.PString(secretAccessKey)
          case 5 => _root_.scalapb.descriptors.PBoolean(ssl)
          case 6 => _root_.scalapb.descriptors.PString(bucket)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.zitadel.admin.v1.admin.ExportDataRequest.S3Output.type = com.zitadel.admin.v1.admin.ExportDataRequest.S3Output
      // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.ExportDataRequest.S3Output])
  }
  
  object S3Output extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.ExportDataRequest.S3Output = {
      var __path: _root_.scala.Predef.String = ""
      var __endpoint: _root_.scala.Predef.String = ""
      var __accessKeyId: _root_.scala.Predef.String = ""
      var __secretAccessKey: _root_.scala.Predef.String = ""
      var __ssl: _root_.scala.Boolean = false
      var __bucket: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __path = _input__.readStringRequireUtf8()
          case 18 =>
            __endpoint = _input__.readStringRequireUtf8()
          case 26 =>
            __accessKeyId = _input__.readStringRequireUtf8()
          case 34 =>
            __secretAccessKey = _input__.readStringRequireUtf8()
          case 40 =>
            __ssl = _input__.readBool()
          case 50 =>
            __bucket = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.zitadel.admin.v1.admin.ExportDataRequest.S3Output(
          path = __path,
          endpoint = __endpoint,
          accessKeyId = __accessKeyId,
          secretAccessKey = __secretAccessKey,
          ssl = __ssl,
          bucket = __bucket,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.zitadel.admin.v1.admin.ExportDataRequest.S3Output(
          path = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          endpoint = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          accessKeyId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          secretAccessKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          ssl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          bucket = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.zitadel.admin.v1.admin.ExportDataRequest.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.zitadel.admin.v1.admin.ExportDataRequest.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.zitadel.admin.v1.admin.ExportDataRequest.S3Output(
      path = "",
      endpoint = "",
      accessKeyId = "",
      secretAccessKey = "",
      ssl = false,
      bucket = ""
    )
    implicit class S3OutputLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.S3Output]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.S3Output](_l) {
      def path: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.path)((c_, f_) => c_.copy(path = f_))
      def endpoint: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.endpoint)((c_, f_) => c_.copy(endpoint = f_))
      def accessKeyId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accessKeyId)((c_, f_) => c_.copy(accessKeyId = f_))
      def secretAccessKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.secretAccessKey)((c_, f_) => c_.copy(secretAccessKey = f_))
      def ssl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.ssl)((c_, f_) => c_.copy(ssl = f_))
      def bucket: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.bucket)((c_, f_) => c_.copy(bucket = f_))
    }
    final val PATH_FIELD_NUMBER = 1
    final val ENDPOINT_FIELD_NUMBER = 2
    final val ACCESS_KEY_ID_FIELD_NUMBER = 3
    final val SECRET_ACCESS_KEY_FIELD_NUMBER = 4
    final val SSL_FIELD_NUMBER = 5
    final val BUCKET_FIELD_NUMBER = 6
    def of(
      path: _root_.scala.Predef.String,
      endpoint: _root_.scala.Predef.String,
      accessKeyId: _root_.scala.Predef.String,
      secretAccessKey: _root_.scala.Predef.String,
      ssl: _root_.scala.Boolean,
      bucket: _root_.scala.Predef.String
    ): _root_.com.zitadel.admin.v1.admin.ExportDataRequest.S3Output = _root_.com.zitadel.admin.v1.admin.ExportDataRequest.S3Output(
      path,
      endpoint,
      accessKeyId,
      secretAccessKey,
      ssl,
      bucket
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.ExportDataRequest.S3Output])
  }
  
  @SerialVersionUID(0L)
  final case class GCSOutput(
      bucket: _root_.scala.Predef.String = "",
      serviceaccountJson: _root_.scala.Predef.String = "",
      path: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GCSOutput] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = bucket
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = serviceaccountJson
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        
        {
          val __value = path
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = bucket
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = serviceaccountJson
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = path
          if (!__v.isEmpty) {
            _output__.writeString(3, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withBucket(__v: _root_.scala.Predef.String): GCSOutput = copy(bucket = __v)
      def withServiceaccountJson(__v: _root_.scala.Predef.String): GCSOutput = copy(serviceaccountJson = __v)
      def withPath(__v: _root_.scala.Predef.String): GCSOutput = copy(path = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = bucket
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = serviceaccountJson
            if (__t != "") __t else null
          }
          case 3 => {
            val __t = path
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(bucket)
          case 2 => _root_.scalapb.descriptors.PString(serviceaccountJson)
          case 3 => _root_.scalapb.descriptors.PString(path)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput.type = com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput
      // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.ExportDataRequest.GCSOutput])
  }
  
  object GCSOutput extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput = {
      var __bucket: _root_.scala.Predef.String = ""
      var __serviceaccountJson: _root_.scala.Predef.String = ""
      var __path: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __bucket = _input__.readStringRequireUtf8()
          case 18 =>
            __serviceaccountJson = _input__.readStringRequireUtf8()
          case 26 =>
            __path = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput(
          bucket = __bucket,
          serviceaccountJson = __serviceaccountJson,
          path = __path,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput(
          bucket = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          serviceaccountJson = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          path = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.zitadel.admin.v1.admin.ExportDataRequest.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.zitadel.admin.v1.admin.ExportDataRequest.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput(
      bucket = "",
      serviceaccountJson = "",
      path = ""
    )
    implicit class GCSOutputLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput](_l) {
      def bucket: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.bucket)((c_, f_) => c_.copy(bucket = f_))
      def serviceaccountJson: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.serviceaccountJson)((c_, f_) => c_.copy(serviceaccountJson = f_))
      def path: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.path)((c_, f_) => c_.copy(path = f_))
    }
    final val BUCKET_FIELD_NUMBER = 1
    final val SERVICEACCOUNT_JSON_FIELD_NUMBER = 2
    final val PATH_FIELD_NUMBER = 3
    def of(
      bucket: _root_.scala.Predef.String,
      serviceaccountJson: _root_.scala.Predef.String,
      path: _root_.scala.Predef.String
    ): _root_.com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput = _root_.com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput(
      bucket,
      serviceaccountJson,
      path
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.ExportDataRequest.GCSOutput])
  }
  
  implicit class ExportDataRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest](_l) {
    def orgIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.orgIds)((c_, f_) => c_.copy(orgIds = f_))
    def excludedOrgIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.excludedOrgIds)((c_, f_) => c_.copy(excludedOrgIds = f_))
    def withPasswords: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.withPasswords)((c_, f_) => c_.copy(withPasswords = f_))
    def withOtp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.withOtp)((c_, f_) => c_.copy(withOtp = f_))
    def responseOutput: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.responseOutput)((c_, f_) => c_.copy(responseOutput = f_))
    def localOutput: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput] = field(_.getLocalOutput)((c_, f_) => c_.copy(localOutput = Option(f_)))
    def optionalLocalOutput: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput]] = field(_.localOutput)((c_, f_) => c_.copy(localOutput = f_))
    def s3Output: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.S3Output] = field(_.getS3Output)((c_, f_) => c_.copy(s3Output = Option(f_)))
    def optionalS3Output: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output]] = field(_.s3Output)((c_, f_) => c_.copy(s3Output = f_))
    def gcsOutput: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput] = field(_.getGcsOutput)((c_, f_) => c_.copy(gcsOutput = Option(f_)))
    def optionalGcsOutput: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput]] = field(_.gcsOutput)((c_, f_) => c_.copy(gcsOutput = f_))
    def timeout: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.timeout)((c_, f_) => c_.copy(timeout = f_))
  }
  final val ORG_IDS_FIELD_NUMBER = 1
  final val EXCLUDED_ORG_IDS_FIELD_NUMBER = 2
  final val WITH_PASSWORDS_FIELD_NUMBER = 3
  final val WITH_OTP_FIELD_NUMBER = 4
  final val RESPONSE_OUTPUT_FIELD_NUMBER = 5
  final val LOCAL_OUTPUT_FIELD_NUMBER = 6
  final val S3_OUTPUT_FIELD_NUMBER = 7
  final val GCS_OUTPUT_FIELD_NUMBER = 8
  final val TIMEOUT_FIELD_NUMBER = 9
  def of(
    orgIds: _root_.scala.Seq[_root_.scala.Predef.String],
    excludedOrgIds: _root_.scala.Seq[_root_.scala.Predef.String],
    withPasswords: _root_.scala.Boolean,
    withOtp: _root_.scala.Boolean,
    responseOutput: _root_.scala.Boolean,
    localOutput: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.LocalOutput],
    s3Output: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.S3Output],
    gcsOutput: _root_.scala.Option[com.zitadel.admin.v1.admin.ExportDataRequest.GCSOutput],
    timeout: _root_.scala.Predef.String
  ): _root_.com.zitadel.admin.v1.admin.ExportDataRequest = _root_.com.zitadel.admin.v1.admin.ExportDataRequest(
    orgIds,
    excludedOrgIds,
    withPasswords,
    withOtp,
    responseOutput,
    localOutput,
    s3Output,
    gcsOutput,
    timeout
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.ExportDataRequest])
}
