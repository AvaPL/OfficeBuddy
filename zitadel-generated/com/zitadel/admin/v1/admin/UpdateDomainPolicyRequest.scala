// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.admin.v1.admin

@SerialVersionUID(0L)
final case class UpdateDomainPolicyRequest(
    userLoginMustBeDomain: _root_.scala.Boolean = false,
    validateOrgDomains: _root_.scala.Boolean = false,
    smtpSenderAddressMatchesInstanceDomain: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateDomainPolicyRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = userLoginMustBeDomain
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
        }
      };
      
      {
        val __value = validateOrgDomains
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      
      {
        val __value = smtpSenderAddressMatchesInstanceDomain
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = userLoginMustBeDomain
        if (__v != false) {
          _output__.writeBool(1, __v)
        }
      };
      {
        val __v = validateOrgDomains
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      {
        val __v = smtpSenderAddressMatchesInstanceDomain
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withUserLoginMustBeDomain(__v: _root_.scala.Boolean): UpdateDomainPolicyRequest = copy(userLoginMustBeDomain = __v)
    def withValidateOrgDomains(__v: _root_.scala.Boolean): UpdateDomainPolicyRequest = copy(validateOrgDomains = __v)
    def withSmtpSenderAddressMatchesInstanceDomain(__v: _root_.scala.Boolean): UpdateDomainPolicyRequest = copy(smtpSenderAddressMatchesInstanceDomain = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = userLoginMustBeDomain
          if (__t != false) __t else null
        }
        case 2 => {
          val __t = validateOrgDomains
          if (__t != false) __t else null
        }
        case 3 => {
          val __t = smtpSenderAddressMatchesInstanceDomain
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PBoolean(userLoginMustBeDomain)
        case 2 => _root_.scalapb.descriptors.PBoolean(validateOrgDomains)
        case 3 => _root_.scalapb.descriptors.PBoolean(smtpSenderAddressMatchesInstanceDomain)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest.type = com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest
    // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.UpdateDomainPolicyRequest])
}

object UpdateDomainPolicyRequest extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest = {
    var __userLoginMustBeDomain: _root_.scala.Boolean = false
    var __validateOrgDomains: _root_.scala.Boolean = false
    var __smtpSenderAddressMatchesInstanceDomain: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __userLoginMustBeDomain = _input__.readBool()
        case 16 =>
          __validateOrgDomains = _input__.readBool()
        case 24 =>
          __smtpSenderAddressMatchesInstanceDomain = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest(
        userLoginMustBeDomain = __userLoginMustBeDomain,
        validateOrgDomains = __validateOrgDomains,
        smtpSenderAddressMatchesInstanceDomain = __smtpSenderAddressMatchesInstanceDomain,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest(
        userLoginMustBeDomain = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        validateOrgDomains = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        smtpSenderAddressMatchesInstanceDomain = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(156)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(156)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest(
    userLoginMustBeDomain = false,
    validateOrgDomains = false,
    smtpSenderAddressMatchesInstanceDomain = false
  )
  implicit class UpdateDomainPolicyRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest](_l) {
    def userLoginMustBeDomain: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.userLoginMustBeDomain)((c_, f_) => c_.copy(userLoginMustBeDomain = f_))
    def validateOrgDomains: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.validateOrgDomains)((c_, f_) => c_.copy(validateOrgDomains = f_))
    def smtpSenderAddressMatchesInstanceDomain: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.smtpSenderAddressMatchesInstanceDomain)((c_, f_) => c_.copy(smtpSenderAddressMatchesInstanceDomain = f_))
  }
  final val USER_LOGIN_MUST_BE_DOMAIN_FIELD_NUMBER = 1
  final val VALIDATE_ORG_DOMAINS_FIELD_NUMBER = 2
  final val SMTP_SENDER_ADDRESS_MATCHES_INSTANCE_DOMAIN_FIELD_NUMBER = 3
  def of(
    userLoginMustBeDomain: _root_.scala.Boolean,
    validateOrgDomains: _root_.scala.Boolean,
    smtpSenderAddressMatchesInstanceDomain: _root_.scala.Boolean
  ): _root_.com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest = _root_.com.zitadel.admin.v1.admin.UpdateDomainPolicyRequest(
    userLoginMustBeDomain,
    validateOrgDomains,
    smtpSenderAddressMatchesInstanceDomain
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.UpdateDomainPolicyRequest])
}
