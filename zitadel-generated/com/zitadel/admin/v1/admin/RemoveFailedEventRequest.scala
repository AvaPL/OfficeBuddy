// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.admin.v1.admin

@SerialVersionUID(0L)
final case class RemoveFailedEventRequest(
    database: _root_.scala.Predef.String = "",
    viewName: _root_.scala.Predef.String = "",
    failedSequence: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RemoveFailedEventRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = database
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = viewName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = failedSequence
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = database
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = viewName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = failedSequence
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withDatabase(__v: _root_.scala.Predef.String): RemoveFailedEventRequest = copy(database = __v)
    def withViewName(__v: _root_.scala.Predef.String): RemoveFailedEventRequest = copy(viewName = __v)
    def withFailedSequence(__v: _root_.scala.Long): RemoveFailedEventRequest = copy(failedSequence = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = database
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = viewName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = failedSequence
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(database)
        case 2 => _root_.scalapb.descriptors.PString(viewName)
        case 3 => _root_.scalapb.descriptors.PLong(failedSequence)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.admin.v1.admin.RemoveFailedEventRequest.type = com.zitadel.admin.v1.admin.RemoveFailedEventRequest
    // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.RemoveFailedEventRequest])
}

object RemoveFailedEventRequest extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.RemoveFailedEventRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.RemoveFailedEventRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.RemoveFailedEventRequest = {
    var __database: _root_.scala.Predef.String = ""
    var __viewName: _root_.scala.Predef.String = ""
    var __failedSequence: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __database = _input__.readStringRequireUtf8()
        case 18 =>
          __viewName = _input__.readStringRequireUtf8()
        case 24 =>
          __failedSequence = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.admin.v1.admin.RemoveFailedEventRequest(
        database = __database,
        viewName = __viewName,
        failedSequence = __failedSequence,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.RemoveFailedEventRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.admin.v1.admin.RemoveFailedEventRequest(
        database = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        viewName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        failedSequence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(306)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(306)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.admin.v1.admin.RemoveFailedEventRequest(
    database = "",
    viewName = "",
    failedSequence = 0L
  )
  implicit class RemoveFailedEventRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.RemoveFailedEventRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.RemoveFailedEventRequest](_l) {
    def database: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.database)((c_, f_) => c_.copy(database = f_))
    def viewName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.viewName)((c_, f_) => c_.copy(viewName = f_))
    def failedSequence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.failedSequence)((c_, f_) => c_.copy(failedSequence = f_))
  }
  final val DATABASE_FIELD_NUMBER = 1
  final val VIEW_NAME_FIELD_NUMBER = 2
  final val FAILED_SEQUENCE_FIELD_NUMBER = 3
  def of(
    database: _root_.scala.Predef.String,
    viewName: _root_.scala.Predef.String,
    failedSequence: _root_.scala.Long
  ): _root_.com.zitadel.admin.v1.admin.RemoveFailedEventRequest = _root_.com.zitadel.admin.v1.admin.RemoveFailedEventRequest(
    database,
    viewName,
    failedSequence
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.RemoveFailedEventRequest])
}
