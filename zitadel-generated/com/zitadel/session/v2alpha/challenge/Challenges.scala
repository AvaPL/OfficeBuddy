// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.session.v2alpha.challenge

@SerialVersionUID(0L)
final case class Challenges(
    passkey: _root_.scala.Option[com.zitadel.session.v2alpha.challenge.Challenges.Passkey] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Challenges] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (passkey.isDefined) {
        val __value = passkey.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      passkey.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getPasskey: com.zitadel.session.v2alpha.challenge.Challenges.Passkey = passkey.getOrElse(com.zitadel.session.v2alpha.challenge.Challenges.Passkey.defaultInstance)
    def clearPasskey: Challenges = copy(passkey = _root_.scala.None)
    def withPasskey(__v: com.zitadel.session.v2alpha.challenge.Challenges.Passkey): Challenges = copy(passkey = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => passkey.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => passkey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.session.v2alpha.challenge.Challenges.type = com.zitadel.session.v2alpha.challenge.Challenges
    // @@protoc_insertion_point(GeneratedMessage[zitadel.session.v2alpha.Challenges])
}

object Challenges extends scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.challenge.Challenges] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.challenge.Challenges] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.session.v2alpha.challenge.Challenges = {
    var __passkey: _root_.scala.Option[com.zitadel.session.v2alpha.challenge.Challenges.Passkey] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __passkey = Option(__passkey.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.challenge.Challenges.Passkey](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.session.v2alpha.challenge.Challenges(
        passkey = __passkey,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.session.v2alpha.challenge.Challenges] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.session.v2alpha.challenge.Challenges(
        passkey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.session.v2alpha.challenge.Challenges.Passkey]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ChallengeProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ChallengeProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.session.v2alpha.challenge.Challenges.Passkey
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.zitadel.session.v2alpha.challenge.Challenges.Passkey
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.session.v2alpha.challenge.Challenges(
    passkey = _root_.scala.None
  )
  @SerialVersionUID(0L)
  final case class Passkey(
      publicKeyCredentialRequestOptions: _root_.scala.Option[com.google.protobuf.struct.Struct] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Passkey] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (publicKeyCredentialRequestOptions.isDefined) {
          val __value = publicKeyCredentialRequestOptions.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        publicKeyCredentialRequestOptions.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getPublicKeyCredentialRequestOptions: com.google.protobuf.struct.Struct = publicKeyCredentialRequestOptions.getOrElse(com.google.protobuf.struct.Struct.defaultInstance)
      def clearPublicKeyCredentialRequestOptions: Passkey = copy(publicKeyCredentialRequestOptions = _root_.scala.None)
      def withPublicKeyCredentialRequestOptions(__v: com.google.protobuf.struct.Struct): Passkey = copy(publicKeyCredentialRequestOptions = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => publicKeyCredentialRequestOptions.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => publicKeyCredentialRequestOptions.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.zitadel.session.v2alpha.challenge.Challenges.Passkey.type = com.zitadel.session.v2alpha.challenge.Challenges.Passkey
      // @@protoc_insertion_point(GeneratedMessage[zitadel.session.v2alpha.Challenges.Passkey])
  }
  
  object Passkey extends scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.challenge.Challenges.Passkey] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.challenge.Challenges.Passkey] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.session.v2alpha.challenge.Challenges.Passkey = {
      var __publicKeyCredentialRequestOptions: _root_.scala.Option[com.google.protobuf.struct.Struct] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __publicKeyCredentialRequestOptions = Option(__publicKeyCredentialRequestOptions.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.struct.Struct](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.zitadel.session.v2alpha.challenge.Challenges.Passkey(
          publicKeyCredentialRequestOptions = __publicKeyCredentialRequestOptions,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.session.v2alpha.challenge.Challenges.Passkey] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.zitadel.session.v2alpha.challenge.Challenges.Passkey(
          publicKeyCredentialRequestOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.struct.Struct]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.zitadel.session.v2alpha.challenge.Challenges.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.zitadel.session.v2alpha.challenge.Challenges.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = com.google.protobuf.struct.Struct
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.zitadel.session.v2alpha.challenge.Challenges.Passkey(
      publicKeyCredentialRequestOptions = _root_.scala.None
    )
    implicit class PasskeyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.challenge.Challenges.Passkey]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.session.v2alpha.challenge.Challenges.Passkey](_l) {
      def publicKeyCredentialRequestOptions: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.struct.Struct] = field(_.getPublicKeyCredentialRequestOptions)((c_, f_) => c_.copy(publicKeyCredentialRequestOptions = Option(f_)))
      def optionalPublicKeyCredentialRequestOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.struct.Struct]] = field(_.publicKeyCredentialRequestOptions)((c_, f_) => c_.copy(publicKeyCredentialRequestOptions = f_))
    }
    final val PUBLIC_KEY_CREDENTIAL_REQUEST_OPTIONS_FIELD_NUMBER = 1
    def of(
      publicKeyCredentialRequestOptions: _root_.scala.Option[com.google.protobuf.struct.Struct]
    ): _root_.com.zitadel.session.v2alpha.challenge.Challenges.Passkey = _root_.com.zitadel.session.v2alpha.challenge.Challenges.Passkey(
      publicKeyCredentialRequestOptions
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.session.v2alpha.Challenges.Passkey])
  }
  
  implicit class ChallengesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.challenge.Challenges]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.session.v2alpha.challenge.Challenges](_l) {
    def passkey: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.challenge.Challenges.Passkey] = field(_.getPasskey)((c_, f_) => c_.copy(passkey = Option(f_)))
    def optionalPasskey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.session.v2alpha.challenge.Challenges.Passkey]] = field(_.passkey)((c_, f_) => c_.copy(passkey = f_))
  }
  final val PASSKEY_FIELD_NUMBER = 1
  def of(
    passkey: _root_.scala.Option[com.zitadel.session.v2alpha.challenge.Challenges.Passkey]
  ): _root_.com.zitadel.session.v2alpha.challenge.Challenges = _root_.com.zitadel.session.v2alpha.challenge.Challenges(
    passkey
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.session.v2alpha.Challenges])
}
