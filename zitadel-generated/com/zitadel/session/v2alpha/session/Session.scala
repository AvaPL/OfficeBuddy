// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.session.v2alpha.session

@SerialVersionUID(0L)
final case class Session(
    id: _root_.scala.Predef.String = "",
    creationDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    changeDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    sequence: _root_.scala.Long = 0L,
    factors: _root_.scala.Option[com.zitadel.session.v2alpha.session.Factors] = _root_.scala.None,
    metadata: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString] = _root_.scala.collection.immutable.Map.empty,
    domain: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Session] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (creationDate.isDefined) {
        val __value = creationDate.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (changeDate.isDefined) {
        val __value = changeDate.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = sequence
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      if (factors.isDefined) {
        val __value = factors.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      metadata.foreach { __item =>
        val __value = com.zitadel.session.v2alpha.session.Session._typemapper_metadata.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = domain
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      creationDate.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      changeDate.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = sequence
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      factors.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      metadata.foreach { __v =>
        val __m = com.zitadel.session.v2alpha.session.Session._typemapper_metadata.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = domain
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Predef.String): Session = copy(id = __v)
    def getCreationDate: com.google.protobuf.timestamp.Timestamp = creationDate.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearCreationDate: Session = copy(creationDate = _root_.scala.None)
    def withCreationDate(__v: com.google.protobuf.timestamp.Timestamp): Session = copy(creationDate = Option(__v))
    def getChangeDate: com.google.protobuf.timestamp.Timestamp = changeDate.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearChangeDate: Session = copy(changeDate = _root_.scala.None)
    def withChangeDate(__v: com.google.protobuf.timestamp.Timestamp): Session = copy(changeDate = Option(__v))
    def withSequence(__v: _root_.scala.Long): Session = copy(sequence = __v)
    def getFactors: com.zitadel.session.v2alpha.session.Factors = factors.getOrElse(com.zitadel.session.v2alpha.session.Factors.defaultInstance)
    def clearFactors: Session = copy(factors = _root_.scala.None)
    def withFactors(__v: com.zitadel.session.v2alpha.session.Factors): Session = copy(factors = Option(__v))
    def clearMetadata = copy(metadata = _root_.scala.collection.immutable.Map.empty)
    def addMetadata(__vs: (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString) *): Session = addAllMetadata(__vs)
    def addAllMetadata(__vs: Iterable[(_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)]): Session = copy(metadata = metadata ++ __vs)
    def withMetadata(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString]): Session = copy(metadata = __v)
    def withDomain(__v: _root_.scala.Predef.String): Session = copy(domain = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => creationDate.orNull
        case 3 => changeDate.orNull
        case 4 => {
          val __t = sequence
          if (__t != 0L) __t else null
        }
        case 5 => factors.orNull
        case 6 => metadata.iterator.map(com.zitadel.session.v2alpha.session.Session._typemapper_metadata.toBase(_)).toSeq
        case 7 => {
          val __t = domain
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => creationDate.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => changeDate.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PLong(sequence)
        case 5 => factors.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(metadata.iterator.map(com.zitadel.session.v2alpha.session.Session._typemapper_metadata.toBase(_).toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PString(domain)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.session.v2alpha.session.Session.type = com.zitadel.session.v2alpha.session.Session
    // @@protoc_insertion_point(GeneratedMessage[zitadel.session.v2alpha.Session])
}

object Session extends scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session.Session] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session.Session] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.session.v2alpha.session.Session = {
    var __id: _root_.scala.Predef.String = ""
    var __creationDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var __changeDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var __sequence: _root_.scala.Long = 0L
    var __factors: _root_.scala.Option[com.zitadel.session.v2alpha.session.Factors] = _root_.scala.None
    val __metadata: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString]
    var __domain: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __id = _input__.readStringRequireUtf8()
        case 18 =>
          __creationDate = Option(__creationDate.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __changeDate = Option(__changeDate.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __sequence = _input__.readUInt64()
        case 42 =>
          __factors = Option(__factors.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.session.Factors](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __metadata += com.zitadel.session.v2alpha.session.Session._typemapper_metadata.toCustom(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.session.Session.MetadataEntry](_input__))
        case 58 =>
          __domain = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.session.v2alpha.session.Session(
        id = __id,
        creationDate = __creationDate,
        changeDate = __changeDate,
        sequence = __sequence,
        factors = __factors,
        metadata = __metadata.result(),
        domain = __domain,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.session.v2alpha.session.Session] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.session.v2alpha.session.Session(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        creationDate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        changeDate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        sequence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        factors = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.zitadel.session.v2alpha.session.Factors]]),
        metadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[com.zitadel.session.v2alpha.session.Session.MetadataEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(com.zitadel.session.v2alpha.session.Session._typemapper_metadata.toCustom(_)).toMap,
        domain = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SessionProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SessionProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.protobuf.timestamp.Timestamp
      case 3 => __out = com.google.protobuf.timestamp.Timestamp
      case 5 => __out = com.zitadel.session.v2alpha.session.Factors
      case 6 => __out = com.zitadel.session.v2alpha.session.Session.MetadataEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.zitadel.session.v2alpha.session.Session.MetadataEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.session.v2alpha.session.Session(
    id = "",
    creationDate = _root_.scala.None,
    changeDate = _root_.scala.None,
    sequence = 0L,
    factors = _root_.scala.None,
    metadata = _root_.scala.collection.immutable.Map.empty,
    domain = ""
  )
  @SerialVersionUID(0L)
  final case class MetadataEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MetadataEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeBytes(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): MetadataEntry = copy(key = __v)
      def withValue(__v: _root_.com.google.protobuf.ByteString): MetadataEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PByteString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.zitadel.session.v2alpha.session.Session.MetadataEntry.type = com.zitadel.session.v2alpha.session.Session.MetadataEntry
      // @@protoc_insertion_point(GeneratedMessage[zitadel.session.v2alpha.Session.MetadataEntry])
  }
  
  object MetadataEntry extends scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session.Session.MetadataEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session.Session.MetadataEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.session.v2alpha.session.Session.MetadataEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readBytes()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.zitadel.session.v2alpha.session.Session.MetadataEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.session.v2alpha.session.Session.MetadataEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.zitadel.session.v2alpha.session.Session.MetadataEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.zitadel.session.v2alpha.session.Session.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.zitadel.session.v2alpha.session.Session.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.zitadel.session.v2alpha.session.Session.MetadataEntry(
      key = "",
      value = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class MetadataEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session.Session.MetadataEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.session.v2alpha.session.Session.MetadataEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[com.zitadel.session.v2alpha.session.Session.MetadataEntry, (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)] =
      _root_.scalapb.TypeMapper[com.zitadel.session.v2alpha.session.Session.MetadataEntry, (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)](__m => (__m.key, __m.value))(__p => com.zitadel.session.v2alpha.session.Session.MetadataEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.com.google.protobuf.ByteString
    ): _root_.com.zitadel.session.v2alpha.session.Session.MetadataEntry = _root_.com.zitadel.session.v2alpha.session.Session.MetadataEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.session.v2alpha.Session.MetadataEntry])
  }
  
  implicit class SessionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session.Session]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.session.v2alpha.session.Session](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def creationDate: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getCreationDate)((c_, f_) => c_.copy(creationDate = Option(f_)))
    def optionalCreationDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.creationDate)((c_, f_) => c_.copy(creationDate = f_))
    def changeDate: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getChangeDate)((c_, f_) => c_.copy(changeDate = Option(f_)))
    def optionalChangeDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.changeDate)((c_, f_) => c_.copy(changeDate = f_))
    def sequence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sequence)((c_, f_) => c_.copy(sequence = f_))
    def factors: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session.Factors] = field(_.getFactors)((c_, f_) => c_.copy(factors = Option(f_)))
    def optionalFactors: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.session.v2alpha.session.Factors]] = field(_.factors)((c_, f_) => c_.copy(factors = f_))
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString]] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
    def domain: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.domain)((c_, f_) => c_.copy(domain = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val CREATION_DATE_FIELD_NUMBER = 2
  final val CHANGE_DATE_FIELD_NUMBER = 3
  final val SEQUENCE_FIELD_NUMBER = 4
  final val FACTORS_FIELD_NUMBER = 5
  final val METADATA_FIELD_NUMBER = 6
  final val DOMAIN_FIELD_NUMBER = 7
  @transient
  private[session] val _typemapper_metadata: _root_.scalapb.TypeMapper[com.zitadel.session.v2alpha.session.Session.MetadataEntry, (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)] = implicitly[_root_.scalapb.TypeMapper[com.zitadel.session.v2alpha.session.Session.MetadataEntry, (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)]]
  def of(
    id: _root_.scala.Predef.String,
    creationDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
    changeDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
    sequence: _root_.scala.Long,
    factors: _root_.scala.Option[com.zitadel.session.v2alpha.session.Factors],
    metadata: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString],
    domain: _root_.scala.Predef.String
  ): _root_.com.zitadel.session.v2alpha.session.Session = _root_.com.zitadel.session.v2alpha.session.Session(
    id,
    creationDate,
    changeDate,
    sequence,
    factors,
    metadata,
    domain
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.session.v2alpha.Session])
}
