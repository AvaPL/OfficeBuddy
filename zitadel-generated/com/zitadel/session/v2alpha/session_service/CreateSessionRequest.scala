// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.session.v2alpha.session_service

@SerialVersionUID(0L)
final case class CreateSessionRequest(
    checks: _root_.scala.Option[com.zitadel.session.v2alpha.session_service.Checks] = _root_.scala.None,
    metadata: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString] = _root_.scala.collection.immutable.Map.empty,
    challenges: _root_.scala.Seq[com.zitadel.session.v2alpha.challenge.ChallengeKind] = _root_.scala.Seq.empty,
    domain: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CreateSessionRequest] {
    private[this] def challengesSerializedSize = {
      if (__challengesSerializedSizeField == 0) __challengesSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        challenges.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(__i.value))
        __s
      }
      __challengesSerializedSizeField
    }
    @transient private[this] var __challengesSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (checks.isDefined) {
        val __value = checks.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      metadata.foreach { __item =>
        val __value = com.zitadel.session.v2alpha.session_service.CreateSessionRequest._typemapper_metadata.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (challenges.nonEmpty) {
        val __localsize = challengesSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = domain
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      checks.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      metadata.foreach { __v =>
        val __m = com.zitadel.session.v2alpha.session_service.CreateSessionRequest._typemapper_metadata.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (challenges.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(challengesSerializedSize)
        challenges.foreach((_output__.writeEnumNoTag _).compose((_: com.zitadel.session.v2alpha.challenge.ChallengeKind).value))
      };
      {
        val __v = domain
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getChecks: com.zitadel.session.v2alpha.session_service.Checks = checks.getOrElse(com.zitadel.session.v2alpha.session_service.Checks.defaultInstance)
    def clearChecks: CreateSessionRequest = copy(checks = _root_.scala.None)
    def withChecks(__v: com.zitadel.session.v2alpha.session_service.Checks): CreateSessionRequest = copy(checks = Option(__v))
    def clearMetadata = copy(metadata = _root_.scala.collection.immutable.Map.empty)
    def addMetadata(__vs: (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString) *): CreateSessionRequest = addAllMetadata(__vs)
    def addAllMetadata(__vs: Iterable[(_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)]): CreateSessionRequest = copy(metadata = metadata ++ __vs)
    def withMetadata(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString]): CreateSessionRequest = copy(metadata = __v)
    def clearChallenges = copy(challenges = _root_.scala.Seq.empty)
    def addChallenges(__vs: com.zitadel.session.v2alpha.challenge.ChallengeKind *): CreateSessionRequest = addAllChallenges(__vs)
    def addAllChallenges(__vs: Iterable[com.zitadel.session.v2alpha.challenge.ChallengeKind]): CreateSessionRequest = copy(challenges = challenges ++ __vs)
    def withChallenges(__v: _root_.scala.Seq[com.zitadel.session.v2alpha.challenge.ChallengeKind]): CreateSessionRequest = copy(challenges = __v)
    def withDomain(__v: _root_.scala.Predef.String): CreateSessionRequest = copy(domain = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => checks.orNull
        case 2 => metadata.iterator.map(com.zitadel.session.v2alpha.session_service.CreateSessionRequest._typemapper_metadata.toBase(_)).toSeq
        case 3 => challenges.iterator.map(_.javaValueDescriptor).toSeq
        case 4 => {
          val __t = domain
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => checks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(metadata.iterator.map(com.zitadel.session.v2alpha.session_service.CreateSessionRequest._typemapper_metadata.toBase(_).toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(challenges.iterator.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).toVector)
        case 4 => _root_.scalapb.descriptors.PString(domain)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.session.v2alpha.session_service.CreateSessionRequest.type = com.zitadel.session.v2alpha.session_service.CreateSessionRequest
    // @@protoc_insertion_point(GeneratedMessage[zitadel.session.v2alpha.CreateSessionRequest])
}

object CreateSessionRequest extends scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session_service.CreateSessionRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session_service.CreateSessionRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.session.v2alpha.session_service.CreateSessionRequest = {
    var __checks: _root_.scala.Option[com.zitadel.session.v2alpha.session_service.Checks] = _root_.scala.None
    val __metadata: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString]
    val __challenges: _root_.scala.collection.immutable.VectorBuilder[com.zitadel.session.v2alpha.challenge.ChallengeKind] = new _root_.scala.collection.immutable.VectorBuilder[com.zitadel.session.v2alpha.challenge.ChallengeKind]
    var __domain: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __checks = Option(__checks.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.session_service.Checks](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __metadata += com.zitadel.session.v2alpha.session_service.CreateSessionRequest._typemapper_metadata.toCustom(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry](_input__))
        case 24 =>
          __challenges += com.zitadel.session.v2alpha.challenge.ChallengeKind.fromValue(_input__.readEnum())
        case 26 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __challenges += com.zitadel.session.v2alpha.challenge.ChallengeKind.fromValue(_input__.readEnum())
          }
          _input__.popLimit(oldLimit)
        }
        case 34 =>
          __domain = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.session.v2alpha.session_service.CreateSessionRequest(
        checks = __checks,
        metadata = __metadata.result(),
        challenges = __challenges.result(),
        domain = __domain,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.session.v2alpha.session_service.CreateSessionRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.session.v2alpha.session_service.CreateSessionRequest(
        checks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.session.v2alpha.session_service.Checks]]),
        metadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(com.zitadel.session.v2alpha.session_service.CreateSessionRequest._typemapper_metadata.toCustom(_)).toMap,
        challenges = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.Seq.empty).iterator.map(__e => com.zitadel.session.v2alpha.challenge.ChallengeKind.fromValue(__e.number)).toSeq,
        domain = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SessionServiceProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SessionServiceProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.session.v2alpha.session_service.Checks
      case 2 => __out = com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => com.zitadel.session.v2alpha.challenge.ChallengeKind
    }
  }
  lazy val defaultInstance = com.zitadel.session.v2alpha.session_service.CreateSessionRequest(
    checks = _root_.scala.None,
    metadata = _root_.scala.collection.immutable.Map.empty,
    challenges = _root_.scala.Seq.empty,
    domain = ""
  )
  @SerialVersionUID(0L)
  final case class MetadataEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MetadataEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeBytes(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): MetadataEntry = copy(key = __v)
      def withValue(__v: _root_.com.google.protobuf.ByteString): MetadataEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PByteString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry.type = com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry
      // @@protoc_insertion_point(GeneratedMessage[zitadel.session.v2alpha.CreateSessionRequest.MetadataEntry])
  }
  
  object MetadataEntry extends scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readBytes()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.zitadel.session.v2alpha.session_service.CreateSessionRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.zitadel.session.v2alpha.session_service.CreateSessionRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry(
      key = "",
      value = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class MetadataEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry, (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)] =
      _root_.scalapb.TypeMapper[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry, (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)](__m => (__m.key, __m.value))(__p => com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.com.google.protobuf.ByteString
    ): _root_.com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry = _root_.com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.session.v2alpha.CreateSessionRequest.MetadataEntry])
  }
  
  implicit class CreateSessionRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session_service.CreateSessionRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.session.v2alpha.session_service.CreateSessionRequest](_l) {
    def checks: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session_service.Checks] = field(_.getChecks)((c_, f_) => c_.copy(checks = Option(f_)))
    def optionalChecks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.session.v2alpha.session_service.Checks]] = field(_.checks)((c_, f_) => c_.copy(checks = f_))
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString]] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
    def challenges: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.zitadel.session.v2alpha.challenge.ChallengeKind]] = field(_.challenges)((c_, f_) => c_.copy(challenges = f_))
    def domain: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.domain)((c_, f_) => c_.copy(domain = f_))
  }
  final val CHECKS_FIELD_NUMBER = 1
  final val METADATA_FIELD_NUMBER = 2
  final val CHALLENGES_FIELD_NUMBER = 3
  final val DOMAIN_FIELD_NUMBER = 4
  @transient
  private[session_service] val _typemapper_metadata: _root_.scalapb.TypeMapper[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry, (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)] = implicitly[_root_.scalapb.TypeMapper[com.zitadel.session.v2alpha.session_service.CreateSessionRequest.MetadataEntry, (_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString)]]
  def of(
    checks: _root_.scala.Option[com.zitadel.session.v2alpha.session_service.Checks],
    metadata: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.com.google.protobuf.ByteString],
    challenges: _root_.scala.Seq[com.zitadel.session.v2alpha.challenge.ChallengeKind],
    domain: _root_.scala.Predef.String
  ): _root_.com.zitadel.session.v2alpha.session_service.CreateSessionRequest = _root_.com.zitadel.session.v2alpha.session_service.CreateSessionRequest(
    checks,
    metadata,
    challenges,
    domain
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.session.v2alpha.CreateSessionRequest])
}
