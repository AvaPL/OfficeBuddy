// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.v1.`object`

sealed abstract class TextQueryMethod(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = TextQueryMethod
  def isTextQueryMethodEquals: _root_.scala.Boolean = false
  def isTextQueryMethodEqualsIgnoreCase: _root_.scala.Boolean = false
  def isTextQueryMethodStartsWith: _root_.scala.Boolean = false
  def isTextQueryMethodStartsWithIgnoreCase: _root_.scala.Boolean = false
  def isTextQueryMethodContains: _root_.scala.Boolean = false
  def isTextQueryMethodContainsIgnoreCase: _root_.scala.Boolean = false
  def isTextQueryMethodEndsWith: _root_.scala.Boolean = false
  def isTextQueryMethodEndsWithIgnoreCase: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[TextQueryMethod] = com.zitadel.v1.`object`.TextQueryMethod
  final def asRecognized: _root_.scala.Option[com.zitadel.v1.`object`.TextQueryMethod.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[com.zitadel.v1.`object`.TextQueryMethod.Recognized])
}

object TextQueryMethod extends _root_.scalapb.GeneratedEnumCompanion[TextQueryMethod] {
  sealed trait Recognized extends TextQueryMethod
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[TextQueryMethod] = this
  
  @SerialVersionUID(0L)
  case object TEXT_QUERY_METHOD_EQUALS extends TextQueryMethod(0) with TextQueryMethod.Recognized {
    val index = 0
    val name = "TEXT_QUERY_METHOD_EQUALS"
    override def isTextQueryMethodEquals: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE extends TextQueryMethod(1) with TextQueryMethod.Recognized {
    val index = 1
    val name = "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE"
    override def isTextQueryMethodEqualsIgnoreCase: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TEXT_QUERY_METHOD_STARTS_WITH extends TextQueryMethod(2) with TextQueryMethod.Recognized {
    val index = 2
    val name = "TEXT_QUERY_METHOD_STARTS_WITH"
    override def isTextQueryMethodStartsWith: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE extends TextQueryMethod(3) with TextQueryMethod.Recognized {
    val index = 3
    val name = "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE"
    override def isTextQueryMethodStartsWithIgnoreCase: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TEXT_QUERY_METHOD_CONTAINS extends TextQueryMethod(4) with TextQueryMethod.Recognized {
    val index = 4
    val name = "TEXT_QUERY_METHOD_CONTAINS"
    override def isTextQueryMethodContains: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE extends TextQueryMethod(5) with TextQueryMethod.Recognized {
    val index = 5
    val name = "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE"
    override def isTextQueryMethodContainsIgnoreCase: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TEXT_QUERY_METHOD_ENDS_WITH extends TextQueryMethod(6) with TextQueryMethod.Recognized {
    val index = 6
    val name = "TEXT_QUERY_METHOD_ENDS_WITH"
    override def isTextQueryMethodEndsWith: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE extends TextQueryMethod(7) with TextQueryMethod.Recognized {
    val index = 7
    val name = "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE"
    override def isTextQueryMethodEndsWithIgnoreCase: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends TextQueryMethod(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values = scala.collection.immutable.Seq(TEXT_QUERY_METHOD_EQUALS, TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE, TEXT_QUERY_METHOD_STARTS_WITH, TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE, TEXT_QUERY_METHOD_CONTAINS, TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE, TEXT_QUERY_METHOD_ENDS_WITH, TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE)
  def fromValue(__value: _root_.scala.Int): TextQueryMethod = __value match {
    case 0 => TEXT_QUERY_METHOD_EQUALS
    case 1 => TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE
    case 2 => TEXT_QUERY_METHOD_STARTS_WITH
    case 3 => TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE
    case 4 => TEXT_QUERY_METHOD_CONTAINS
    case 5 => TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE
    case 6 => TEXT_QUERY_METHOD_ENDS_WITH
    case 7 => TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = ObjectProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = ObjectProto.scalaDescriptor.enums(0)
}