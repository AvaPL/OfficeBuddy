// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.v1.v1.v1

@SerialVersionUID(0L)
final case class SetTriggerActionsRequest(
    flowType: com.zitadel.v1.v1.v1.FlowType = com.zitadel.v1.v1.v1.FlowType.FLOW_TYPE_UNSPECIFIED,
    triggerType: com.zitadel.v1.v1.v1.TriggerType = com.zitadel.v1.v1.v1.TriggerType.TRIGGER_TYPE_UNSPECIFIED,
    actionIds: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SetTriggerActionsRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = flowType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = triggerType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      actionIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = flowType.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = triggerType.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      actionIds.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withFlowType(__v: com.zitadel.v1.v1.v1.FlowType): SetTriggerActionsRequest = copy(flowType = __v)
    def withTriggerType(__v: com.zitadel.v1.v1.v1.TriggerType): SetTriggerActionsRequest = copy(triggerType = __v)
    def clearActionIds = copy(actionIds = _root_.scala.Seq.empty)
    def addActionIds(__vs: _root_.scala.Predef.String *): SetTriggerActionsRequest = addAllActionIds(__vs)
    def addAllActionIds(__vs: Iterable[_root_.scala.Predef.String]): SetTriggerActionsRequest = copy(actionIds = actionIds ++ __vs)
    def withActionIds(__v: _root_.scala.Seq[_root_.scala.Predef.String]): SetTriggerActionsRequest = copy(actionIds = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = flowType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = triggerType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => actionIds
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(flowType.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PEnum(triggerType.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PRepeated(actionIds.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.v1.v1.v1.SetTriggerActionsRequest.type = com.zitadel.v1.v1.v1.SetTriggerActionsRequest
    // @@protoc_insertion_point(GeneratedMessage[zitadel.v1.v1.SetTriggerActionsRequest])
}

object SetTriggerActionsRequest extends scalapb.GeneratedMessageCompanion[com.zitadel.v1.v1.v1.SetTriggerActionsRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.v1.v1.v1.SetTriggerActionsRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.v1.v1.v1.SetTriggerActionsRequest = {
    var __flowType: com.zitadel.v1.v1.v1.FlowType = com.zitadel.v1.v1.v1.FlowType.FLOW_TYPE_UNSPECIFIED
    var __triggerType: com.zitadel.v1.v1.v1.TriggerType = com.zitadel.v1.v1.v1.TriggerType.TRIGGER_TYPE_UNSPECIFIED
    val __actionIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __flowType = com.zitadel.v1.v1.v1.FlowType.fromValue(_input__.readEnum())
        case 16 =>
          __triggerType = com.zitadel.v1.v1.v1.TriggerType.fromValue(_input__.readEnum())
        case 26 =>
          __actionIds += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.v1.v1.v1.SetTriggerActionsRequest(
        flowType = __flowType,
        triggerType = __triggerType,
        actionIds = __actionIds.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.v1.v1.v1.SetTriggerActionsRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.v1.v1.v1.SetTriggerActionsRequest(
        flowType = com.zitadel.v1.v1.v1.FlowType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.zitadel.v1.v1.v1.FlowType.FLOW_TYPE_UNSPECIFIED.scalaValueDescriptor).number),
        triggerType = com.zitadel.v1.v1.v1.TriggerType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.zitadel.v1.v1.v1.TriggerType.TRIGGER_TYPE_UNSPECIFIED.scalaValueDescriptor).number),
        actionIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = V1Proto.javaDescriptor.getMessageTypes().get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = V1Proto.scalaDescriptor.messages(15)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.zitadel.v1.v1.v1.FlowType
      case 2 => com.zitadel.v1.v1.v1.TriggerType
    }
  }
  lazy val defaultInstance = com.zitadel.v1.v1.v1.SetTriggerActionsRequest(
    flowType = com.zitadel.v1.v1.v1.FlowType.FLOW_TYPE_UNSPECIFIED,
    triggerType = com.zitadel.v1.v1.v1.TriggerType.TRIGGER_TYPE_UNSPECIFIED,
    actionIds = _root_.scala.Seq.empty
  )
  implicit class SetTriggerActionsRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.v1.v1.v1.SetTriggerActionsRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.v1.v1.v1.SetTriggerActionsRequest](_l) {
    def flowType: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.v1.v1.v1.FlowType] = field(_.flowType)((c_, f_) => c_.copy(flowType = f_))
    def triggerType: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.v1.v1.v1.TriggerType] = field(_.triggerType)((c_, f_) => c_.copy(triggerType = f_))
    def actionIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.actionIds)((c_, f_) => c_.copy(actionIds = f_))
  }
  final val FLOW_TYPE_FIELD_NUMBER = 1
  final val TRIGGER_TYPE_FIELD_NUMBER = 2
  final val ACTION_IDS_FIELD_NUMBER = 3
  def of(
    flowType: com.zitadel.v1.v1.v1.FlowType,
    triggerType: com.zitadel.v1.v1.v1.TriggerType,
    actionIds: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.com.zitadel.v1.v1.v1.SetTriggerActionsRequest = _root_.com.zitadel.v1.v1.v1.SetTriggerActionsRequest(
    flowType,
    triggerType,
    actionIds
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.v1.v1.SetTriggerActionsRequest])
}
