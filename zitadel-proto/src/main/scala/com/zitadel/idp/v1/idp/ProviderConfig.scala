// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.idp.v1.idp

@SerialVersionUID(0L)
final case class ProviderConfig(
    options: _root_.scala.Option[com.zitadel.idp.v1.idp.Options] = _root_.scala.None,
    config: com.zitadel.idp.v1.idp.ProviderConfig.Config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ProviderConfig] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (options.isDefined) {
        val __value = options.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.ldap.isDefined) {
        val __value = config.ldap.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.google.isDefined) {
        val __value = config.google.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.oauth.isDefined) {
        val __value = config.oauth.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.oidc.isDefined) {
        val __value = config.oidc.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.jwt.isDefined) {
        val __value = config.jwt.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.github.isDefined) {
        val __value = config.github.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.githubEs.isDefined) {
        val __value = config.githubEs.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.gitlab.isDefined) {
        val __value = config.gitlab.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.gitlabSelfHosted.isDefined) {
        val __value = config.gitlabSelfHosted.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.azureAd.isDefined) {
        val __value = config.azureAd.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      options.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.ldap.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.google.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.oauth.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.oidc.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.jwt.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.github.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.githubEs.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.gitlab.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.gitlabSelfHosted.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.azureAd.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getOptions: com.zitadel.idp.v1.idp.Options = options.getOrElse(com.zitadel.idp.v1.idp.Options.defaultInstance)
    def clearOptions: ProviderConfig = copy(options = _root_.scala.None)
    def withOptions(__v: com.zitadel.idp.v1.idp.Options): ProviderConfig = copy(options = Option(__v))
    def getLdap: com.zitadel.idp.v1.idp.LDAPConfig = config.ldap.getOrElse(com.zitadel.idp.v1.idp.LDAPConfig.defaultInstance)
    def withLdap(__v: com.zitadel.idp.v1.idp.LDAPConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Ldap(__v))
    def getGoogle: com.zitadel.idp.v1.idp.GoogleConfig = config.google.getOrElse(com.zitadel.idp.v1.idp.GoogleConfig.defaultInstance)
    def withGoogle(__v: com.zitadel.idp.v1.idp.GoogleConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Google(__v))
    def getOauth: com.zitadel.idp.v1.idp.OAuthConfig = config.oauth.getOrElse(com.zitadel.idp.v1.idp.OAuthConfig.defaultInstance)
    def withOauth(__v: com.zitadel.idp.v1.idp.OAuthConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Oauth(__v))
    def getOidc: com.zitadel.idp.v1.idp.GenericOIDCConfig = config.oidc.getOrElse(com.zitadel.idp.v1.idp.GenericOIDCConfig.defaultInstance)
    def withOidc(__v: com.zitadel.idp.v1.idp.GenericOIDCConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Oidc(__v))
    def getJwt: com.zitadel.idp.v1.idp.JWTConfig = config.jwt.getOrElse(com.zitadel.idp.v1.idp.JWTConfig.defaultInstance)
    def withJwt(__v: com.zitadel.idp.v1.idp.JWTConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Jwt(__v))
    def getGithub: com.zitadel.idp.v1.idp.GitHubConfig = config.github.getOrElse(com.zitadel.idp.v1.idp.GitHubConfig.defaultInstance)
    def withGithub(__v: com.zitadel.idp.v1.idp.GitHubConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Github(__v))
    def getGithubEs: com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig = config.githubEs.getOrElse(com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig.defaultInstance)
    def withGithubEs(__v: com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.GithubEs(__v))
    def getGitlab: com.zitadel.idp.v1.idp.GitLabConfig = config.gitlab.getOrElse(com.zitadel.idp.v1.idp.GitLabConfig.defaultInstance)
    def withGitlab(__v: com.zitadel.idp.v1.idp.GitLabConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Gitlab(__v))
    def getGitlabSelfHosted: com.zitadel.idp.v1.idp.GitLabSelfHostedConfig = config.gitlabSelfHosted.getOrElse(com.zitadel.idp.v1.idp.GitLabSelfHostedConfig.defaultInstance)
    def withGitlabSelfHosted(__v: com.zitadel.idp.v1.idp.GitLabSelfHostedConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.GitlabSelfHosted(__v))
    def getAzureAd: com.zitadel.idp.v1.idp.AzureADConfig = config.azureAd.getOrElse(com.zitadel.idp.v1.idp.AzureADConfig.defaultInstance)
    def withAzureAd(__v: com.zitadel.idp.v1.idp.AzureADConfig): ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.AzureAd(__v))
    def clearConfig: ProviderConfig = copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Empty)
    def withConfig(__v: com.zitadel.idp.v1.idp.ProviderConfig.Config): ProviderConfig = copy(config = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => options.orNull
        case 2 => config.ldap.orNull
        case 3 => config.google.orNull
        case 4 => config.oauth.orNull
        case 5 => config.oidc.orNull
        case 6 => config.jwt.orNull
        case 7 => config.github.orNull
        case 8 => config.githubEs.orNull
        case 9 => config.gitlab.orNull
        case 10 => config.gitlabSelfHosted.orNull
        case 11 => config.azureAd.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => config.ldap.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => config.google.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => config.oauth.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => config.oidc.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => config.jwt.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => config.github.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => config.githubEs.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => config.gitlab.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => config.gitlabSelfHosted.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => config.azureAd.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.idp.v1.idp.ProviderConfig.type = com.zitadel.idp.v1.idp.ProviderConfig
    // @@protoc_insertion_point(GeneratedMessage[zitadel.idp.v1.ProviderConfig])
}

object ProviderConfig extends scalapb.GeneratedMessageCompanion[com.zitadel.idp.v1.idp.ProviderConfig] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.idp.v1.idp.ProviderConfig] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.idp.v1.idp.ProviderConfig = {
    var __options: _root_.scala.Option[com.zitadel.idp.v1.idp.Options] = _root_.scala.None
    var __config: com.zitadel.idp.v1.idp.ProviderConfig.Config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __options = Option(__options.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.Options](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Ldap(__config.ldap.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.LDAPConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Google(__config.google.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.GoogleConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Oauth(__config.oauth.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.OAuthConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Oidc(__config.oidc.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.GenericOIDCConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Jwt(__config.jwt.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.JWTConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Github(__config.github.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.GitHubConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.GithubEs(__config.githubEs.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Gitlab(__config.gitlab.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.GitLabConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 82 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.GitlabSelfHosted(__config.gitlabSelfHosted.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.GitLabSelfHostedConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 90 =>
          __config = com.zitadel.idp.v1.idp.ProviderConfig.Config.AzureAd(__config.azureAd.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.idp.v1.idp.AzureADConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.idp.v1.idp.ProviderConfig(
        options = __options,
        config = __config,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.idp.v1.idp.ProviderConfig] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.idp.v1.idp.ProviderConfig(
        options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.Options]]),
        config = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.LDAPConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.Ldap(_))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.GoogleConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.Google(_)))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.OAuthConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.Oauth(_)))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.GenericOIDCConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.Oidc(_)))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.JWTConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.Jwt(_)))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.GitHubConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.Github(_)))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.GithubEs(_)))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.GitLabConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.Gitlab(_)))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.GitLabSelfHostedConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.GitlabSelfHosted(_)))
            .orElse[com.zitadel.idp.v1.idp.ProviderConfig.Config](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[com.zitadel.idp.v1.idp.AzureADConfig]]).map(com.zitadel.idp.v1.idp.ProviderConfig.Config.AzureAd(_)))
            .getOrElse(com.zitadel.idp.v1.idp.ProviderConfig.Config.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = IdpProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = IdpProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.idp.v1.idp.Options
      case 2 => __out = com.zitadel.idp.v1.idp.LDAPConfig
      case 3 => __out = com.zitadel.idp.v1.idp.GoogleConfig
      case 4 => __out = com.zitadel.idp.v1.idp.OAuthConfig
      case 5 => __out = com.zitadel.idp.v1.idp.GenericOIDCConfig
      case 6 => __out = com.zitadel.idp.v1.idp.JWTConfig
      case 7 => __out = com.zitadel.idp.v1.idp.GitHubConfig
      case 8 => __out = com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig
      case 9 => __out = com.zitadel.idp.v1.idp.GitLabConfig
      case 10 => __out = com.zitadel.idp.v1.idp.GitLabSelfHostedConfig
      case 11 => __out = com.zitadel.idp.v1.idp.AzureADConfig
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.idp.v1.idp.ProviderConfig(
    options = _root_.scala.None,
    config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Empty
  )
  sealed trait Config extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isLdap: _root_.scala.Boolean = false
    def isGoogle: _root_.scala.Boolean = false
    def isOauth: _root_.scala.Boolean = false
    def isOidc: _root_.scala.Boolean = false
    def isJwt: _root_.scala.Boolean = false
    def isGithub: _root_.scala.Boolean = false
    def isGithubEs: _root_.scala.Boolean = false
    def isGitlab: _root_.scala.Boolean = false
    def isGitlabSelfHosted: _root_.scala.Boolean = false
    def isAzureAd: _root_.scala.Boolean = false
    def ldap: _root_.scala.Option[com.zitadel.idp.v1.idp.LDAPConfig] = _root_.scala.None
    def google: _root_.scala.Option[com.zitadel.idp.v1.idp.GoogleConfig] = _root_.scala.None
    def oauth: _root_.scala.Option[com.zitadel.idp.v1.idp.OAuthConfig] = _root_.scala.None
    def oidc: _root_.scala.Option[com.zitadel.idp.v1.idp.GenericOIDCConfig] = _root_.scala.None
    def jwt: _root_.scala.Option[com.zitadel.idp.v1.idp.JWTConfig] = _root_.scala.None
    def github: _root_.scala.Option[com.zitadel.idp.v1.idp.GitHubConfig] = _root_.scala.None
    def githubEs: _root_.scala.Option[com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig] = _root_.scala.None
    def gitlab: _root_.scala.Option[com.zitadel.idp.v1.idp.GitLabConfig] = _root_.scala.None
    def gitlabSelfHosted: _root_.scala.Option[com.zitadel.idp.v1.idp.GitLabSelfHostedConfig] = _root_.scala.None
    def azureAd: _root_.scala.Option[com.zitadel.idp.v1.idp.AzureADConfig] = _root_.scala.None
  }
  object Config {
    @SerialVersionUID(0L)
    case object Empty extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Ldap(value: com.zitadel.idp.v1.idp.LDAPConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.LDAPConfig
      override def isLdap: _root_.scala.Boolean = true
      override def ldap: _root_.scala.Option[com.zitadel.idp.v1.idp.LDAPConfig] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Google(value: com.zitadel.idp.v1.idp.GoogleConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.GoogleConfig
      override def isGoogle: _root_.scala.Boolean = true
      override def google: _root_.scala.Option[com.zitadel.idp.v1.idp.GoogleConfig] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Oauth(value: com.zitadel.idp.v1.idp.OAuthConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.OAuthConfig
      override def isOauth: _root_.scala.Boolean = true
      override def oauth: _root_.scala.Option[com.zitadel.idp.v1.idp.OAuthConfig] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Oidc(value: com.zitadel.idp.v1.idp.GenericOIDCConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.GenericOIDCConfig
      override def isOidc: _root_.scala.Boolean = true
      override def oidc: _root_.scala.Option[com.zitadel.idp.v1.idp.GenericOIDCConfig] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Jwt(value: com.zitadel.idp.v1.idp.JWTConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.JWTConfig
      override def isJwt: _root_.scala.Boolean = true
      override def jwt: _root_.scala.Option[com.zitadel.idp.v1.idp.JWTConfig] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Github(value: com.zitadel.idp.v1.idp.GitHubConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.GitHubConfig
      override def isGithub: _root_.scala.Boolean = true
      override def github: _root_.scala.Option[com.zitadel.idp.v1.idp.GitHubConfig] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class GithubEs(value: com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig
      override def isGithubEs: _root_.scala.Boolean = true
      override def githubEs: _root_.scala.Option[com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Gitlab(value: com.zitadel.idp.v1.idp.GitLabConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.GitLabConfig
      override def isGitlab: _root_.scala.Boolean = true
      override def gitlab: _root_.scala.Option[com.zitadel.idp.v1.idp.GitLabConfig] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class GitlabSelfHosted(value: com.zitadel.idp.v1.idp.GitLabSelfHostedConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.GitLabSelfHostedConfig
      override def isGitlabSelfHosted: _root_.scala.Boolean = true
      override def gitlabSelfHosted: _root_.scala.Option[com.zitadel.idp.v1.idp.GitLabSelfHostedConfig] = Some(value)
      override def number: _root_.scala.Int = 10
    }
    @SerialVersionUID(0L)
    final case class AzureAd(value: com.zitadel.idp.v1.idp.AzureADConfig) extends com.zitadel.idp.v1.idp.ProviderConfig.Config {
      type ValueType = com.zitadel.idp.v1.idp.AzureADConfig
      override def isAzureAd: _root_.scala.Boolean = true
      override def azureAd: _root_.scala.Option[com.zitadel.idp.v1.idp.AzureADConfig] = Some(value)
      override def number: _root_.scala.Int = 11
    }
  }
  implicit class ProviderConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.ProviderConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.idp.v1.idp.ProviderConfig](_l) {
    def options: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.Options] = field(_.getOptions)((c_, f_) => c_.copy(options = Option(f_)))
    def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.idp.v1.idp.Options]] = field(_.options)((c_, f_) => c_.copy(options = f_))
    def ldap: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.LDAPConfig] = field(_.getLdap)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Ldap(f_)))
    def google: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.GoogleConfig] = field(_.getGoogle)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Google(f_)))
    def oauth: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.OAuthConfig] = field(_.getOauth)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Oauth(f_)))
    def oidc: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.GenericOIDCConfig] = field(_.getOidc)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Oidc(f_)))
    def jwt: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.JWTConfig] = field(_.getJwt)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Jwt(f_)))
    def github: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.GitHubConfig] = field(_.getGithub)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Github(f_)))
    def githubEs: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.GitHubEnterpriseServerConfig] = field(_.getGithubEs)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.GithubEs(f_)))
    def gitlab: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.GitLabConfig] = field(_.getGitlab)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.Gitlab(f_)))
    def gitlabSelfHosted: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.GitLabSelfHostedConfig] = field(_.getGitlabSelfHosted)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.GitlabSelfHosted(f_)))
    def azureAd: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.AzureADConfig] = field(_.getAzureAd)((c_, f_) => c_.copy(config = com.zitadel.idp.v1.idp.ProviderConfig.Config.AzureAd(f_)))
    def config: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.idp.v1.idp.ProviderConfig.Config] = field(_.config)((c_, f_) => c_.copy(config = f_))
  }
  final val OPTIONS_FIELD_NUMBER = 1
  final val LDAP_FIELD_NUMBER = 2
  final val GOOGLE_FIELD_NUMBER = 3
  final val OAUTH_FIELD_NUMBER = 4
  final val OIDC_FIELD_NUMBER = 5
  final val JWT_FIELD_NUMBER = 6
  final val GITHUB_FIELD_NUMBER = 7
  final val GITHUB_ES_FIELD_NUMBER = 8
  final val GITLAB_FIELD_NUMBER = 9
  final val GITLAB_SELF_HOSTED_FIELD_NUMBER = 10
  final val AZURE_AD_FIELD_NUMBER = 11
  def of(
    options: _root_.scala.Option[com.zitadel.idp.v1.idp.Options],
    config: com.zitadel.idp.v1.idp.ProviderConfig.Config
  ): _root_.com.zitadel.idp.v1.idp.ProviderConfig = _root_.com.zitadel.idp.v1.idp.ProviderConfig(
    options,
    config
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.idp.v1.ProviderConfig])
}
