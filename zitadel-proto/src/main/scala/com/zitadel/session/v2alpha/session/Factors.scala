// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.session.v2alpha.session

@SerialVersionUID(0L)
final case class Factors(
    user: _root_.scala.Option[com.zitadel.session.v2alpha.session.UserFactor] = _root_.scala.None,
    password: _root_.scala.Option[com.zitadel.session.v2alpha.session.PasswordFactor] = _root_.scala.None,
    passkey: _root_.scala.Option[com.zitadel.session.v2alpha.session.PasskeyFactor] = _root_.scala.None,
    intent: _root_.scala.Option[com.zitadel.session.v2alpha.session.IntentFactor] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Factors] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (user.isDefined) {
        val __value = user.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (password.isDefined) {
        val __value = password.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (passkey.isDefined) {
        val __value = passkey.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (intent.isDefined) {
        val __value = intent.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      user.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      password.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      passkey.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      intent.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getUser: com.zitadel.session.v2alpha.session.UserFactor = user.getOrElse(com.zitadel.session.v2alpha.session.UserFactor.defaultInstance)
    def clearUser: Factors = copy(user = _root_.scala.None)
    def withUser(__v: com.zitadel.session.v2alpha.session.UserFactor): Factors = copy(user = Option(__v))
    def getPassword: com.zitadel.session.v2alpha.session.PasswordFactor = password.getOrElse(com.zitadel.session.v2alpha.session.PasswordFactor.defaultInstance)
    def clearPassword: Factors = copy(password = _root_.scala.None)
    def withPassword(__v: com.zitadel.session.v2alpha.session.PasswordFactor): Factors = copy(password = Option(__v))
    def getPasskey: com.zitadel.session.v2alpha.session.PasskeyFactor = passkey.getOrElse(com.zitadel.session.v2alpha.session.PasskeyFactor.defaultInstance)
    def clearPasskey: Factors = copy(passkey = _root_.scala.None)
    def withPasskey(__v: com.zitadel.session.v2alpha.session.PasskeyFactor): Factors = copy(passkey = Option(__v))
    def getIntent: com.zitadel.session.v2alpha.session.IntentFactor = intent.getOrElse(com.zitadel.session.v2alpha.session.IntentFactor.defaultInstance)
    def clearIntent: Factors = copy(intent = _root_.scala.None)
    def withIntent(__v: com.zitadel.session.v2alpha.session.IntentFactor): Factors = copy(intent = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => user.orNull
        case 2 => password.orNull
        case 3 => passkey.orNull
        case 4 => intent.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => user.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => password.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => passkey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => intent.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.session.v2alpha.session.Factors.type = com.zitadel.session.v2alpha.session.Factors
    // @@protoc_insertion_point(GeneratedMessage[zitadel.session.v2alpha.Factors])
}

object Factors extends scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session.Factors] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.session.v2alpha.session.Factors] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.session.v2alpha.session.Factors = {
    var __user: _root_.scala.Option[com.zitadel.session.v2alpha.session.UserFactor] = _root_.scala.None
    var __password: _root_.scala.Option[com.zitadel.session.v2alpha.session.PasswordFactor] = _root_.scala.None
    var __passkey: _root_.scala.Option[com.zitadel.session.v2alpha.session.PasskeyFactor] = _root_.scala.None
    var __intent: _root_.scala.Option[com.zitadel.session.v2alpha.session.IntentFactor] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __user = Option(__user.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.session.UserFactor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __password = Option(__password.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.session.PasswordFactor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __passkey = Option(__passkey.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.session.PasskeyFactor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __intent = Option(__intent.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.session.v2alpha.session.IntentFactor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.session.v2alpha.session.Factors(
        user = __user,
        password = __password,
        passkey = __passkey,
        intent = __intent,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.session.v2alpha.session.Factors] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.session.v2alpha.session.Factors(
        user = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.session.v2alpha.session.UserFactor]]),
        password = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.zitadel.session.v2alpha.session.PasswordFactor]]),
        passkey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.zitadel.session.v2alpha.session.PasskeyFactor]]),
        intent = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.zitadel.session.v2alpha.session.IntentFactor]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SessionProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SessionProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.session.v2alpha.session.UserFactor
      case 2 => __out = com.zitadel.session.v2alpha.session.PasswordFactor
      case 3 => __out = com.zitadel.session.v2alpha.session.PasskeyFactor
      case 4 => __out = com.zitadel.session.v2alpha.session.IntentFactor
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.session.v2alpha.session.Factors(
    user = _root_.scala.None,
    password = _root_.scala.None,
    passkey = _root_.scala.None,
    intent = _root_.scala.None
  )
  implicit class FactorsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session.Factors]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.session.v2alpha.session.Factors](_l) {
    def user: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session.UserFactor] = field(_.getUser)((c_, f_) => c_.copy(user = Option(f_)))
    def optionalUser: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.session.v2alpha.session.UserFactor]] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def password: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session.PasswordFactor] = field(_.getPassword)((c_, f_) => c_.copy(password = Option(f_)))
    def optionalPassword: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.session.v2alpha.session.PasswordFactor]] = field(_.password)((c_, f_) => c_.copy(password = f_))
    def passkey: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session.PasskeyFactor] = field(_.getPasskey)((c_, f_) => c_.copy(passkey = Option(f_)))
    def optionalPasskey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.session.v2alpha.session.PasskeyFactor]] = field(_.passkey)((c_, f_) => c_.copy(passkey = f_))
    def intent: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.session.v2alpha.session.IntentFactor] = field(_.getIntent)((c_, f_) => c_.copy(intent = Option(f_)))
    def optionalIntent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.session.v2alpha.session.IntentFactor]] = field(_.intent)((c_, f_) => c_.copy(intent = f_))
  }
  final val USER_FIELD_NUMBER = 1
  final val PASSWORD_FIELD_NUMBER = 2
  final val PASSKEY_FIELD_NUMBER = 3
  final val INTENT_FIELD_NUMBER = 4
  def of(
    user: _root_.scala.Option[com.zitadel.session.v2alpha.session.UserFactor],
    password: _root_.scala.Option[com.zitadel.session.v2alpha.session.PasswordFactor],
    passkey: _root_.scala.Option[com.zitadel.session.v2alpha.session.PasskeyFactor],
    intent: _root_.scala.Option[com.zitadel.session.v2alpha.session.IntentFactor]
  ): _root_.com.zitadel.session.v2alpha.session.Factors = _root_.com.zitadel.session.v2alpha.session.Factors(
    user,
    password,
    passkey,
    intent
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.session.v2alpha.Factors])
}
