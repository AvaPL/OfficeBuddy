// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.text.v1.text

@SerialVersionUID(0L)
final case class PasswordScreenText(
    title: _root_.scala.Predef.String = "",
    description: _root_.scala.Predef.String = "",
    passwordLabel: _root_.scala.Predef.String = "",
    resetLinkText: _root_.scala.Predef.String = "",
    backButtonText: _root_.scala.Predef.String = "",
    nextButtonText: _root_.scala.Predef.String = "",
    minLength: _root_.scala.Predef.String = "",
    hasUppercase: _root_.scala.Predef.String = "",
    hasLowercase: _root_.scala.Predef.String = "",
    hasNumber: _root_.scala.Predef.String = "",
    hasSymbol: _root_.scala.Predef.String = "",
    confirmation: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PasswordScreenText] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = title
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = description
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = passwordLabel
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = resetLinkText
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = backButtonText
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = nextButtonText
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = minLength
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = hasUppercase
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = hasLowercase
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      
      {
        val __value = hasNumber
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
        }
      };
      
      {
        val __value = hasSymbol
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
        }
      };
      
      {
        val __value = confirmation
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = title
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = description
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = passwordLabel
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = resetLinkText
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = backButtonText
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = nextButtonText
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = minLength
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = hasUppercase
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = hasLowercase
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = hasNumber
        if (!__v.isEmpty) {
          _output__.writeString(10, __v)
        }
      };
      {
        val __v = hasSymbol
        if (!__v.isEmpty) {
          _output__.writeString(11, __v)
        }
      };
      {
        val __v = confirmation
        if (!__v.isEmpty) {
          _output__.writeString(12, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withTitle(__v: _root_.scala.Predef.String): PasswordScreenText = copy(title = __v)
    def withDescription(__v: _root_.scala.Predef.String): PasswordScreenText = copy(description = __v)
    def withPasswordLabel(__v: _root_.scala.Predef.String): PasswordScreenText = copy(passwordLabel = __v)
    def withResetLinkText(__v: _root_.scala.Predef.String): PasswordScreenText = copy(resetLinkText = __v)
    def withBackButtonText(__v: _root_.scala.Predef.String): PasswordScreenText = copy(backButtonText = __v)
    def withNextButtonText(__v: _root_.scala.Predef.String): PasswordScreenText = copy(nextButtonText = __v)
    def withMinLength(__v: _root_.scala.Predef.String): PasswordScreenText = copy(minLength = __v)
    def withHasUppercase(__v: _root_.scala.Predef.String): PasswordScreenText = copy(hasUppercase = __v)
    def withHasLowercase(__v: _root_.scala.Predef.String): PasswordScreenText = copy(hasLowercase = __v)
    def withHasNumber(__v: _root_.scala.Predef.String): PasswordScreenText = copy(hasNumber = __v)
    def withHasSymbol(__v: _root_.scala.Predef.String): PasswordScreenText = copy(hasSymbol = __v)
    def withConfirmation(__v: _root_.scala.Predef.String): PasswordScreenText = copy(confirmation = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = title
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = passwordLabel
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = resetLinkText
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = backButtonText
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = nextButtonText
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = minLength
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = hasUppercase
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = hasLowercase
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = hasNumber
          if (__t != "") __t else null
        }
        case 11 => {
          val __t = hasSymbol
          if (__t != "") __t else null
        }
        case 12 => {
          val __t = confirmation
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(title)
        case 2 => _root_.scalapb.descriptors.PString(description)
        case 3 => _root_.scalapb.descriptors.PString(passwordLabel)
        case 4 => _root_.scalapb.descriptors.PString(resetLinkText)
        case 5 => _root_.scalapb.descriptors.PString(backButtonText)
        case 6 => _root_.scalapb.descriptors.PString(nextButtonText)
        case 7 => _root_.scalapb.descriptors.PString(minLength)
        case 8 => _root_.scalapb.descriptors.PString(hasUppercase)
        case 9 => _root_.scalapb.descriptors.PString(hasLowercase)
        case 10 => _root_.scalapb.descriptors.PString(hasNumber)
        case 11 => _root_.scalapb.descriptors.PString(hasSymbol)
        case 12 => _root_.scalapb.descriptors.PString(confirmation)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.text.v1.text.PasswordScreenText.type = com.zitadel.text.v1.text.PasswordScreenText
    // @@protoc_insertion_point(GeneratedMessage[zitadel.text.v1.PasswordScreenText])
}

object PasswordScreenText extends scalapb.GeneratedMessageCompanion[com.zitadel.text.v1.text.PasswordScreenText] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.text.v1.text.PasswordScreenText] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.text.v1.text.PasswordScreenText = {
    var __title: _root_.scala.Predef.String = ""
    var __description: _root_.scala.Predef.String = ""
    var __passwordLabel: _root_.scala.Predef.String = ""
    var __resetLinkText: _root_.scala.Predef.String = ""
    var __backButtonText: _root_.scala.Predef.String = ""
    var __nextButtonText: _root_.scala.Predef.String = ""
    var __minLength: _root_.scala.Predef.String = ""
    var __hasUppercase: _root_.scala.Predef.String = ""
    var __hasLowercase: _root_.scala.Predef.String = ""
    var __hasNumber: _root_.scala.Predef.String = ""
    var __hasSymbol: _root_.scala.Predef.String = ""
    var __confirmation: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __title = _input__.readStringRequireUtf8()
        case 18 =>
          __description = _input__.readStringRequireUtf8()
        case 26 =>
          __passwordLabel = _input__.readStringRequireUtf8()
        case 34 =>
          __resetLinkText = _input__.readStringRequireUtf8()
        case 42 =>
          __backButtonText = _input__.readStringRequireUtf8()
        case 50 =>
          __nextButtonText = _input__.readStringRequireUtf8()
        case 58 =>
          __minLength = _input__.readStringRequireUtf8()
        case 66 =>
          __hasUppercase = _input__.readStringRequireUtf8()
        case 74 =>
          __hasLowercase = _input__.readStringRequireUtf8()
        case 82 =>
          __hasNumber = _input__.readStringRequireUtf8()
        case 90 =>
          __hasSymbol = _input__.readStringRequireUtf8()
        case 98 =>
          __confirmation = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.text.v1.text.PasswordScreenText(
        title = __title,
        description = __description,
        passwordLabel = __passwordLabel,
        resetLinkText = __resetLinkText,
        backButtonText = __backButtonText,
        nextButtonText = __nextButtonText,
        minLength = __minLength,
        hasUppercase = __hasUppercase,
        hasLowercase = __hasLowercase,
        hasNumber = __hasNumber,
        hasSymbol = __hasSymbol,
        confirmation = __confirmation,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.text.v1.text.PasswordScreenText] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.text.v1.text.PasswordScreenText(
        title = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        passwordLabel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        resetLinkText = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        backButtonText = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        nextButtonText = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        minLength = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        hasUppercase = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        hasLowercase = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        hasNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        hasSymbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        confirmation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TextProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TextProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.text.v1.text.PasswordScreenText(
    title = "",
    description = "",
    passwordLabel = "",
    resetLinkText = "",
    backButtonText = "",
    nextButtonText = "",
    minLength = "",
    hasUppercase = "",
    hasLowercase = "",
    hasNumber = "",
    hasSymbol = "",
    confirmation = ""
  )
  implicit class PasswordScreenTextLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.text.v1.text.PasswordScreenText]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.text.v1.text.PasswordScreenText](_l) {
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def passwordLabel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.passwordLabel)((c_, f_) => c_.copy(passwordLabel = f_))
    def resetLinkText: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resetLinkText)((c_, f_) => c_.copy(resetLinkText = f_))
    def backButtonText: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.backButtonText)((c_, f_) => c_.copy(backButtonText = f_))
    def nextButtonText: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.nextButtonText)((c_, f_) => c_.copy(nextButtonText = f_))
    def minLength: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.minLength)((c_, f_) => c_.copy(minLength = f_))
    def hasUppercase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hasUppercase)((c_, f_) => c_.copy(hasUppercase = f_))
    def hasLowercase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hasLowercase)((c_, f_) => c_.copy(hasLowercase = f_))
    def hasNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hasNumber)((c_, f_) => c_.copy(hasNumber = f_))
    def hasSymbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hasSymbol)((c_, f_) => c_.copy(hasSymbol = f_))
    def confirmation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.confirmation)((c_, f_) => c_.copy(confirmation = f_))
  }
  final val TITLE_FIELD_NUMBER = 1
  final val DESCRIPTION_FIELD_NUMBER = 2
  final val PASSWORD_LABEL_FIELD_NUMBER = 3
  final val RESET_LINK_TEXT_FIELD_NUMBER = 4
  final val BACK_BUTTON_TEXT_FIELD_NUMBER = 5
  final val NEXT_BUTTON_TEXT_FIELD_NUMBER = 6
  final val MIN_LENGTH_FIELD_NUMBER = 7
  final val HAS_UPPERCASE_FIELD_NUMBER = 8
  final val HAS_LOWERCASE_FIELD_NUMBER = 9
  final val HAS_NUMBER_FIELD_NUMBER = 10
  final val HAS_SYMBOL_FIELD_NUMBER = 11
  final val CONFIRMATION_FIELD_NUMBER = 12
  def of(
    title: _root_.scala.Predef.String,
    description: _root_.scala.Predef.String,
    passwordLabel: _root_.scala.Predef.String,
    resetLinkText: _root_.scala.Predef.String,
    backButtonText: _root_.scala.Predef.String,
    nextButtonText: _root_.scala.Predef.String,
    minLength: _root_.scala.Predef.String,
    hasUppercase: _root_.scala.Predef.String,
    hasLowercase: _root_.scala.Predef.String,
    hasNumber: _root_.scala.Predef.String,
    hasSymbol: _root_.scala.Predef.String,
    confirmation: _root_.scala.Predef.String
  ): _root_.com.zitadel.text.v1.text.PasswordScreenText = _root_.com.zitadel.text.v1.text.PasswordScreenText(
    title,
    description,
    passwordLabel,
    resetLinkText,
    backButtonText,
    nextButtonText,
    minLength,
    hasUppercase,
    hasLowercase,
    hasNumber,
    hasSymbol,
    confirmation
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.text.v1.PasswordScreenText])
}
