// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.system.v1.system

object SystemProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.zitadel.v1.`object`.ObjectProto,
    com.zitadel.v1.options.OptionsProto,
    com.zitadel.instance.v1.instance.InstanceProto,
    com.zitadel.member.v1.member.MemberProto,
    com.zitadel.quota.v1.quota.QuotaProto,
    com.zitadel.authn.v1.auth_n_key.AuthNKeyProto,
    com.google.api.annotations.AnnotationsProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.duration.DurationProto,
    com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto,
    com.validate.validate.ValidateProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.zitadel.system.v1.system.HealthzRequest,
      com.zitadel.system.v1.system.HealthzResponse,
      com.zitadel.system.v1.system.ListInstancesRequest,
      com.zitadel.system.v1.system.ListInstancesResponse,
      com.zitadel.system.v1.system.GetInstanceRequest,
      com.zitadel.system.v1.system.GetInstanceResponse,
      com.zitadel.system.v1.system.AddInstanceRequest,
      com.zitadel.system.v1.system.AddInstanceResponse,
      com.zitadel.system.v1.system.CreateInstanceRequest,
      com.zitadel.system.v1.system.CreateInstanceResponse,
      com.zitadel.system.v1.system.UpdateInstanceRequest,
      com.zitadel.system.v1.system.UpdateInstanceResponse,
      com.zitadel.system.v1.system.RemoveInstanceRequest,
      com.zitadel.system.v1.system.RemoveInstanceResponse,
      com.zitadel.system.v1.system.ListIAMMembersRequest,
      com.zitadel.system.v1.system.ListIAMMembersResponse,
      com.zitadel.system.v1.system.GetUsageRequest,
      com.zitadel.system.v1.system.AddQuotaRequest,
      com.zitadel.system.v1.system.AddQuotaResponse,
      com.zitadel.system.v1.system.RemoveQuotaRequest,
      com.zitadel.system.v1.system.RemoveQuotaResponse,
      com.zitadel.system.v1.system.ExistsDomainRequest,
      com.zitadel.system.v1.system.ExistsDomainResponse,
      com.zitadel.system.v1.system.ListDomainsRequest,
      com.zitadel.system.v1.system.ListDomainsResponse,
      com.zitadel.system.v1.system.AddDomainRequest,
      com.zitadel.system.v1.system.AddDomainResponse,
      com.zitadel.system.v1.system.RemoveDomainRequest,
      com.zitadel.system.v1.system.RemoveDomainResponse,
      com.zitadel.system.v1.system.SetPrimaryDomainRequest,
      com.zitadel.system.v1.system.SetPrimaryDomainResponse,
      com.zitadel.system.v1.system.ChangeSubscriptionRequest,
      com.zitadel.system.v1.system.ChangeSubscriptionResponse,
      com.zitadel.system.v1.system.ListViewsRequest,
      com.zitadel.system.v1.system.ListViewsResponse,
      com.zitadel.system.v1.system.ClearViewRequest,
      com.zitadel.system.v1.system.ClearViewResponse,
      com.zitadel.system.v1.system.ListFailedEventsRequest,
      com.zitadel.system.v1.system.ListFailedEventsResponse,
      com.zitadel.system.v1.system.RemoveFailedEventRequest,
      com.zitadel.system.v1.system.RemoveFailedEventResponse,
      com.zitadel.system.v1.system.View,
      com.zitadel.system.v1.system.FailedEvent
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChR6aXRhZGVsL3N5c3RlbS5wcm90bxIReml0YWRlbC5zeXN0ZW0udjEaFHppdGFkZWwvb2JqZWN0LnByb3RvGhV6aXRhZGVsL
  29wdGlvbnMucHJvdG8aFnppdGFkZWwvaW5zdGFuY2UucHJvdG8aFHppdGFkZWwvbWVtYmVyLnByb3RvGhN6aXRhZGVsL3F1b3RhL
  nByb3RvGhh6aXRhZGVsL2F1dGhfbl9rZXkucHJvdG8aHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aH2dvb2dsZS9wcm90b
  2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5wcm90bxoucHJvdG9jLWdlbi1vcGVuYXBpdjIvb
  3B0aW9ucy9hbm5vdGF0aW9ucy5wcm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8iEAoOSGVhbHRoelJlcXVlc3QiEQoPSGVhb
  HRoelJlc3BvbnNlIpUCChRMaXN0SW5zdGFuY2VzUmVxdWVzdBI3CgVxdWVyeRgBIAEoCzIVLnppdGFkZWwudjEuTGlzdFF1ZXJ5Q
  griPwcSBXF1ZXJ5UgVxdWVyeRJZCg5zb3J0aW5nX2NvbHVtbhgCIAEoDjIeLnppdGFkZWwuaW5zdGFuY2UudjEuRmllbGROYW1lQ
  hLiPw8SDXNvcnRpbmdDb2x1bW5SDXNvcnRpbmdDb2x1bW4SQgoHcXVlcmllcxgDIAMoCzIaLnppdGFkZWwuaW5zdGFuY2UudjEuU
  XVlcnlCDOI/CRIHcXVlcmllc1IHcXVlcmllczolkkEiCiAyFlNlYXJjaCBxdWVyeSBmb3IgbGlzdHPSAQVxdWVyeSL3AQoVTGlzd
  Eluc3RhbmNlc1Jlc3BvbnNlEj8KB2RldGFpbHMYASABKAsyFy56aXRhZGVsLnYxLkxpc3REZXRhaWxzQgziPwkSB2RldGFpbHNSB
  2RldGFpbHMSWQoOc29ydGluZ19jb2x1bW4YAiABKA4yHi56aXRhZGVsLmluc3RhbmNlLnYxLkZpZWxkTmFtZUIS4j8PEg1zb3J0a
  W5nQ29sdW1uUg1zb3J0aW5nQ29sdW1uEkIKBnJlc3VsdBgDIAMoCzIdLnppdGFkZWwuaW5zdGFuY2UudjEuSW5zdGFuY2VCC+I/C
  BIGcmVzdWx0UgZyZXN1bHQiUAoSR2V0SW5zdGFuY2VSZXF1ZXN0EjoKC2luc3RhbmNlX2lkGAEgASgJQhniPwwSCmluc3RhbmNlS
  WT6QgdyBRABGMgBUgppbnN0YW5jZUlkImUKE0dldEluc3RhbmNlUmVzcG9uc2USTgoIaW5zdGFuY2UYASABKAsyIy56aXRhZGVsL
  mluc3RhbmNlLnYxLkluc3RhbmNlRGV0YWlsQg3iPwoSCGluc3RhbmNlUghpbnN0YW5jZSL/CAoSQWRkSW5zdGFuY2VSZXF1ZXN0E
  kAKDWluc3RhbmNlX25hbWUYASABKAlCG+I/DhIMaW5zdGFuY2VOYW1l+kIHcgUQARjIAVIMaW5zdGFuY2VOYW1lEj8KDmZpcnN0X
  29yZ19uYW1lGAIgASgJQhniPw4SDGZpcnN0T3JnTmFtZfpCBXIDGMgBUgxmaXJzdE9yZ05hbWUSPgoNY3VzdG9tX2RvbWFpbhgDI
  AEoCUIZ4j8OEgxjdXN0b21Eb21haW76QgVyAxjIAVIMY3VzdG9tRG9tYWluEkIKD293bmVyX3VzZXJfbmFtZRgEIAEoCUIa4j8PE
  g1vd25lclVzZXJOYW1l+kIFcgMYyAFSDW93bmVyVXNlck5hbWUSZQoLb3duZXJfZW1haWwYBSABKAsyKy56aXRhZGVsLnN5c3Rlb
  S52MS5BZGRJbnN0YW5jZVJlcXVlc3QuRW1haWxCF+I/DBIKb3duZXJFbWFpbPpCBYoBAhABUgpvd25lckVtYWlsEm0KDW93bmVyX
  3Byb2ZpbGUYBiABKAsyLS56aXRhZGVsLnN5c3RlbS52MS5BZGRJbnN0YW5jZVJlcXVlc3QuUHJvZmlsZUIZ4j8OEgxvd25lclByb
  2ZpbGX6QgWKAQIQAFIMb3duZXJQcm9maWxlEnEKDm93bmVyX3Bhc3N3b3JkGAcgASgLMi4ueml0YWRlbC5zeXN0ZW0udjEuQWRkS
  W5zdGFuY2VSZXF1ZXN0LlBhc3N3b3JkQhriPw8SDW93bmVyUGFzc3dvcmT6QgWKAQIQAFINb3duZXJQYXNzd29yZBJGChBkZWZhd
  Wx0X2xhbmd1YWdlGAggASgJQhviPxESD2RlZmF1bHRMYW5ndWFnZfpCBHICGApSD2RlZmF1bHRMYW5ndWFnZRrCAQoHUHJvZmlsZ
  RI1CgpmaXJzdF9uYW1lGAEgASgJQhbiPwsSCWZpcnN0TmFtZfpCBXIDGMgBUglmaXJzdE5hbWUSMgoJbGFzdF9uYW1lGAIgASgJQ
  hXiPwoSCGxhc3ROYW1l+kIFcgMYyAFSCGxhc3ROYW1lEkwKEnByZWZlcnJlZF9sYW5ndWFnZRgFIAEoCUId4j8TEhFwcmVmZXJyZ
  WRMYW5ndWFnZfpCBHICGApSEXByZWZlcnJlZExhbmd1YWdlGnUKBUVtYWlsEioKBWVtYWlsGAEgASgJQhTiPwcSBWVtYWls+kIHc
  gUQARjIAVIFZW1haWwSQAoRaXNfZW1haWxfdmVyaWZpZWQYAiABKAhCFOI/ERIPaXNFbWFpbFZlcmlmaWVkUg9pc0VtYWlsVmVya
  WZpZWQalAEKCFBhc3N3b3JkEjEKCHBhc3N3b3JkGAEgASgJQhXiPwoSCHBhc3N3b3Jk+kIFcgMYyAFSCHBhc3N3b3JkElUKGHBhc
  3N3b3JkX2NoYW5nZV9yZXF1aXJlZBgCIAEoCEIb4j8YEhZwYXNzd29yZENoYW5nZVJlcXVpcmVkUhZwYXNzd29yZENoYW5nZVJlc
  XVpcmVkIooBChNBZGRJbnN0YW5jZVJlc3BvbnNlEjAKC2luc3RhbmNlX2lkGAEgASgJQg/iPwwSCmluc3RhbmNlSWRSCmluc3Rhb
  mNlSWQSQQoHZGV0YWlscxgCIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlsc0IM4j8JEgdkZXRhaWxzUgdkZXRhaWxzItEQC
  hVDcmVhdGVJbnN0YW5jZVJlcXVlc3QSQAoNaW5zdGFuY2VfbmFtZRgBIAEoCUIb4j8OEgxpbnN0YW5jZU5hbWX6QgdyBRABGMgBU
  gxpbnN0YW5jZU5hbWUSPwoOZmlyc3Rfb3JnX25hbWUYAiABKAlCGeI/DhIMZmlyc3RPcmdOYW1l+kIFcgMYyAFSDGZpcnN0T3JnT
  mFtZRI+Cg1jdXN0b21fZG9tYWluGAMgASgJQhniPw4SDGN1c3RvbURvbWFpbvpCBXIDGMgBUgxjdXN0b21Eb21haW4SUgoFaHVtY
  W4YBCABKAsyLi56aXRhZGVsLnN5c3RlbS52MS5DcmVhdGVJbnN0YW5jZVJlcXVlc3QuSHVtYW5CCuI/BxIFaHVtYW5IAFIFaHVtY
  W4SWgoHbWFjaGluZRgFIAEoCzIwLnppdGFkZWwuc3lzdGVtLnYxLkNyZWF0ZUluc3RhbmNlUmVxdWVzdC5NYWNoaW5lQgziPwkSB
  21hY2hpbmVIAFIHbWFjaGluZRJGChBkZWZhdWx0X2xhbmd1YWdlGAYgASgJQhviPxESD2RlZmF1bHRMYW5ndWFnZfpCBHICGApSD
  2RlZmF1bHRMYW5ndWFnZRrCAQoHUHJvZmlsZRI1CgpmaXJzdF9uYW1lGAEgASgJQhbiPwsSCWZpcnN0TmFtZfpCBXIDGMgBUglma
  XJzdE5hbWUSMgoJbGFzdF9uYW1lGAIgASgJQhXiPwoSCGxhc3ROYW1l+kIFcgMYyAFSCGxhc3ROYW1lEkwKEnByZWZlcnJlZF9sY
  W5ndWFnZRgDIAEoCUId4j8TEhFwcmVmZXJyZWRMYW5ndWFnZfpCBHICGApSEXByZWZlcnJlZExhbmd1YWdlGncKBUVtYWlsEiwKB
  WVtYWlsGAEgASgJQhbiPwcSBWVtYWls+kIJcgcQARjIAWABUgVlbWFpbBJAChFpc19lbWFpbF92ZXJpZmllZBgCIAEoCEIU4j8RE
  g9pc0VtYWlsVmVyaWZpZWRSD2lzRW1haWxWZXJpZmllZBqUAQoIUGFzc3dvcmQSMQoIcGFzc3dvcmQYASABKAlCFeI/ChIIcGFzc
  3dvcmT6QgVyAxjIAVIIcGFzc3dvcmQSVQoYcGFzc3dvcmRfY2hhbmdlX3JlcXVpcmVkGAIgASgIQhviPxgSFnBhc3N3b3JkQ2hhb
  mdlUmVxdWlyZWRSFnBhc3N3b3JkQ2hhbmdlUmVxdWlyZWQa3QIKBUh1bWFuEjIKCXVzZXJfbmFtZRgBIAEoCUIV4j8KEgh1c2VyT
  mFtZfpCBXIDGMgBUgh1c2VyTmFtZRJYCgVlbWFpbBgCIAEoCzIuLnppdGFkZWwuc3lzdGVtLnYxLkNyZWF0ZUluc3RhbmNlUmVxd
  WVzdC5FbWFpbEIS4j8HEgVlbWFpbPpCBYoBAhABUgVlbWFpbBJgCgdwcm9maWxlGAMgASgLMjAueml0YWRlbC5zeXN0ZW0udjEuQ
  3JlYXRlSW5zdGFuY2VSZXF1ZXN0LlByb2ZpbGVCFOI/CRIHcHJvZmlsZfpCBYoBAhAAUgdwcm9maWxlEmQKCHBhc3N3b3JkGAQgA
  SgLMjEueml0YWRlbC5zeXN0ZW0udjEuQ3JlYXRlSW5zdGFuY2VSZXF1ZXN0LlBhc3N3b3JkQhXiPwoSCHBhc3N3b3Jk+kIFigECE
  ABSCHBhc3N3b3JkGtEBChNQZXJzb25hbEFjY2Vzc1Rva2VuErkBCg9leHBpcmF0aW9uX2RhdGUYASABKAsyGi5nb29nbGUucHJvd
  G9idWYuVGltZXN0YW1wQnTiPxASDmV4cGlyYXRpb25EYXRlkkFeMj1UaGUgZGF0ZSB0aGUgdG9rZW4gd2lsbCBleHBpcmUgYW5kI
  G5vIGxvZ2lucyB3aWxsIGJlIHBvc3NpYmxlSh0iMjUxOS0wNC0wMVQwODo0NTowMC4wMDAwMDBaIlIOZXhwaXJhdGlvbkRhdGUai
  gIKCk1hY2hpbmVLZXkSQgoEdHlwZRgBIAEoDjIZLnppdGFkZWwuYXV0aG4udjEuS2V5VHlwZUIT4j8GEgR0eXBl+kIHggEEEAEgA
  FIEdHlwZRK3AQoPZXhwaXJhdGlvbl9kYXRlGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEJy4j8QEg5leHBpcmF0a
  W9uRGF0ZZJBXDI7VGhlIGRhdGUgdGhlIGtleSB3aWxsIGV4cGlyZSBhbmQgbm8gbG9naW5zIHdpbGwgYmUgcG9zc2libGVKHSIyN
  TE5LTA0LTAxVDA4OjQ1OjAwLjAwMDAwMFoiUg5leHBpcmF0aW9uRGF0ZRrYAgoHTWFjaGluZRIyCgl1c2VyX25hbWUYASABKAlCF
  eI/ChIIdXNlck5hbWX6QgVyAxjIAVIIdXNlck5hbWUSJQoEbmFtZRgCIAEoCUIR4j8GEgRuYW1l+kIFcgMYyAFSBG5hbWUSigEKF
  XBlcnNvbmFsX2FjY2Vzc190b2tlbhgDIAEoCzI8LnppdGFkZWwuc3lzdGVtLnYxLkNyZWF0ZUluc3RhbmNlUmVxdWVzdC5QZXJzb
  25hbEFjY2Vzc1Rva2VuQhjiPxUSE3BlcnNvbmFsQWNjZXNzVG9rZW5SE3BlcnNvbmFsQWNjZXNzVG9rZW4SZQoLbWFjaGluZV9rZ
  XkYBCABKAsyMy56aXRhZGVsLnN5c3RlbS52MS5DcmVhdGVJbnN0YW5jZVJlcXVlc3QuTWFjaGluZUtleUIP4j8MEgptYWNoaW5lS
  2V5UgptYWNoaW5lS2V5QgwKBW93bmVyEgP4QgEi2wEKFkNyZWF0ZUluc3RhbmNlUmVzcG9uc2USMAoLaW5zdGFuY2VfaWQYASABK
  AlCD+I/DBIKaW5zdGFuY2VJZFIKaW5zdGFuY2VJZBJBCgdkZXRhaWxzGAIgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzQ
  gziPwkSB2RldGFpbHNSB2RldGFpbHMSGgoDcGF0GAMgASgJQgjiPwUSA3BhdFIDcGF0EjAKC21hY2hpbmVfa2V5GAQgASgMQg/iP
  wwSCm1hY2hpbmVLZXlSCm1hY2hpbmVLZXkiiwEKFVVwZGF0ZUluc3RhbmNlUmVxdWVzdBIwCgtpbnN0YW5jZV9pZBgBIAEoCUIP4
  j8MEgppbnN0YW5jZUlkUgppbnN0YW5jZUlkEkAKDWluc3RhbmNlX25hbWUYAiABKAlCG+I/DhIMaW5zdGFuY2VOYW1l+kIHcgUQA
  RjIAVIMaW5zdGFuY2VOYW1lIlsKFlVwZGF0ZUluc3RhbmNlUmVzcG9uc2USQQoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT
  2JqZWN0RGV0YWlsc0IM4j8JEgdkZXRhaWxzUgdkZXRhaWxzIlMKFVJlbW92ZUluc3RhbmNlUmVxdWVzdBI6CgtpbnN0YW5jZV9pZ
  BgBIAEoCUIZ4j8MEgppbnN0YW5jZUlk+kIHcgUQARjIAVIKaW5zdGFuY2VJZCJbChZSZW1vdmVJbnN0YW5jZVJlc3BvbnNlEkEKB
  2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZGV0YWlscyLKAQoVTGlzdElBT
  U1lbWJlcnNSZXF1ZXN0EjcKBXF1ZXJ5GAEgASgLMhUueml0YWRlbC52MS5MaXN0UXVlcnlCCuI/BxIFcXVlcnlSBXF1ZXJ5EjAKC
  2luc3RhbmNlX2lkGAIgASgJQg/iPwwSCmluc3RhbmNlSWRSCmluc3RhbmNlSWQSRgoHcXVlcmllcxgDIAMoCzIeLnppdGFkZWwub
  WVtYmVyLnYxLlNlYXJjaFF1ZXJ5QgziPwkSB3F1ZXJpZXNSB3F1ZXJpZXMimQEKFkxpc3RJQU1NZW1iZXJzUmVzcG9uc2USPwoHZ
  GV0YWlscxgBIAEoCzIXLnppdGFkZWwudjEuTGlzdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZGV0YWlscxI+CgZyZXN1bHQYAiADK
  AsyGS56aXRhZGVsLm1lbWJlci52MS5NZW1iZXJCC+I/CBIGcmVzdWx0UgZyZXN1bHQiTQoPR2V0VXNhZ2VSZXF1ZXN0EjoKC2luc
  3RhbmNlX2lkGAEgASgJQhniPwwSCmluc3RhbmNlSWT6QgdyBRABGMgBUgppbnN0YW5jZUlkIoAHCg9BZGRRdW90YVJlcXVlc3QSO
  goLaW5zdGFuY2VfaWQYASABKAlCGeI/DBIKaW5zdGFuY2VJZPpCB3IFEAEYyAFSCmluc3RhbmNlSWQSaQoEdW5pdBgCIAEoDjIWL
  nppdGFkZWwucXVvdGEudjEuVW5pdEI94j8GEgR1bml0kkEnMiV0aGUgdW5pdCBhIHF1b3RhIHNob3VsZCBiZSBpbXBvc2VkIG9u+
  kIHggEEEAEgAFIEdW5pdBLhAQoEZnJvbRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCsAHiPwYSBGZyb22SQZsBM
  np0aGUgc3RhcnRpbmcgdGltZSBmcm9tIHdoaWNoIHRoZSBjdXJyZW50IHF1b3RhIHBlcmlvZCBpcyBjYWxjdWxhdGVkIGZyb20uI
  FRoaXMgaXMgcmVsZXZhbnQgZm9yIHF1ZXJ5aW5nIHRoZSBjdXJyZW50IHVzYWdlLkodIjIwMTktMDQtMDFUMDg6NDU6MDAuMDAwM
  DAwWiL6QgWyAQIIAVIEZnJvbRJ7Cg5yZXNldF9pbnRlcnZhbBgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkI54j8PE
  g1yZXNldEludGVydmFskkEcMhp0aGUgcXVvdGEgcGVyaW9kcyBkdXJhdGlvbvpCBaoBAggBUg1yZXNldEludGVydmFsEkgKBmFtb
  3VudBgFIAEoBEIw4j8IEgZhbW91bnSSQRsyGXRoZSBxdW90YSBhbW91bnQgb2YgdW5pdHP6QgQyAiAAUgZhbW91bnQScgoFbGlta
  XQYBiABKAhCXOI/BxIFbGltaXSSQU8yTXdoZXRoZXIgWklUQURFTCBzaG91bGQgYmxvY2sgZnVydGhlciB1c2FnZSB3aGVuIHRoZ
  SBjb25maWd1cmVkIGFtb3VudCBpcyB1c2VkUgVsaW1pdBKmAQoNbm90aWZpY2F0aW9ucxgHIAMoCzIeLnppdGFkZWwucXVvdGEud
  jEuTm90aWZpY2F0aW9uQmDiPw8SDW5vdGlmaWNhdGlvbnOSQUsySXRoZSBoYW5kbGVycywgWklUQURFTCBleGVjdXRlcyB3aGVuI
  GNlcnRhaW4gcXVvdGEgcGVyY2VudGFnZXMgYXJlIHJlYWNoZWRSDW5vdGlmaWNhdGlvbnMiVQoQQWRkUXVvdGFSZXNwb25zZRJBC
  gdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2RldGFpbHMihwEKElJlbW92Z
  VF1b3RhUmVxdWVzdBI6CgtpbnN0YW5jZV9pZBgBIAEoCUIZ4j8MEgppbnN0YW5jZUlk+kIHcgUQARjIAVIKaW5zdGFuY2VJZBI1C
  gR1bml0GAIgASgOMhYueml0YWRlbC5xdW90YS52MS5Vbml0QgniPwYSBHVuaXRSBHVuaXQiWAoTUmVtb3ZlUXVvdGFSZXNwb25zZ
  RJBCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2RldGFpbHMiRAoTRXhpc
  3RzRG9tYWluUmVxdWVzdBItCgZkb21haW4YASABKAlCFeI/CBIGZG9tYWlu+kIHcgUQARjIAVIGZG9tYWluIjsKFEV4aXN0c0Rvb
  WFpblJlc3BvbnNlEiMKBmV4aXN0cxgBIAEoCEIL4j8IEgZleGlzdHNSBmV4aXN0cyK6AgoSTGlzdERvbWFpbnNSZXF1ZXN0EjoKC
  2luc3RhbmNlX2lkGAEgASgJQhniPwwSCmluc3RhbmNlSWT6QgdyBRABGMgBUgppbnN0YW5jZUlkEjcKBXF1ZXJ5GAIgASgLMhUue
  ml0YWRlbC52MS5MaXN0UXVlcnlCCuI/BxIFcXVlcnlSBXF1ZXJ5El8KDnNvcnRpbmdfY29sdW1uGAMgASgOMiQueml0YWRlbC5pb
  nN0YW5jZS52MS5Eb21haW5GaWVsZE5hbWVCEuI/DxINc29ydGluZ0NvbHVtblINc29ydGluZ0NvbHVtbhJOCgdxdWVyaWVzGAQgA
  ygLMiYueml0YWRlbC5pbnN0YW5jZS52MS5Eb21haW5TZWFyY2hRdWVyeUIM4j8JEgdxdWVyaWVzUgdxdWVyaWVzIvkBChNMaXN0R
  G9tYWluc1Jlc3BvbnNlEj8KB2RldGFpbHMYASABKAsyFy56aXRhZGVsLnYxLkxpc3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2Rld
  GFpbHMSXwoOc29ydGluZ19jb2x1bW4YAiABKA4yJC56aXRhZGVsLmluc3RhbmNlLnYxLkRvbWFpbkZpZWxkTmFtZUIS4j8PEg1zb
  3J0aW5nQ29sdW1uUg1zb3J0aW5nQ29sdW1uEkAKBnJlc3VsdBgDIAMoCzIbLnppdGFkZWwuaW5zdGFuY2UudjEuRG9tYWluQgviP
  wgSBnJlc3VsdFIGcmVzdWx0In0KEEFkZERvbWFpblJlcXVlc3QSOgoLaW5zdGFuY2VfaWQYASABKAlCGeI/DBIKaW5zdGFuY2VJZ
  PpCB3IFEAEYyAFSCmluc3RhbmNlSWQSLQoGZG9tYWluGAIgASgJQhXiPwgSBmRvbWFpbvpCB3IFEAEYyAFSBmRvbWFpbiJWChFBZ
  GREb21haW5SZXNwb25zZRJBCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB
  2RldGFpbHMigAEKE1JlbW92ZURvbWFpblJlcXVlc3QSOgoLaW5zdGFuY2VfaWQYASABKAlCGeI/DBIKaW5zdGFuY2VJZPpCB3IFE
  AEYyAFSCmluc3RhbmNlSWQSLQoGZG9tYWluGAIgASgJQhXiPwgSBmRvbWFpbvpCB3IFEAEYyAFSBmRvbWFpbiJZChRSZW1vdmVEb
  21haW5SZXNwb25zZRJBCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2Rld
  GFpbHMihAEKF1NldFByaW1hcnlEb21haW5SZXF1ZXN0EjoKC2luc3RhbmNlX2lkGAEgASgJQhniPwwSCmluc3RhbmNlSWT6QgdyB
  RABGMgBUgppbnN0YW5jZUlkEi0KBmRvbWFpbhgCIAEoCUIV4j8IEgZkb21haW76QgdyBRABGMgBUgZkb21haW4iXQoYU2V0UHJpb
  WFyeURvbWFpblJlc3BvbnNlEkEKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc
  1IHZGV0YWlscyKSAgoZQ2hhbmdlU3Vic2NyaXB0aW9uUmVxdWVzdBItCgZkb21haW4YASABKAlCFeI/CBIGZG9tYWlu+kIHcgUQA
  RjIAVIGZG9tYWluEkwKEXN1YnNjcmlwdGlvbl9uYW1lGAIgASgJQh/iPxISEHN1YnNjcmlwdGlvbk5hbWX6QgdyBRABGMgBUhBzd
  WJzY3JpcHRpb25OYW1lEjYKDXJlcXVlc3RfbGltaXQYAyABKARCEeI/DhIMcmVxdWVzdExpbWl0UgxyZXF1ZXN0TGltaXQSQAoRY
  WN0aW9uX21pbnNfbGltaXQYBCABKARCFOI/ERIPYWN0aW9uTWluc0xpbWl0Ug9hY3Rpb25NaW5zTGltaXQiXwoaQ2hhbmdlU3Vic
  2NyaXB0aW9uUmVzcG9uc2USQQoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlsc0IM4j8JEgdkZXRhaWxzU
  gdkZXRhaWxzIhIKEExpc3RWaWV3c1JlcXVlc3QiUQoRTGlzdFZpZXdzUmVzcG9uc2USPAoGcmVzdWx0GAEgAygLMhcueml0YWRlb
  C5zeXN0ZW0udjEuVmlld0IL4j8IEgZyZXN1bHRSBnJlc3VsdCLIAQoQQ2xlYXJWaWV3UmVxdWVzdBJICghkYXRhYmFzZRgBIAEoC
  UIs4j8KEghkYXRhYmFzZZJBEkoKImFkbWluYXBpInjIAYABAfpCB3IFEAEYyAFSCGRhdGFiYXNlEkwKCXZpZXdfbmFtZRgCIAEoC
  UIv4j8KEgh2aWV3TmFtZZJBFUoNImlhbV9tZW1iZXJzInjIAYABAfpCB3IFEAEYyAFSCHZpZXdOYW1lOhySQRkKF9IBCGRhdGFiY
  XNl0gEJdmlld19uYW1lIhMKEUNsZWFyVmlld1Jlc3BvbnNlIhkKF0xpc3RGYWlsZWRFdmVudHNSZXF1ZXN0Il8KGExpc3RGYWlsZ
  WRFdmVudHNSZXNwb25zZRJDCgZyZXN1bHQYASADKAsyHi56aXRhZGVsLnN5c3RlbS52MS5GYWlsZWRFdmVudEIL4j8IEgZyZXN1b
  HRSBnJlc3VsdCL2AgoYUmVtb3ZlRmFpbGVkRXZlbnRSZXF1ZXN0EkgKCGRhdGFiYXNlGAEgASgJQiziPwoSCGRhdGFiYXNlkkESS
  goiYWRtaW5hcGkieMgBgAEB+kIHcgUQARjIAVIIZGF0YWJhc2USTAoJdmlld19uYW1lGAIgASgJQi/iPwoSCHZpZXdOYW1lkkEVS
  g0iaWFtX21lbWJlcnMieMgBgAEB+kIHcgUQARjIAVIIdmlld05hbWUSSgoPZmFpbGVkX3NlcXVlbmNlGAMgASgEQiHiPxASDmZha
  WxlZFNlcXVlbmNlkkELSgkiOTgyMzc1OCJSDmZhaWxlZFNlcXVlbmNlEkYKC2luc3RhbmNlX2lkGAQgASgJQiXiPwwSCmluc3Rhb
  mNlSWSSQRNKESI4NDA0OTgwMzQ5MzA4NDAiUgppbnN0YW5jZUlkOi6SQSsKKdIBCGRhdGFiYXNl0gEJdmlld19uYW1l0gEPZmFpb
  GVkX3NlcXVlbmNlIhsKGVJlbW92ZUZhaWxlZEV2ZW50UmVzcG9uc2Ui0QQKBFZpZXcSOAoIZGF0YWJhc2UYASABKAlCHOI/ChIIZ
  GF0YWJhc2WSQQxKCiJhZG1pbmFwaSJSCGRhdGFiYXNlEjwKCXZpZXdfbmFtZRgCIAEoCUIf4j8KEgh2aWV3TmFtZZJBD0oNImlhb
  V9tZW1iZXJzIlIIdmlld05hbWUSUwoScHJvY2Vzc2VkX3NlcXVlbmNlGAMgASgEQiTiPxMSEXByb2Nlc3NlZFNlcXVlbmNlkkELS
  gkiOTgyMzc1OCJSEXByb2Nlc3NlZFNlcXVlbmNlEpsBCg9ldmVudF90aW1lc3RhbXAYBCABKAsyGi5nb29nbGUucHJvdG9idWYuV
  GltZXN0YW1wQlbiPxASDmV2ZW50VGltZXN0YW1wkkFAMh9UaGUgdGltZXN0YW1wIHRoZSBldmVudCBvY2N1cmVkSh0iMjAxOS0wN
  C0wMVQwODo0NTowMC4wMDAwMDBaIlIOZXZlbnRUaW1lc3RhbXASnAEKG2xhc3Rfc3VjY2Vzc2Z1bF9zcG9vbGVyX3J1bhgFIAEoC
  zIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCQeI/GhIYbGFzdFN1Y2Nlc3NmdWxTcG9vbGVyUnVukkEhMh9UaGUgdGltZXN0Y
  W1wIHRoZSBldmVudCBvY2N1cmVkUhhsYXN0U3VjY2Vzc2Z1bFNwb29sZXJSdW4SPwoIaW5zdGFuY2UYBiABKAlCI+I/ChIIaW5zd
  GFuY2WSQRNKESI4NDA0OTgwMzQ5MzA4NDAiUghpbnN0YW5jZSLwAwoLRmFpbGVkRXZlbnQSOAoIZGF0YWJhc2UYASABKAlCHOI/C
  hIIZGF0YWJhc2WSQQxKCiJhZG1pbmFwaSJSCGRhdGFiYXNlEjwKCXZpZXdfbmFtZRgCIAEoCUIf4j8KEgh2aWV3TmFtZZJBD0oNI
  mlhbV9tZW1iZXJzIlIIdmlld05hbWUSSgoPZmFpbGVkX3NlcXVlbmNlGAMgASgEQiHiPxASDmZhaWxlZFNlcXVlbmNlkkELSgkiO
  TgyMzc1OSJSDmZhaWxlZFNlcXVlbmNlEj4KDWZhaWx1cmVfY291bnQYBCABKARCGeI/DhIMZmFpbHVyZUNvdW50kkEFSgMiNSJSD
  GZhaWx1cmVDb3VudBJjCg1lcnJvcl9tZXNzYWdlGAUgASgJQj7iPw4SDGVycm9yTWVzc2FnZZJBKkooIklEPUVYQU1QLUlEM0VSI
  E1lc3NhZ2U9RXhhbXBsZSBtZXNzYWdlIlIMZXJyb3JNZXNzYWdlEngKC2xhc3RfZmFpbGVkGAYgASgLMhouZ29vZ2xlLnByb3RvY
  nVmLlRpbWVzdGFtcEI74j8MEgpsYXN0RmFpbGVkkkEpMidUaGUgdGltZXN0YW1wIHRoZSBmYWlsdXJlIGxhc3Qgb2NjdXJyZWRSC
  mxhc3RGYWlsZWQyghoKDVN5c3RlbVNlcnZpY2USrgEKB0hlYWx0aHoSIS56aXRhZGVsLnN5c3RlbS52MS5IZWFsdGh6UmVxdWVzd
  BoiLnppdGFkZWwuc3lzdGVtLnYxLkhlYWx0aHpSZXNwb25zZSJckkFJCgdHZW5lcmFsShgKAzIwMBIRCg9aSVRBREVMIHN0YXJ0Z
  WRKJAoHZGVmYXVsdBIZChdaSVRBREVMIE5PVCBzdGFydGVkIHlldILT5JMCChIIL2hlYWx0aHoSlAEKDUxpc3RJbnN0YW5jZXMSJ
  y56aXRhZGVsLnN5c3RlbS52MS5MaXN0SW5zdGFuY2VzUmVxdWVzdBooLnppdGFkZWwuc3lzdGVtLnYxLkxpc3RJbnN0YW5jZXNSZ
  XNwb25zZSIwgrUYDwoNYXV0aGVudGljYXRlZILT5JMCFzoBKiISL2luc3RhbmNlcy9fc2VhcmNoEpEBCgtHZXRJbnN0YW5jZRIlL
  nppdGFkZWwuc3lzdGVtLnYxLkdldEluc3RhbmNlUmVxdWVzdBomLnppdGFkZWwuc3lzdGVtLnYxLkdldEluc3RhbmNlUmVzcG9uc
  2UiM4K1GA8KDWF1dGhlbnRpY2F0ZWSC0+STAhoSGC9pbnN0YW5jZXMve2luc3RhbmNlX2lkfRKGAQoLQWRkSW5zdGFuY2USJS56a
  XRhZGVsLnN5c3RlbS52MS5BZGRJbnN0YW5jZVJlcXVlc3QaJi56aXRhZGVsLnN5c3RlbS52MS5BZGRJbnN0YW5jZVJlc3BvbnNlI
  iiCtRgPCg1hdXRoZW50aWNhdGVkgtPkkwIPOgEqIgovaW5zdGFuY2VzEp0BCg5VcGRhdGVJbnN0YW5jZRIoLnppdGFkZWwuc3lzd
  GVtLnYxLlVwZGF0ZUluc3RhbmNlUmVxdWVzdBopLnppdGFkZWwuc3lzdGVtLnYxLlVwZGF0ZUluc3RhbmNlUmVzcG9uc2UiNoK1G
  A8KDWF1dGhlbnRpY2F0ZWSC0+STAh06ASoaGC9pbnN0YW5jZXMve2luc3RhbmNlX2lkfRKXAQoOQ3JlYXRlSW5zdGFuY2USKC56a
  XRhZGVsLnN5c3RlbS52MS5DcmVhdGVJbnN0YW5jZVJlcXVlc3QaKS56aXRhZGVsLnN5c3RlbS52MS5DcmVhdGVJbnN0YW5jZVJlc
  3BvbnNlIjCCtRgPCg1hdXRoZW50aWNhdGVkgtPkkwIXOgEqIhIvaW5zdGFuY2VzL19jcmVhdGUSmgEKDlJlbW92ZUluc3RhbmNlE
  igueml0YWRlbC5zeXN0ZW0udjEuUmVtb3ZlSW5zdGFuY2VSZXF1ZXN0Gikueml0YWRlbC5zeXN0ZW0udjEuUmVtb3ZlSW5zdGFuY
  2VSZXNwb25zZSIzgrUYDwoNYXV0aGVudGljYXRlZILT5JMCGioYL2luc3RhbmNlcy97aW5zdGFuY2VfaWR9Eq0BCg5MaXN0SUFNT
  WVtYmVycxIoLnppdGFkZWwuc3lzdGVtLnYxLkxpc3RJQU1NZW1iZXJzUmVxdWVzdBopLnppdGFkZWwuc3lzdGVtLnYxLkxpc3RJQ
  U1NZW1iZXJzUmVzcG9uc2UiRoK1GA8KDWF1dGhlbnRpY2F0ZWSC0+STAi06ASoiKC9pbnN0YW5jZXMve2luc3RhbmNlX2lkfS9tZ
  W1iZXJzL19zZWFyY2gSmAEKDEV4aXN0c0RvbWFpbhImLnppdGFkZWwuc3lzdGVtLnYxLkV4aXN0c0RvbWFpblJlcXVlc3QaJy56a
  XRhZGVsLnN5c3RlbS52MS5FeGlzdHNEb21haW5SZXNwb25zZSI3grUYDwoNYXV0aGVudGljYXRlZILT5JMCHjoBKiIZL2RvbWFpb
  nMve2RvbWFpbn0vX2V4aXN0cxKkAQoLTGlzdERvbWFpbnMSJS56aXRhZGVsLnN5c3RlbS52MS5MaXN0RG9tYWluc1JlcXVlc3QaJ
  i56aXRhZGVsLnN5c3RlbS52MS5MaXN0RG9tYWluc1Jlc3BvbnNlIkaCtRgPCg1hdXRoZW50aWNhdGVkgtPkkwItOgEqIigvaW5zd
  GFuY2VzL3tpbnN0YW5jZV9pZH0vZG9tYWlucy9fc2VhcmNoEpYBCglBZGREb21haW4SIy56aXRhZGVsLnN5c3RlbS52MS5BZGREb
  21haW5SZXF1ZXN0GiQueml0YWRlbC5zeXN0ZW0udjEuQWRkRG9tYWluUmVzcG9uc2UiPoK1GA8KDWF1dGhlbnRpY2F0ZWSC0+STA
  iU6ASoiIC9pbnN0YW5jZXMve2luc3RhbmNlX2lkfS9kb21haW5zEqUBCgxSZW1vdmVEb21haW4SJi56aXRhZGVsLnN5c3RlbS52M
  S5SZW1vdmVEb21haW5SZXF1ZXN0Gicueml0YWRlbC5zeXN0ZW0udjEuUmVtb3ZlRG9tYWluUmVzcG9uc2UiRIK1GA8KDWF1dGhlb
  nRpY2F0ZWSC0+STAisqKS9pbnN0YW5jZXMve2luc3RhbmNlX2lkfS9kb21haW5zL3tkb21haW59ErgBChBTZXRQcmltYXJ5RG9tY
  WluEioueml0YWRlbC5zeXN0ZW0udjEuU2V0UHJpbWFyeURvbWFpblJlcXVlc3QaKy56aXRhZGVsLnN5c3RlbS52MS5TZXRQcmltY
  XJ5RG9tYWluUmVzcG9uc2UiS4K1GA8KDWF1dGhlbnRpY2F0ZWSC0+STAjI6ASoiLS9pbnN0YW5jZXMve2luc3RhbmNlX2lkfS9kb
  21haW5zL19zZXRfcHJpbWFyeRKzAQoJTGlzdFZpZXdzEiMueml0YWRlbC5zeXN0ZW0udjEuTGlzdFZpZXdzUmVxdWVzdBokLnppd
  GFkZWwuc3lzdGVtLnYxLkxpc3RWaWV3c1Jlc3BvbnNlIluSQSwKBXZpZXdzSiMKAzIwMBIcChpWaWV3cyBmb3IgcXVlcnkgb3Blc
  mF0aW9uc4K1GA8KDWF1dGhlbnRpY2F0ZWSC0+STAhM6ASoiDi92aWV3cy9fc2VhcmNoErEBCglDbGVhclZpZXcSIy56aXRhZGVsL
  nN5c3RlbS52MS5DbGVhclZpZXdSZXF1ZXN0GiQueml0YWRlbC5zeXN0ZW0udjEuQ2xlYXJWaWV3UmVzcG9uc2UiWZJBHgoFdmlld
  3NKFQoDMjAwEg4KDFZpZXcgY2xlYXJlZIK1GA8KDWF1dGhlbnRpY2F0ZWSC0+STAh8iHS92aWV3cy97ZGF0YWJhc2V9L3t2aWV3X
  25hbWV9EukBChBMaXN0RmFpbGVkRXZlbnRzEioueml0YWRlbC5zeXN0ZW0udjEuTGlzdEZhaWxlZEV2ZW50c1JlcXVlc3QaKy56a
  XRhZGVsLnN5c3RlbS52MS5MaXN0RmFpbGVkRXZlbnRzUmVzcG9uc2UifJJBRgoNZmFpbGVkIGV2ZW50c0o1CgMyMDASLgosRXZlb
  nRzIHdoaWNoIHdlcmUgbm90IHByb2Nlc3NlZCBieSB0aGUgdmlld3OCtRgPCg1hdXRoZW50aWNhdGVkgtPkkwIaOgEqIhUvZmFpb
  GVkZXZlbnRzL19zZWFyY2gSuQIKEVJlbW92ZUZhaWxlZEV2ZW50Eisueml0YWRlbC5zeXN0ZW0udjEuUmVtb3ZlRmFpbGVkRXZlb
  nRSZXF1ZXN0Giwueml0YWRlbC5zeXN0ZW0udjEuUmVtb3ZlRmFpbGVkRXZlbnRSZXNwb25zZSLIAZJBdAoNZmFpbGVkIGV2ZW50c
  0olCgMyMDASHgocRXZlbnRzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdEo8CgM0MDASNQoWZmFpbGVkIGV2ZW50IG5vdCBmb3VuZBIbC
  hkaFyMvZGVmaW5pdGlvbnMvcnBjU3RhdHVzgrUYDwoNYXV0aGVudGljYXRlZILT5JMCOCo2L2ZhaWxlZGV2ZW50cy97ZGF0YWJhc
  2V9L3t2aWV3X25hbWV9L3tmYWlsZWRfc2VxdWVuY2V9EpIBCghBZGRRdW90YRIiLnppdGFkZWwuc3lzdGVtLnYxLkFkZFF1b3RhU
  mVxdWVzdBojLnppdGFkZWwuc3lzdGVtLnYxLkFkZFF1b3RhUmVzcG9uc2UiPYK1GA8KDWF1dGhlbnRpY2F0ZWSC0+STAiQ6ASoiH
  y9pbnN0YW5jZXMve2luc3RhbmNlX2lkfS9xdW90YXMSnwEKC1JlbW92ZVF1b3RhEiUueml0YWRlbC5zeXN0ZW0udjEuUmVtb3ZlU
  XVvdGFSZXF1ZXN0GiYueml0YWRlbC5zeXN0ZW0udjEuUmVtb3ZlUXVvdGFSZXNwb25zZSJBgrUYDwoNYXV0aGVudGljYXRlZILT5
  JMCKComL2luc3RhbmNlcy97aW5zdGFuY2VfaWR9L3F1b3Rhcy97dW5pdH1CxAYKFWNvbS56aXRhZGVsLnN5c3RlbS52MUILU3lzd
  GVtUHJvdG9QAVoqZ2l0aHViLmNvbS96aXRhZGVsL3ppdGFkZWwvcGtnL2dycGMvc3lzdGVtogIDWlNYqgIRWml0YWRlbC5TeXN0Z
  W0uVjHKAhFaaXRhZGVsXFN5c3RlbVxWMeICHVppdGFkZWxcU3lzdGVtXFYxXEdQQk1ldGFkYXRh6gITWml0YWRlbDo6U3lzdGVtO
  jpWMZJBigUS2gEKClN5c3RlbSBBUEkSU1RoaXMgQVBJIGlzIGludGVuZGVkIHRvIGNvbmZpZ3VyZSBhbmQgbWFuYWdlIHRoZSBka
  WZmZXJlbnQgdGVuYW50cyB3aGl0aGluIFpJVEFERUwuIi4KB1pJVEFERUwSE2h0dHBzOi8veml0YWRlbC5jb20aDmhpQHppdGFkZ
  WwuY29tKkIKCkFwYWNoZSAyLjASNGh0dHBzOi8vZ2l0aHViLmNvbS96aXRhZGVsL3ppdGFkZWwvYmxvYi9tYWluL0xJQ0VOU0UyA
  zEuMBoPJFpJVEFERUxfRE9NQUlOIgovc3lzdGVtL3YxKgICATIQYXBwbGljYXRpb24vanNvbjIQYXBwbGljYXRpb24vZ3JwYzIaY
  XBwbGljYXRpb24vZ3JwYy13ZWIrcHJvdG86EGFwcGxpY2F0aW9uL2pzb246EGFwcGxpY2F0aW9uL2dycGM6GmFwcGxpY2F0aW9uL
  2dycGMtd2ViK3Byb3RvUm0KAzQwMxJmCkdSZXR1cm5lZCB3aGVuIHRoZSB1c2VyIGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0b
  yBhY2Nlc3MgdGhlIHJlc291cmNlLhIbChkaFyMvZGVmaW5pdGlvbnMvcnBjU3RhdHVzUlAKAzQwNBJJCipSZXR1cm5lZCB3aGVuI
  HRoZSByZXNvdXJjZSBkb2VzIG5vdCBleGlzdC4SGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c2oJCgdHZW5lcmFscj4KIkRld
  GFpbGVkIGluZm9ybWF0aW9uIGFib3V0IFpJVEFERUwSGGh0dHBzOi8veml0YWRlbC5jb20vZG9jc2IGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.zitadel.v1.`object`.ObjectProto.javaDescriptor,
      com.zitadel.v1.options.OptionsProto.javaDescriptor,
      com.zitadel.instance.v1.instance.InstanceProto.javaDescriptor,
      com.zitadel.member.v1.member.MemberProto.javaDescriptor,
      com.zitadel.quota.v1.quota.QuotaProto.javaDescriptor,
      com.zitadel.authn.v1.auth_n_key.AuthNKeyProto.javaDescriptor,
      com.google.api.annotations.AnnotationsProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.duration.DurationProto.javaDescriptor,
      com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto.javaDescriptor,
      com.validate.validate.ValidateProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}