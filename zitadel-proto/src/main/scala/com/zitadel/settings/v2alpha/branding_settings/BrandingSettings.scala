// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.settings.v2alpha.branding_settings

/** @param hideLoginNameSuffix
  *   hides the org suffix on the login form if the scope &92;"urn:zitadel:iam:org:domain:primary:{domainname}&92;" is set
  * @param resourceOwnerType
  *   resource_owner_type returns if the setting is managed on the organization or on the instance
  */
@SerialVersionUID(0L)
final case class BrandingSettings(
    lightTheme: _root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme] = _root_.scala.None,
    darkTheme: _root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme] = _root_.scala.None,
    fontUrl: _root_.scala.Predef.String = "",
    hideLoginNameSuffix: _root_.scala.Boolean = false,
    disableWatermark: _root_.scala.Boolean = false,
    resourceOwnerType: com.zitadel.settings.v2alpha.settings.ResourceOwnerType = com.zitadel.settings.v2alpha.settings.ResourceOwnerType.RESOURCE_OWNER_TYPE_UNSPECIFIED,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BrandingSettings] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (lightTheme.isDefined) {
        val __value = lightTheme.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (darkTheme.isDefined) {
        val __value = darkTheme.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = fontUrl
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = hideLoginNameSuffix
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = disableWatermark
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = resourceOwnerType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      lightTheme.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      darkTheme.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = fontUrl
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = hideLoginNameSuffix
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = disableWatermark
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = resourceOwnerType.value
        if (__v != 0) {
          _output__.writeEnum(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getLightTheme: com.zitadel.settings.v2alpha.branding_settings.Theme = lightTheme.getOrElse(com.zitadel.settings.v2alpha.branding_settings.Theme.defaultInstance)
    def clearLightTheme: BrandingSettings = copy(lightTheme = _root_.scala.None)
    def withLightTheme(__v: com.zitadel.settings.v2alpha.branding_settings.Theme): BrandingSettings = copy(lightTheme = Option(__v))
    def getDarkTheme: com.zitadel.settings.v2alpha.branding_settings.Theme = darkTheme.getOrElse(com.zitadel.settings.v2alpha.branding_settings.Theme.defaultInstance)
    def clearDarkTheme: BrandingSettings = copy(darkTheme = _root_.scala.None)
    def withDarkTheme(__v: com.zitadel.settings.v2alpha.branding_settings.Theme): BrandingSettings = copy(darkTheme = Option(__v))
    def withFontUrl(__v: _root_.scala.Predef.String): BrandingSettings = copy(fontUrl = __v)
    def withHideLoginNameSuffix(__v: _root_.scala.Boolean): BrandingSettings = copy(hideLoginNameSuffix = __v)
    def withDisableWatermark(__v: _root_.scala.Boolean): BrandingSettings = copy(disableWatermark = __v)
    def withResourceOwnerType(__v: com.zitadel.settings.v2alpha.settings.ResourceOwnerType): BrandingSettings = copy(resourceOwnerType = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => lightTheme.orNull
        case 2 => darkTheme.orNull
        case 3 => {
          val __t = fontUrl
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = hideLoginNameSuffix
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = disableWatermark
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = resourceOwnerType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => lightTheme.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => darkTheme.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(fontUrl)
        case 4 => _root_.scalapb.descriptors.PBoolean(hideLoginNameSuffix)
        case 5 => _root_.scalapb.descriptors.PBoolean(disableWatermark)
        case 6 => _root_.scalapb.descriptors.PEnum(resourceOwnerType.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.settings.v2alpha.branding_settings.BrandingSettings.type = com.zitadel.settings.v2alpha.branding_settings.BrandingSettings
    // @@protoc_insertion_point(GeneratedMessage[zitadel.settings.v2alpha.BrandingSettings])
}

object BrandingSettings extends scalapb.GeneratedMessageCompanion[com.zitadel.settings.v2alpha.branding_settings.BrandingSettings] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.settings.v2alpha.branding_settings.BrandingSettings] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.settings.v2alpha.branding_settings.BrandingSettings = {
    var __lightTheme: _root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme] = _root_.scala.None
    var __darkTheme: _root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme] = _root_.scala.None
    var __fontUrl: _root_.scala.Predef.String = ""
    var __hideLoginNameSuffix: _root_.scala.Boolean = false
    var __disableWatermark: _root_.scala.Boolean = false
    var __resourceOwnerType: com.zitadel.settings.v2alpha.settings.ResourceOwnerType = com.zitadel.settings.v2alpha.settings.ResourceOwnerType.RESOURCE_OWNER_TYPE_UNSPECIFIED
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __lightTheme = Option(__lightTheme.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.settings.v2alpha.branding_settings.Theme](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __darkTheme = Option(__darkTheme.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.settings.v2alpha.branding_settings.Theme](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __fontUrl = _input__.readStringRequireUtf8()
        case 32 =>
          __hideLoginNameSuffix = _input__.readBool()
        case 40 =>
          __disableWatermark = _input__.readBool()
        case 48 =>
          __resourceOwnerType = com.zitadel.settings.v2alpha.settings.ResourceOwnerType.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.settings.v2alpha.branding_settings.BrandingSettings(
        lightTheme = __lightTheme,
        darkTheme = __darkTheme,
        fontUrl = __fontUrl,
        hideLoginNameSuffix = __hideLoginNameSuffix,
        disableWatermark = __disableWatermark,
        resourceOwnerType = __resourceOwnerType,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.settings.v2alpha.branding_settings.BrandingSettings] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.settings.v2alpha.branding_settings.BrandingSettings(
        lightTheme = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme]]),
        darkTheme = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme]]),
        fontUrl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        hideLoginNameSuffix = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        disableWatermark = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        resourceOwnerType = com.zitadel.settings.v2alpha.settings.ResourceOwnerType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.zitadel.settings.v2alpha.settings.ResourceOwnerType.RESOURCE_OWNER_TYPE_UNSPECIFIED.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BrandingSettingsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BrandingSettingsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zitadel.settings.v2alpha.branding_settings.Theme
      case 2 => __out = com.zitadel.settings.v2alpha.branding_settings.Theme
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 6 => com.zitadel.settings.v2alpha.settings.ResourceOwnerType
    }
  }
  lazy val defaultInstance = com.zitadel.settings.v2alpha.branding_settings.BrandingSettings(
    lightTheme = _root_.scala.None,
    darkTheme = _root_.scala.None,
    fontUrl = "",
    hideLoginNameSuffix = false,
    disableWatermark = false,
    resourceOwnerType = com.zitadel.settings.v2alpha.settings.ResourceOwnerType.RESOURCE_OWNER_TYPE_UNSPECIFIED
  )
  implicit class BrandingSettingsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.settings.v2alpha.branding_settings.BrandingSettings]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.settings.v2alpha.branding_settings.BrandingSettings](_l) {
    def lightTheme: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.settings.v2alpha.branding_settings.Theme] = field(_.getLightTheme)((c_, f_) => c_.copy(lightTheme = Option(f_)))
    def optionalLightTheme: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme]] = field(_.lightTheme)((c_, f_) => c_.copy(lightTheme = f_))
    def darkTheme: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.settings.v2alpha.branding_settings.Theme] = field(_.getDarkTheme)((c_, f_) => c_.copy(darkTheme = Option(f_)))
    def optionalDarkTheme: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme]] = field(_.darkTheme)((c_, f_) => c_.copy(darkTheme = f_))
    def fontUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fontUrl)((c_, f_) => c_.copy(fontUrl = f_))
    def hideLoginNameSuffix: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hideLoginNameSuffix)((c_, f_) => c_.copy(hideLoginNameSuffix = f_))
    def disableWatermark: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.disableWatermark)((c_, f_) => c_.copy(disableWatermark = f_))
    def resourceOwnerType: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.settings.v2alpha.settings.ResourceOwnerType] = field(_.resourceOwnerType)((c_, f_) => c_.copy(resourceOwnerType = f_))
  }
  final val LIGHT_THEME_FIELD_NUMBER = 1
  final val DARK_THEME_FIELD_NUMBER = 2
  final val FONT_URL_FIELD_NUMBER = 3
  final val HIDE_LOGIN_NAME_SUFFIX_FIELD_NUMBER = 4
  final val DISABLE_WATERMARK_FIELD_NUMBER = 5
  final val RESOURCE_OWNER_TYPE_FIELD_NUMBER = 6
  def of(
    lightTheme: _root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme],
    darkTheme: _root_.scala.Option[com.zitadel.settings.v2alpha.branding_settings.Theme],
    fontUrl: _root_.scala.Predef.String,
    hideLoginNameSuffix: _root_.scala.Boolean,
    disableWatermark: _root_.scala.Boolean,
    resourceOwnerType: com.zitadel.settings.v2alpha.settings.ResourceOwnerType
  ): _root_.com.zitadel.settings.v2alpha.branding_settings.BrandingSettings = _root_.com.zitadel.settings.v2alpha.branding_settings.BrandingSettings(
    lightTheme,
    darkTheme,
    fontUrl,
    hideLoginNameSuffix,
    disableWatermark,
    resourceOwnerType
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.settings.v2alpha.BrandingSettings])
}
