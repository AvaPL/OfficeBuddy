// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.project.v1.project

@SerialVersionUID(0L)
final case class GrantedProject(
    grantId: _root_.scala.Predef.String = "",
    grantedOrgId: _root_.scala.Predef.String = "",
    grantedOrgName: _root_.scala.Predef.String = "",
    grantedRoleKeys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    state: com.zitadel.project.v1.project.ProjectGrantState = com.zitadel.project.v1.project.ProjectGrantState.PROJECT_GRANT_STATE_UNSPECIFIED,
    projectId: _root_.scala.Predef.String = "",
    projectName: _root_.scala.Predef.String = "",
    projectOwnerId: _root_.scala.Predef.String = "",
    projectOwnerName: _root_.scala.Predef.String = "",
    details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GrantedProject] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = grantId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = grantedOrgId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = grantedOrgName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      grantedRoleKeys.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      
      {
        val __value = state.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, __value)
        }
      };
      
      {
        val __value = projectId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = projectName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = projectOwnerId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = projectOwnerName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      if (details.isDefined) {
        val __value = details.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = grantId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = grantedOrgId
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = grantedOrgName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      grantedRoleKeys.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      {
        val __v = state.value
        if (__v != 0) {
          _output__.writeEnum(5, __v)
        }
      };
      {
        val __v = projectId
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = projectName
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = projectOwnerId
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = projectOwnerName
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      details.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withGrantId(__v: _root_.scala.Predef.String): GrantedProject = copy(grantId = __v)
    def withGrantedOrgId(__v: _root_.scala.Predef.String): GrantedProject = copy(grantedOrgId = __v)
    def withGrantedOrgName(__v: _root_.scala.Predef.String): GrantedProject = copy(grantedOrgName = __v)
    def clearGrantedRoleKeys = copy(grantedRoleKeys = _root_.scala.Seq.empty)
    def addGrantedRoleKeys(__vs: _root_.scala.Predef.String *): GrantedProject = addAllGrantedRoleKeys(__vs)
    def addAllGrantedRoleKeys(__vs: Iterable[_root_.scala.Predef.String]): GrantedProject = copy(grantedRoleKeys = grantedRoleKeys ++ __vs)
    def withGrantedRoleKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): GrantedProject = copy(grantedRoleKeys = __v)
    def withState(__v: com.zitadel.project.v1.project.ProjectGrantState): GrantedProject = copy(state = __v)
    def withProjectId(__v: _root_.scala.Predef.String): GrantedProject = copy(projectId = __v)
    def withProjectName(__v: _root_.scala.Predef.String): GrantedProject = copy(projectName = __v)
    def withProjectOwnerId(__v: _root_.scala.Predef.String): GrantedProject = copy(projectOwnerId = __v)
    def withProjectOwnerName(__v: _root_.scala.Predef.String): GrantedProject = copy(projectOwnerName = __v)
    def getDetails: com.zitadel.v1.`object`.ObjectDetails = details.getOrElse(com.zitadel.v1.`object`.ObjectDetails.defaultInstance)
    def clearDetails: GrantedProject = copy(details = _root_.scala.None)
    def withDetails(__v: com.zitadel.v1.`object`.ObjectDetails): GrantedProject = copy(details = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = grantId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = grantedOrgId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = grantedOrgName
          if (__t != "") __t else null
        }
        case 4 => grantedRoleKeys
        case 5 => {
          val __t = state.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 6 => {
          val __t = projectId
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = projectName
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = projectOwnerId
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = projectOwnerName
          if (__t != "") __t else null
        }
        case 10 => details.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(grantId)
        case 2 => _root_.scalapb.descriptors.PString(grantedOrgId)
        case 3 => _root_.scalapb.descriptors.PString(grantedOrgName)
        case 4 => _root_.scalapb.descriptors.PRepeated(grantedRoleKeys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
        case 6 => _root_.scalapb.descriptors.PString(projectId)
        case 7 => _root_.scalapb.descriptors.PString(projectName)
        case 8 => _root_.scalapb.descriptors.PString(projectOwnerId)
        case 9 => _root_.scalapb.descriptors.PString(projectOwnerName)
        case 10 => details.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.project.v1.project.GrantedProject.type = com.zitadel.project.v1.project.GrantedProject
    // @@protoc_insertion_point(GeneratedMessage[zitadel.project.v1.GrantedProject])
}

object GrantedProject extends scalapb.GeneratedMessageCompanion[com.zitadel.project.v1.project.GrantedProject] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.project.v1.project.GrantedProject] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.project.v1.project.GrantedProject = {
    var __grantId: _root_.scala.Predef.String = ""
    var __grantedOrgId: _root_.scala.Predef.String = ""
    var __grantedOrgName: _root_.scala.Predef.String = ""
    val __grantedRoleKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __state: com.zitadel.project.v1.project.ProjectGrantState = com.zitadel.project.v1.project.ProjectGrantState.PROJECT_GRANT_STATE_UNSPECIFIED
    var __projectId: _root_.scala.Predef.String = ""
    var __projectName: _root_.scala.Predef.String = ""
    var __projectOwnerId: _root_.scala.Predef.String = ""
    var __projectOwnerName: _root_.scala.Predef.String = ""
    var __details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __grantId = _input__.readStringRequireUtf8()
        case 18 =>
          __grantedOrgId = _input__.readStringRequireUtf8()
        case 26 =>
          __grantedOrgName = _input__.readStringRequireUtf8()
        case 34 =>
          __grantedRoleKeys += _input__.readStringRequireUtf8()
        case 40 =>
          __state = com.zitadel.project.v1.project.ProjectGrantState.fromValue(_input__.readEnum())
        case 50 =>
          __projectId = _input__.readStringRequireUtf8()
        case 58 =>
          __projectName = _input__.readStringRequireUtf8()
        case 66 =>
          __projectOwnerId = _input__.readStringRequireUtf8()
        case 74 =>
          __projectOwnerName = _input__.readStringRequireUtf8()
        case 82 =>
          __details = Option(__details.fold(_root_.scalapb.LiteParser.readMessage[com.zitadel.v1.`object`.ObjectDetails](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.project.v1.project.GrantedProject(
        grantId = __grantId,
        grantedOrgId = __grantedOrgId,
        grantedOrgName = __grantedOrgName,
        grantedRoleKeys = __grantedRoleKeys.result(),
        state = __state,
        projectId = __projectId,
        projectName = __projectName,
        projectOwnerId = __projectOwnerId,
        projectOwnerName = __projectOwnerName,
        details = __details,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.project.v1.project.GrantedProject] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.project.v1.project.GrantedProject(
        grantId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        grantedOrgId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        grantedOrgName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        grantedRoleKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        state = com.zitadel.project.v1.project.ProjectGrantState.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.zitadel.project.v1.project.ProjectGrantState.PROJECT_GRANT_STATE_UNSPECIFIED.scalaValueDescriptor).number),
        projectId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        projectName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        projectOwnerId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        projectOwnerName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        details = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProjectProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProjectProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 10 => __out = com.zitadel.v1.`object`.ObjectDetails
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => com.zitadel.project.v1.project.ProjectGrantState
    }
  }
  lazy val defaultInstance = com.zitadel.project.v1.project.GrantedProject(
    grantId = "",
    grantedOrgId = "",
    grantedOrgName = "",
    grantedRoleKeys = _root_.scala.Seq.empty,
    state = com.zitadel.project.v1.project.ProjectGrantState.PROJECT_GRANT_STATE_UNSPECIFIED,
    projectId = "",
    projectName = "",
    projectOwnerId = "",
    projectOwnerName = "",
    details = _root_.scala.None
  )
  implicit class GrantedProjectLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.project.v1.project.GrantedProject]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.project.v1.project.GrantedProject](_l) {
    def grantId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.grantId)((c_, f_) => c_.copy(grantId = f_))
    def grantedOrgId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.grantedOrgId)((c_, f_) => c_.copy(grantedOrgId = f_))
    def grantedOrgName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.grantedOrgName)((c_, f_) => c_.copy(grantedOrgName = f_))
    def grantedRoleKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.grantedRoleKeys)((c_, f_) => c_.copy(grantedRoleKeys = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.project.v1.project.ProjectGrantState] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def projectId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.projectId)((c_, f_) => c_.copy(projectId = f_))
    def projectName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.projectName)((c_, f_) => c_.copy(projectName = f_))
    def projectOwnerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.projectOwnerId)((c_, f_) => c_.copy(projectOwnerId = f_))
    def projectOwnerName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.projectOwnerName)((c_, f_) => c_.copy(projectOwnerName = f_))
    def details: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.v1.`object`.ObjectDetails] = field(_.getDetails)((c_, f_) => c_.copy(details = Option(f_)))
    def optionalDetails: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails]] = field(_.details)((c_, f_) => c_.copy(details = f_))
  }
  final val GRANT_ID_FIELD_NUMBER = 1
  final val GRANTED_ORG_ID_FIELD_NUMBER = 2
  final val GRANTED_ORG_NAME_FIELD_NUMBER = 3
  final val GRANTED_ROLE_KEYS_FIELD_NUMBER = 4
  final val STATE_FIELD_NUMBER = 5
  final val PROJECT_ID_FIELD_NUMBER = 6
  final val PROJECT_NAME_FIELD_NUMBER = 7
  final val PROJECT_OWNER_ID_FIELD_NUMBER = 8
  final val PROJECT_OWNER_NAME_FIELD_NUMBER = 9
  final val DETAILS_FIELD_NUMBER = 10
  def of(
    grantId: _root_.scala.Predef.String,
    grantedOrgId: _root_.scala.Predef.String,
    grantedOrgName: _root_.scala.Predef.String,
    grantedRoleKeys: _root_.scala.Seq[_root_.scala.Predef.String],
    state: com.zitadel.project.v1.project.ProjectGrantState,
    projectId: _root_.scala.Predef.String,
    projectName: _root_.scala.Predef.String,
    projectOwnerId: _root_.scala.Predef.String,
    projectOwnerName: _root_.scala.Predef.String,
    details: _root_.scala.Option[com.zitadel.v1.`object`.ObjectDetails]
  ): _root_.com.zitadel.project.v1.project.GrantedProject = _root_.com.zitadel.project.v1.project.GrantedProject(
    grantId,
    grantedOrgId,
    grantedOrgName,
    grantedRoleKeys,
    state,
    projectId,
    projectName,
    projectOwnerId,
    projectOwnerName,
    details
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.project.v1.GrantedProject])
}
