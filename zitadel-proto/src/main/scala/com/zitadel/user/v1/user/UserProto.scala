// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.user.v1.user

object UserProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.zitadel.v1.`object`.ObjectProto,
    com.validate.validate.ValidateProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.zitadel.user.v1.user.User,
      com.zitadel.user.v1.user.Human,
      com.zitadel.user.v1.user.Machine,
      com.zitadel.user.v1.user.Profile,
      com.zitadel.user.v1.user.Email,
      com.zitadel.user.v1.user.Phone,
      com.zitadel.user.v1.user.SearchQuery,
      com.zitadel.user.v1.user.UserNameQuery,
      com.zitadel.user.v1.user.FirstNameQuery,
      com.zitadel.user.v1.user.LastNameQuery,
      com.zitadel.user.v1.user.NickNameQuery,
      com.zitadel.user.v1.user.DisplayNameQuery,
      com.zitadel.user.v1.user.EmailQuery,
      com.zitadel.user.v1.user.LoginNameQuery,
      com.zitadel.user.v1.user.StateQuery,
      com.zitadel.user.v1.user.TypeQuery,
      com.zitadel.user.v1.user.AuthFactor,
      com.zitadel.user.v1.user.AuthFactorOTP,
      com.zitadel.user.v1.user.AuthFactorU2F,
      com.zitadel.user.v1.user.WebAuthNKey,
      com.zitadel.user.v1.user.WebAuthNVerification,
      com.zitadel.user.v1.user.WebAuthNToken,
      com.zitadel.user.v1.user.Membership,
      com.zitadel.user.v1.user.MembershipQuery,
      com.zitadel.user.v1.user.MembershipOrgQuery,
      com.zitadel.user.v1.user.MembershipProjectQuery,
      com.zitadel.user.v1.user.MembershipProjectGrantQuery,
      com.zitadel.user.v1.user.MembershipIAMQuery,
      com.zitadel.user.v1.user.Session,
      com.zitadel.user.v1.user.RefreshToken,
      com.zitadel.user.v1.user.PersonalAccessToken,
      com.zitadel.user.v1.user.UserGrant,
      com.zitadel.user.v1.user.UserGrantQuery,
      com.zitadel.user.v1.user.UserGrantProjectIDQuery,
      com.zitadel.user.v1.user.UserGrantUserIDQuery,
      com.zitadel.user.v1.user.UserGrantWithGrantedQuery,
      com.zitadel.user.v1.user.UserGrantRoleKeyQuery,
      com.zitadel.user.v1.user.UserGrantProjectGrantIDQuery,
      com.zitadel.user.v1.user.UserGrantUserNameQuery,
      com.zitadel.user.v1.user.UserGrantFirstNameQuery,
      com.zitadel.user.v1.user.UserGrantLastNameQuery,
      com.zitadel.user.v1.user.UserGrantEmailQuery,
      com.zitadel.user.v1.user.UserGrantOrgNameQuery,
      com.zitadel.user.v1.user.UserGrantOrgDomainQuery,
      com.zitadel.user.v1.user.UserGrantProjectNameQuery,
      com.zitadel.user.v1.user.UserGrantDisplayNameQuery,
      com.zitadel.user.v1.user.UserGrantUserTypeQuery
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChJ6aXRhZGVsL3VzZXIucHJvdG8SD3ppdGFkZWwudXNlci52MRoUeml0YWRlbC9vYmplY3QucHJvdG8aF3ZhbGlkYXRlL3Zhb
  GlkYXRlLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGi5wcm90b2MtZ2VuLW9wZW5hcGl2Mi9vcHRpb25zL
  2Fubm90YXRpb25zLnByb3RvIq8FCgRVc2VyEi8KAmlkGAEgASgJQh/iPwQSAmlkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQiUgJpZ
  BJBCgdkZXRhaWxzGAIgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2RldGFpbHMSWgoFc3Rhd
  GUYAyABKA4yGi56aXRhZGVsLnVzZXIudjEuVXNlclN0YXRlQijiPwcSBXN0YXRlkkEbMhljdXJyZW50IHN0YXRlIG9mIHRoZSB1c
  2VyUgVzdGF0ZRI9Cgl1c2VyX25hbWUYBCABKAlCIOI/ChIIdXNlck5hbWWSQRBKDiJnaWdpLWdpcmFmZmUiUgh1c2VyTmFtZRJkC
  gtsb2dpbl9uYW1lcxgFIAMoCUJD4j8MEgpsb2dpbk5hbWVzkkExSi9bImdpZ2lAeml0YWRlbC5jb20iLCAiZ2lnaUB6aXRhZGVsL
  nppdGFkZWwuY2giXVIKbG9naW5OYW1lcxJgChRwcmVmZXJyZWRfbG9naW5fbmFtZRgGIAEoCUIu4j8UEhJwcmVmZXJyZWRMb2dpb
  k5hbWWSQRRKEiJnaWdpQHppdGFkZWwuY29tIlIScHJlZmVycmVkTG9naW5OYW1lEl8KBWh1bWFuGAcgASgLMhYueml0YWRlbC51c
  2VyLnYxLkh1bWFuQi/iPwcSBWh1bWFukkEiMiBvbmUgb2YgdHlwZSB1c2UgaHVtYW4gb3IgbWFjaGluZUgAUgVodW1hbhJnCgdtY
  WNoaW5lGAggASgLMhgueml0YWRlbC51c2VyLnYxLk1hY2hpbmVCMeI/CRIHbWFjaGluZZJBIjIgb25lIG9mIHR5cGUgdXNlIGh1b
  WFuIG9yIG1hY2hpbmVIAFIHbWFjaGluZUIGCgR0eXBlIr0BCgVIdW1hbhJACgdwcm9maWxlGAEgASgLMhgueml0YWRlbC51c2VyL
  nYxLlByb2ZpbGVCDOI/CRIHcHJvZmlsZVIHcHJvZmlsZRI4CgVlbWFpbBgCIAEoCzIWLnppdGFkZWwudXNlci52MS5FbWFpbEIK4
  j8HEgVlbWFpbFIFZW1haWwSOAoFcGhvbmUYAyABKAsyFi56aXRhZGVsLnVzZXIudjEuUGhvbmVCCuI/BxIFcGhvbmVSBXBob25lI
  sgCCgdNYWNoaW5lEisKBG5hbWUYASABKAlCF+I/BhIEbmFtZZJBC0oJInppdGFkZWwiUgRuYW1lEk0KC2Rlc2NyaXB0aW9uGAIgA
  SgJQiviPw0SC2Rlc2NyaXB0aW9ukkEYShYiVGhlIG9uZSBhbmQgb25seSBJQU0iUgtkZXNjcmlwdGlvbhI4CgpoYXNfc2VjcmV0G
  AMgASgIQhniPwsSCWhhc1NlY3JldJJBCEoGInRydWUiUgloYXNTZWNyZXQShgEKEWFjY2Vzc190b2tlbl90eXBlGAQgASgOMiAue
  ml0YWRlbC51c2VyLnYxLkFjY2Vzc1Rva2VuVHlwZUI44j8REg9hY2Nlc3NUb2tlblR5cGWSQSEyH1R5cGUgb2YgYWNjZXNzIHRva
  2VuIHRvIHJlY2VpdmVSD2FjY2Vzc1Rva2VuVHlwZSLJBQoHUHJvZmlsZRI4CgpmaXJzdF9uYW1lGAEgASgJQhniPwsSCWZpcnN0T
  mFtZZJBCEoGIkdpZ2kiUglmaXJzdE5hbWUSOAoJbGFzdF9uYW1lGAIgASgJQhviPwoSCGxhc3ROYW1lkkELSgkiR2lyYWZmZSJSC
  Gxhc3ROYW1lEj0KCW5pY2tfbmFtZRgDIAEoCUIg4j8KEghuaWNrTmFtZZJBEEoOImdpZ2ktZ2lyYWZmZSJSCG5pY2tOYW1lEqIBC
  gxkaXNwbGF5X25hbWUYBCABKAlCf+I/DRILZGlzcGxheU5hbWWSQWwyWmEgdXNlciBjYW4gc2V0IGhpcyBkaXNwbGF5IG5hbWUsI
  GlmIG5vdGhpbmcgaXMgc2V0IFpJVEFERUwgY29tcHV0ZXMgImZpcnN0X25hbWUgbGFzdF9uYW1lIkoOIkdpZ2kgR2lyYWZmZSJSC
  2Rpc3BsYXlOYW1lEocBChJwcmVmZXJyZWRfbGFuZ3VhZ2UYBSABKAlCWOI/ExIRcHJlZmVycmVkTGFuZ3VhZ2WSQT8yN2xhbmd1Y
  WdlIHRhZyBhbmFsb2cgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMwNjZKBCJlbiJSEXByZWZlcnJlZExhbmd1YWdlE
  lgKBmdlbmRlchgGIAEoDjIXLnppdGFkZWwudXNlci52MS5HZW5kZXJCJ+I/CBIGZ2VuZGVykkEZMhd0aGUgZ2VuZGVyIG9mIHRoZ
  SBodW1hblIGZ2VuZGVyEoEBCgphdmF0YXJfdXJsGAcgASgJQmLiPwsSCWF2YXRhclVybJJBUTIWYXZhdGFyIFVSTCBvZiB0aGUgd
  XNlcko3Imh0dHBzOi8vYXBpLnppdGFkZWwuY2gvYXNzZXRzL3YxL2F2YXRhci0zMjQzMmpraDRrajMyIlIJYXZhdGFyVXJsIrACC
  gVFbWFpbBKNAQoFZW1haWwYASABKAlCd+I/BxIFZW1haWySQWoyVGVtYWlsIGFkZHJlc3Mgb2YgdGhlIHVzZXIuIChzcGVjOiBod
  HRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuNC4xKUoSImdpZ2lAeml0YWRlbC5jb20iUgVlbWFpb
  BKWAQoRaXNfZW1haWxfdmVyaWZpZWQYAiABKAhCauI/ERIPaXNFbWFpbFZlcmlmaWVkkkFTMlFJcyB0cnVlIGlmIHRoZSB1c2VyI
  HZlcmlmaWVkIGhpcyBlbWFpbCBvciBpZiB0aGUgZW1haWwgaXMgbWFuYWdlZCBvdXRzaWRlIFpJVEFERUxSD2lzRW1haWxWZXJpZ
  mllZCK+AgoFUGhvbmUSmwEKBXBob25lGAEgASgJQoQB4j8HEgVwaG9uZZJBdzJhbW9iaWxlIHBob25lIG51bWJlciBvZiB0aGUgd
  XNlci4gKHVzZSBnbG9iYWwgcGF0dGVybiBvZiBzcGVjIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTY2KUoSIis0M
  SA3MSAwMDAgMDAgMDAiUgVwaG9uZRKWAQoRaXNfcGhvbmVfdmVyaWZpZWQYAiABKAhCauI/ERIPaXNQaG9uZVZlcmlmaWVkkkFTM
  lFJcyB0cnVlIGlmIHRoZSB1c2VyIHZlcmlmaWVkIGhpcyBwaG9uZSBvciBpZiB0aGUgcGhvbmUgaXMgbWFuYWdlZCBvdXRzaWRlI
  FpJVEFERUxSD2lzUGhvbmVWZXJpZmllZCLSBgoLU2VhcmNoUXVlcnkSXAoPdXNlcl9uYW1lX3F1ZXJ5GAEgASgLMh4ueml0YWRlb
  C51c2VyLnYxLlVzZXJOYW1lUXVlcnlCEuI/DxINdXNlck5hbWVRdWVyeUgAUg11c2VyTmFtZVF1ZXJ5EmAKEGZpcnN0X25hbWVfc
  XVlcnkYAiABKAsyHy56aXRhZGVsLnVzZXIudjEuRmlyc3ROYW1lUXVlcnlCE+I/EBIOZmlyc3ROYW1lUXVlcnlIAFIOZmlyc3ROY
  W1lUXVlcnkSXAoPbGFzdF9uYW1lX3F1ZXJ5GAMgASgLMh4ueml0YWRlbC51c2VyLnYxLkxhc3ROYW1lUXVlcnlCEuI/DxINbGFzd
  E5hbWVRdWVyeUgAUg1sYXN0TmFtZVF1ZXJ5ElwKD25pY2tfbmFtZV9xdWVyeRgEIAEoCzIeLnppdGFkZWwudXNlci52MS5OaWNrT
  mFtZVF1ZXJ5QhLiPw8SDW5pY2tOYW1lUXVlcnlIAFINbmlja05hbWVRdWVyeRJoChJkaXNwbGF5X25hbWVfcXVlcnkYBSABKAsyI
  S56aXRhZGVsLnVzZXIudjEuRGlzcGxheU5hbWVRdWVyeUIV4j8SEhBkaXNwbGF5TmFtZVF1ZXJ5SABSEGRpc3BsYXlOYW1lUXVlc
  nkSTwoLZW1haWxfcXVlcnkYBiABKAsyGy56aXRhZGVsLnVzZXIudjEuRW1haWxRdWVyeUIP4j8MEgplbWFpbFF1ZXJ5SABSCmVtY
  WlsUXVlcnkSTwoLc3RhdGVfcXVlcnkYByABKAsyGy56aXRhZGVsLnVzZXIudjEuU3RhdGVRdWVyeUIP4j8MEgpzdGF0ZVF1ZXJ5S
  ABSCnN0YXRlUXVlcnkSSwoKdHlwZV9xdWVyeRgIIAEoCzIaLnppdGFkZWwudXNlci52MS5UeXBlUXVlcnlCDuI/CxIJdHlwZVF1Z
  XJ5SABSCXR5cGVRdWVyeRJgChBsb2dpbl9uYW1lX3F1ZXJ5GAkgASgLMh8ueml0YWRlbC51c2VyLnYxLkxvZ2luTmFtZVF1ZXJ5Q
  hPiPxASDmxvZ2luTmFtZVF1ZXJ5SABSDmxvZ2luTmFtZVF1ZXJ5QgwKBXF1ZXJ5EgP4QgEi0gEKDVVzZXJOYW1lUXVlcnkSSAoJd
  XNlcl9uYW1lGAEgASgJQiviPwoSCHVzZXJOYW1lkkETSg4iZ2lnaS1naXJhZmZlInjIAfpCBXIDGMgBUgh1c2VyTmFtZRJ3CgZtZ
  XRob2QYAiABKA4yGy56aXRhZGVsLnYxLlRleHRRdWVyeU1ldGhvZEJC4j8IEgZtZXRob2SSQSwyKmRlZmluZXMgd2hpY2ggdGV4d
  CBlcXVhbGl0eSBtZXRob2QgaXMgdXNlZPpCBYIBAhABUgZtZXRob2QizgEKDkZpcnN0TmFtZVF1ZXJ5EkMKCmZpcnN0X25hbWUYA
  SABKAlCJOI/CxIJZmlyc3ROYW1lkkELSgYiR2lnaSJ4yAH6QgVyAxjIAVIJZmlyc3ROYW1lEncKBm1ldGhvZBgCIAEoDjIbLnppd
  GFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZGVmaW5lcyB3aGljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZ
  CBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCLNAQoNTGFzdE5hbWVRdWVyeRJDCglsYXN0X25hbWUYASABKAlCJuI/ChIIbGFzdE5hb
  WWSQQ5KCSJHaXJhZmZlInjIAfpCBXIDGMgBUghsYXN0TmFtZRJ3CgZtZXRob2QYAiABKA4yGy56aXRhZGVsLnYxLlRleHRRdWVye
  U1ldGhvZEJC4j8IEgZtZXRob2SSQSwyKmRlZmluZXMgd2hpY2ggdGV4dCBlcXVhbGl0eSBtZXRob2QgaXMgdXNlZPpCBYIBAhABU
  gZtZXRob2QivAEKDU5pY2tOYW1lUXVlcnkSMgoJbmlja19uYW1lGAEgASgJQhXiPwoSCG5pY2tOYW1l+kIFcgMYyAFSCG5pY2tOY
  W1lEncKBm1ldGhvZBgCIAEoDjIbLnppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZGVmaW5lcyB3a
  GljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCLeAQoQRGlzcGxheU5hbWVRdWVyeRJRCgxka
  XNwbGF5X25hbWUYASABKAlCLuI/DRILZGlzcGxheU5hbWWSQRNKDiJHaWdpIEdpcmFmZmUieMgB+kIFcgMYyAFSC2Rpc3BsYXlOY
  W1lEncKBm1ldGhvZBgCIAEoDjIbLnppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZGVmaW5lcyB3a
  GljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCK3AgoKRW1haWxRdWVyeRKvAQoNZW1haWxfY
  WRkcmVzcxgBIAEoCUKJAeI/DhIMZW1haWxBZGRyZXNzkkFtMlRlbWFpbCBhZGRyZXNzIG9mIHRoZSB1c2VyLiAoc3BlYzogaHR0c
  HM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjQuMSlKEiJnaWdpQHppdGFkZWwuY29tInjIAfpCBXIDG
  MgBUgxlbWFpbEFkZHJlc3MSdwoGbWV0aG9kGAIgASgOMhsueml0YWRlbC52MS5UZXh0UXVlcnlNZXRob2RCQuI/CBIGbWV0aG9kk
  kEsMipkZWZpbmVzIHdoaWNoIHRleHQgZXF1YWxpdHkgbWV0aG9kIGlzIHVzZWT6QgWCAQIQAVIGbWV0aG9kItwBCg5Mb2dpbk5hb
  WVRdWVyeRJRCgpsb2dpbl9uYW1lGAEgASgJQjLiPwsSCWxvZ2luTmFtZZJBGUoUImdpZ2lAeml0YWRlbC5jbG91ZCJ4yAH6QgVyA
  xjIAVIJbG9naW5OYW1lEncKBm1ldGhvZBgCIAEoDjIbLnppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBL
  DIqZGVmaW5lcyB3aGljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCJwCgpTdGF0ZVF1ZXJ5E
  mIKBXN0YXRlGAEgASgOMhoueml0YWRlbC51c2VyLnYxLlVzZXJTdGF0ZUIw4j8HEgVzdGF0ZZJBGzIZY3VycmVudCBzdGF0ZSBvZ
  iB0aGUgdXNlcvpCBYIBAhABUgVzdGF0ZSJiCglUeXBlUXVlcnkSVQoEdHlwZRgBIAEoDjIVLnppdGFkZWwudXNlci52MS5UeXBlQ
  iriPwYSBHR5cGWSQRYyFHRoZSB0eXBlIG9mIHRoZSB1c2Vy+kIFggECEAFSBHR5cGUisQIKCkF1dGhGYWN0b3ISZwoFc3RhdGUYA
  SABKA4yIC56aXRhZGVsLnVzZXIudjEuQXV0aEZhY3RvclN0YXRlQi/iPwcSBXN0YXRlkkEiMiBjdXJyZW50IHN0YXRlIG9mIHRoZ
  SBhdXRoIGZhY3RvclIFc3RhdGUSWAoDb3RwGAIgASgLMh4ueml0YWRlbC51c2VyLnYxLkF1dGhGYWN0b3JPVFBCJOI/BRIDb3Rwk
  kEZMhdvbmUgdHlwZSB1c2UgT1RQIG9yIFUyRkgAUgNvdHASWAoDdTJmGAMgASgLMh4ueml0YWRlbC51c2VyLnYxLkF1dGhGYWN0b
  3JVMkZCJOI/BRIDdTJGkkEZMhdvbmUgdHlwZSB1c2UgT1RQIG9yIFUyRkgAUgN1MmZCBgoEdHlwZSIPCg1BdXRoRmFjdG9yT1RQI
  m4KDUF1dGhGYWN0b3JVMkYSLwoCaWQYASABKAlCH+I/BBICaWSSQRVKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSAmlkEiwKBG5hbWUYA
  iABKAlCGOI/BhIEbmFtZZJBDEoKImZpZG8ga2V5IlIEbmFtZSKrCAoLV2ViQXV0aE5LZXkSmwgKCnB1YmxpY19rZXkYASABKAxC+
  wfiPwsSCXB1YmxpY0tleZJB6QcyWWpzb24gcmVwcmVzZW50YXRpb24gb2YgcHVibGljIGtleSBjcmVkZW50aWFsIGNyZWF0aW9uI
  G9wdGlvbnMgdXNlZCBieSB0aGUgd2ViYXV0aG4gY2xpZW50SosHImV5SndkV0pzYVdOTFpYa2lPbnNpWTJoaGJHeGxibWRsSW9wb
  GZabTR2TTIxcVN6QlBkamx0TjJ4NlZXaG5jbFl5ZWpGSlNsVnpabnBMZDBaMVR5dFdUV3R6UlcxSWN6MGlMQ0p5Y0NJNmV5SnVZV
  zFsSWpvaVdrbFVRVVJGVENJc0ltbGtJam9pWVdOdFpTMW5lbTlsTkhndWVtbDBZV1JsYkM1amJHOTFaQ0o5TENKMWMyVnlJanA3S
  W01aGJXVWlPaUowWlhOMGRYTmxjalUxUUdGamJXVXVlbWwwWVdSbGJDNWpiRzkxWkNJc0ltUnBjM0JzWVhsT1lXMWxJam9pVkdWe
  mRDQlVaWE4wSWl3aWFXUWlPaUpOVkdkNVRWUlZNazFxV1RCTmFrazFUWHBCTWs1cVNURWlmU3dpY0hWaVMyVjVRM0psWkZCaGNtR
  nRjeUk2VzNzaWRIbHdaU0k2SW5CMVlteHBZeTFyWlhraUxDSmhiR2NpT2kwM2ZTeDdJblI1Y0dVaU9pSndkV0pzYVdNdGEyVjVJa
  XdpWVd4bklqb3RNelY5TEhzaWRIbHdaU0k2SW5CMVlteHBZeTFyWlhraUxDSmhiR2NpT2kwek5uMHNleUowZVhCbElqb2ljSFZpY
  kdsakxXdGxlU0lzSW1Gc1p5STZMVEkxTjMwc2V5SjBlWEJsSWpvaWNIVmliR2xqTFd0bGVTSXNJbUZzWnlJNkxUSTFPSDBzZXlKM
  GVYQmxJam9pY0hWaWJHbGpMV3RsZVNJc0ltRnNaeUk2TFRJMU9YMHNleUowZVhCbElqb2ljSFZpYkdsakxXdGxlU0lzSW1Gc1p5S
  TZMVE0zZlN4N0luUjVjR1VpT2lKd2RXSnNhV010YTJWNUlpd2lZV3huSWpvdE16aDlMSHNpZEhsd1pTSTZJbkIxWW14cFl5MXJaW
  GtpTENKaGJHY2lPaTB6T1gwc2V5SjBlWEJsSWpvaWNIVmliR2xqTFd0bGVTSXNJbUZzWnlJNkxUaDlYU3dpWVhWMGFHVnVkR2xqW
  VhSdmNsTmxiR1ZqZEdsdmJpSTZleUoxYzJWeVZtVnlhV1pwWTJGMGFXOXVJam9pWkdselkyOTFjbUZuWldRaWZuMmlsR2x0Wlc5M
  WRDSTZOakF3TURBc0ltRjBkR1Z6ZEdGMGFXOXVJam9pYm05dVpTSjlmUT09IlIJcHVibGljS2V5IpACChRXZWJBdXRoTlZlcmlma
  WNhdGlvbhKpAQoVcHVibGljX2tleV9jcmVkZW50aWFsGAEgASgMQnXiPxUSE3B1YmxpY0tleUNyZWRlbnRpYWySQVMySkpTT04gc
  mVwcmVzZW50YXRpb24gb2YgcHVibGljIGtleSBjcmVkZW50aWFsIGlzc3VlZCBieSB0aGUgd2ViYXV0aG4gY2xpZW50eICAQIABN
  /pCBHoCEDdSE3B1YmxpY0tleUNyZWRlbnRpYWwSTAoKdG9rZW5fbmFtZRgCIAEoCUIt4j8LEgl0b2tlbk5hbWWSQRJKCiJmaWRvI
  GtleSJ4yAGAAQH6QgdyBRABGMgBUgl0b2tlbk5hbWUi1wEKDVdlYkF1dGhOVG9rZW4SLwoCaWQYASABKAlCH+I/BBICaWSSQRVKE
  yI2OTYyOTAyMzkwNjQ4ODMzNCJSAmlkEmEKBXN0YXRlGAIgASgOMiAueml0YWRlbC51c2VyLnYxLkF1dGhGYWN0b3JTdGF0ZUIp4
  j8HEgVzdGF0ZZJBHDIaY3VycmVudCBzdGF0ZSBvZiB0aGUgdG9rZW5SBXN0YXRlEjIKBG5hbWUYAyABKAlCHuI/BhIEbmFtZZJBE
  koKImZpZG8ga2V5InjIAYABAVIEbmFtZSLgBQoKTWVtYmVyc2hpcBI8Cgd1c2VyX2lkGAEgASgJQiPiPwgSBnVzZXJJZJJBFUoTI
  jY5NjI5MDIzOTA2NDg4MzM0IlIGdXNlcklkEkEKB2RldGFpbHMYAiABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/C
  RIHZGV0YWlsc1IHZGV0YWlscxIyCgVyb2xlcxgDIAMoCUIc4j8HEgVyb2xlc5JBD0oNWyJJQU1fT1dORVIiXVIFcm9sZXMSYAoMZ
  GlzcGxheV9uYW1lGAQgASgJQj3iPw0SC2Rpc3BsYXlOYW1lkkEqMhhkaXNwbGF5IG5hbWUgb2YgdGhlIHVzZXJKDiJHaWdpIEdpc
  mFmZmUiUgtkaXNwbGF5TmFtZRJcCgNpYW0YBSABKAhCSOI/BRIDaWFtkkE9MjtvbmUgb2YgdHlwZSB1c2UgaWFtLCBvcmcgaWQsI
  HByb2plY3QgaWQgb3IgcHJvamVjdCBncmFudCBpZEgAUgNpYW0SYwoGb3JnX2lkGAYgASgJQkriPwcSBW9yZ0lkkkE9MjtvbmUgb
  2YgdHlwZSB1c2UgaWFtLCBvcmcgaWQsIHByb2plY3QgaWQgb3IgcHJvamVjdCBncmFudCBpZEgAUgVvcmdJZBJvCgpwcm9qZWN0X
  2lkGAcgASgJQk7iPwsSCXByb2plY3RJZJJBPTI7b25lIG9mIHR5cGUgdXNlIGlhbSwgb3JnIGlkLCBwcm9qZWN0IGlkIG9yIHByb
  2plY3QgZ3JhbnQgaWRIAFIJcHJvamVjdElkEn8KEHByb2plY3RfZ3JhbnRfaWQYCCABKAlCU+I/EBIOcHJvamVjdEdyYW50SWSSQ
  T0yO29uZSBvZiB0eXBlIHVzZSBpYW0sIG9yZyBpZCwgcHJvamVjdCBpZCBvciBwcm9qZWN0IGdyYW50IGlkSABSDnByb2plY3RHc
  mFudElkQgYKBHR5cGUioAMKD01lbWJlcnNoaXBRdWVyeRJRCglvcmdfcXVlcnkYASABKAsyIy56aXRhZGVsLnVzZXIudjEuTWVtY
  mVyc2hpcE9yZ1F1ZXJ5Qg3iPwoSCG9yZ1F1ZXJ5SABSCG9yZ1F1ZXJ5EmEKDXByb2plY3RfcXVlcnkYAiABKAsyJy56aXRhZGVsL
  nVzZXIudjEuTWVtYmVyc2hpcFByb2plY3RRdWVyeUIR4j8OEgxwcm9qZWN0UXVlcnlIAFIMcHJvamVjdFF1ZXJ5EnYKE3Byb2plY
  3RfZ3JhbnRfcXVlcnkYAyABKAsyLC56aXRhZGVsLnVzZXIudjEuTWVtYmVyc2hpcFByb2plY3RHcmFudFF1ZXJ5QhbiPxMSEXByb
  2plY3RHcmFudFF1ZXJ5SABSEXByb2plY3RHcmFudFF1ZXJ5ElEKCWlhbV9xdWVyeRgEIAEoCzIjLnppdGFkZWwudXNlci52MS5NZ
  W1iZXJzaGlwSUFNUXVlcnlCDeI/ChIIaWFtUXVlcnlIAFIIaWFtUXVlcnlCDAoFcXVlcnkSA/hCASJXChJNZW1iZXJzaGlwT3JnU
  XVlcnkSQQoGb3JnX2lkGAEgASgJQiriPwcSBW9yZ0lkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQi+kIFcgMYyAFSBW9yZ0lkImcKF
  k1lbWJlcnNoaXBQcm9qZWN0UXVlcnkSTQoKcHJvamVjdF9pZBgBIAEoCUIu4j8LEglwcm9qZWN0SWSSQRVKEyI2OTYyOTAyMzkwN
  jQ4ODMzNCL6QgVyAxjIAVIJcHJvamVjdElkInwKG01lbWJlcnNoaXBQcm9qZWN0R3JhbnRRdWVyeRJdChBwcm9qZWN0X2dyYW50X
  2lkGAEgASgJQjPiPxASDnByb2plY3RHcmFudElkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQi+kIFcgMYyAFSDnByb2plY3RHcmFud
  ElkIjAKEk1lbWJlcnNoaXBJQU1RdWVyeRIaCgNpYW0YASABKAhCCOI/BRIDaWFtUgNpYW0i8AUKB1Nlc3Npb24SRQoKc2Vzc2lvb
  l9pZBgBIAEoCUIm4j8LEglzZXNzaW9uSWSSQRVKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSCXNlc3Npb25JZBI/CghhZ2VudF9pZBgCI
  AEoCUIk4j8JEgdhZ2VudElkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQiUgdhZ2VudElkEm0KCmF1dGhfc3RhdGUYAyABKA4yHS56a
  XRhZGVsLnVzZXIudjEuU2Vzc2lvblN0YXRlQi/iPwsSCWF1dGhTdGF0ZZJBHjIcY3VycmVudCBzdGF0ZSBvZiB0aGUgc2Vzc2lvb
  lIJYXV0aFN0YXRlEjwKB3VzZXJfaWQYBCABKAlCI+I/CBIGdXNlcklkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQiUgZ1c2VySWQSP
  QoJdXNlcl9uYW1lGAUgASgJQiDiPwoSCHVzZXJOYW1lkkEQSg4iZ2lnaS1naXJhZmZlIlIIdXNlck5hbWUSRAoKbG9naW5fbmFtZ
  RgHIAEoCUIl4j8LEglsb2dpbk5hbWWSQRRKEiJnaWdpQHppdGFkZWwuY29tIlIJbG9naW5OYW1lEmQKDGRpc3BsYXlfbmFtZRgII
  AEoCUJB4j8NEgtkaXNwbGF5TmFtZZJBLjIcdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgdXNlckoOIkdpZ2kgR2lyYWZmZSJSC2Rpc
  3BsYXlOYW1lEkEKB2RldGFpbHMYCSABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZGV0YWlsc
  xKBAQoKYXZhdGFyX3VybBgKIAEoCUJi4j8LEglhdmF0YXJVcmySQVEyFmF2YXRhciBVUkwgb2YgdGhlIHVzZXJKNyJodHRwczovL
  2FwaS56aXRhZGVsLmNoL2Fzc2V0cy92MS9hdmF0YXItMzI0MzJqa2g0a2ozMiJSCWF2YXRhclVybCLtCQoMUmVmcmVzaFRva2VuE
  i8KAmlkGAEgASgJQh/iPwQSAmlkkkEVShMiNjk2MjkwMjM5MDY0ODk0NTUiUgJpZBJBCgdkZXRhaWxzGAIgASgLMhkueml0YWRlb
  C52MS5PYmplY3REZXRhaWxzQgziPwkSB2RldGFpbHNSB2RldGFpbHMSfwoJY2xpZW50X2lkGAMgASgJQmLiPwoSCGNsaWVudElkk
  kFSMjNvYXV0aDIvb2lkYyBjbGllbnRfaWQgb2YgdGhlIGF1dGhvcml6ZWQgYXBwbGljYXRpb25KGyI2OTYyOTAyMzkwNjQ4ODMzN
  EBaSVRBREVMIlIIY2xpZW50SWQSxgEKCWF1dGhfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCjAHiPwoSC
  GF1dGhUaW1lkkF8MlsidGltZSB3aGVuIHRoZSB1c2VyIGF1dGhlbnRpY2F0ZWQsIGRvZXMgbm90IGhhdmUgdG8gYmUgdGhlIHNhb
  WUgdGltZSB0aGUgdG9rZW4gd2FzIGNyZWF0ZWQiSh0iMjAyMy0wMi0xM1QwODo0NTowMC4wMDAwMDBaIlIIYXV0aFRpbWUS0wEKD
  2lkbGVfZXhwaXJhdGlvbhgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCjQHiPxASDmlkbGVFeHBpcmF0aW9ukkF3M
  lYidGltZSB0aGUgcmVmcmVzaCB0b2tlbiB3aWxsIGV4cGlyZSBpZiBub3QgdXNlZCwgdGhlIHVzZXIgd2lsbCBoYXZlIHRvIHJlY
  XV0aGVudGljYXRlIkodIjIwMjMtMDItMTRUMDg6NDU6MDAuMDAwMDAwWiJSDmlkbGVFeHBpcmF0aW9uErkBCgpleHBpcmF0aW9uG
  AYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEJ94j8MEgpleHBpcmF0aW9ukkFrMkoidGltZSB0aGUgcmVmcmVzaCB0b
  2tlbiB3aWxsIGV4cGlyZSwgdGhlIHVzZXIgd2lsbCBoYXZlIHRvIHJlYXV0aGVudGljYXRlIkodIjIwMjMtMDItMTRUMDg6NDU6M
  DAuMDAwMDAwWiJSCmV4cGlyYXRpb24SygEKBnNjb3BlcxgHIAMoCUKxAeI/CBIGc2NvcGVzkkGiATJxc2NvcGVzIG9mIHRoZSBpb
  ml0aWFsIGF1dGggcmVxdWVzdCwgYWNjZXNzIHRva2VucyBjcmVhdGVkIGJ5IHRoaXMgcmVmcmVzaCB0b2tlbiBjYW4gaGF2ZSBhI
  HN1YnNldCBvZiB0aGVzZSBzY29wZXNKLVsib3BlbmlkIiwiZW1haWwiLCJwcm9maWxlIiwib2ZmbGluZV9hY2Nlc3MiXVIGc2Nvc
  GVzEr8BCghhdWRpZW5jZRgIIAMoCUKiAeI/ChIIYXVkaWVuY2WSQZEBMlthdWRpZW5jZSBvZiB0aGUgaW5pdGlhbCBhdXRoIHJlc
  XVlc3QgYW5kIG9mIGFsbCBhY2Nlc3MgdG9rZW5zIGNyZWF0ZWQgYnkgdGhpcyByZWZyZXNoIHRva2VuSjJbIjY5NjI5MDIzOTA2N
  Dg4MzM0QFpJVEFERUwiLCAiNjk2MjkwMjM5MDY0ODEyNTYiXVIIYXVkaWVuY2Ui9wIKE1BlcnNvbmFsQWNjZXNzVG9rZW4SLwoCa
  WQYASABKAlCH+I/BBICaWSSQRVKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSAmlkEkEKB2RldGFpbHMYAiABKAsyGS56aXRhZGVsLnYxL
  k9iamVjdERldGFpbHNCDOI/CRIHZGV0YWlsc1IHZGV0YWlscxKaAQoPZXhwaXJhdGlvbl9kYXRlGAMgASgLMhouZ29vZ2xlLnByb
  3RvYnVmLlRpbWVzdGFtcEJV4j8QEg5leHBpcmF0aW9uRGF0ZZJBPzIedGhlIGRhdGUgdGhlIHRva2VuIHdpbGwgZXhwaXJlSh0iM
  zAxOS0wNC0wMVQwODo0NTowMC4wMDAwMDBaIlIOZXhwaXJhdGlvbkRhdGUSTwoGc2NvcGVzGAQgAygJQjfiPwgSBnNjb3Blc5JBK
  TIbc2NvcGVzIGdyYW50ZWQgdG8gdGhlIHRva2VuSgpbIm9wZW5pZCJdUgZzY29wZXMi8QsKCVVzZXJHcmFudBIvCgJpZBgBIAEoC
  UIf4j8EEgJpZJJBFUoTIjY5NjI5MDIzOTA2NDg4MzM0IlICaWQSQQoHZGV0YWlscxgCIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0R
  GV0YWlsc0IM4j8JEgdkZXRhaWxzUgdkZXRhaWxzEkEKCXJvbGVfa2V5cxgDIAMoCUIk4j8KEghyb2xlS2V5c5JBFEoSWyJyb2xlL
  nN1cGVyLm1hbiJdUghyb2xlS2V5cxJfCgVzdGF0ZRgEIAEoDjIfLnppdGFkZWwudXNlci52MS5Vc2VyR3JhbnRTdGF0ZUIo4j8HE
  gVzdGF0ZZJBGzIZY3VycmVudCBzdGF0ZSBvZiB0aGUgdXNlclIFc3RhdGUSPAoHdXNlcl9pZBgFIAEoCUIj4j8IEgZ1c2VySWSSQ
  RVKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSBnVzZXJJZBI9Cgl1c2VyX25hbWUYBiABKAlCIOI/ChIIdXNlck5hbWWSQRBKDiJnaWdpL
  WdpcmFmZmUiUgh1c2VyTmFtZRI4CgpmaXJzdF9uYW1lGAcgASgJQhniPwsSCWZpcnN0TmFtZZJBCEoGIkdpZ2kiUglmaXJzdE5hb
  WUSOAoJbGFzdF9uYW1lGAggASgJQhviPwoSCGxhc3ROYW1lkkELSgkiR2lyYWZmZSJSCGxhc3ROYW1lEpQBCgVlbWFpbBgJIAEoC
  UJ+4j8HEgVlbWFpbJJBajJUZW1haWwgYWRkcmVzcyBvZiB0aGUgdXNlci4gKHNwZWM6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcva
  HRtbC9yZmMyODIyI3NlY3Rpb24tMy40LjEpShIiZ2lnaUB6aXRhZGVsLmNvbSL6QgRyAmABUgVlbWFpbBJoCgxkaXNwbGF5X25hb
  WUYCiABKAlCReI/DRILZGlzcGxheU5hbWWSQSoyGGRpc3BsYXkgbmFtZSBvZiB0aGUgdXNlckoOIkdpZ2kgR2lyYWZmZSL6QgVyA
  xjIAVILZGlzcGxheU5hbWUSOQoGb3JnX2lkGAsgASgJQiLiPwcSBW9yZ0lkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQiUgVvcmdJZ
  BI1CghvcmdfbmFtZRgMIAEoCUIa4j8JEgdvcmdOYW1lkkELSgkiWklUQURFTCJSB29yZ05hbWUSQQoKb3JnX2RvbWFpbhgNIAEoC
  UIi4j8LEglvcmdEb21haW6SQRFKDyJ6aXRhZGVsLmNsb3VkIlIJb3JnRG9tYWluEkUKCnByb2plY3RfaWQYDiABKAlCJuI/CxIJc
  HJvamVjdElkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQiUglwcm9qZWN0SWQSQQoMcHJvamVjdF9uYW1lGA8gASgJQh7iPw0SC3Byb
  2plY3ROYW1lkkELSgkiWklUQURFTCJSC3Byb2plY3ROYW1lElUKEHByb2plY3RfZ3JhbnRfaWQYECABKAlCK+I/EBIOcHJvamVjd
  EdyYW50SWSSQRVKEyI2OTYyOTAyMzkwNjQ4ODMzNCJSDnByb2plY3RHcmFudElkEngKCmF2YXRhcl91cmwYESABKAlCWeI/CxIJY
  XZhdGFyVXJskkFIMhZhdmF0YXIgVVJMIG9mIHRoZSB1c2VySi4ie3lvdXItZG9tYWlufS9hc3NldHMvdjEvYXZhdGFyLTMyNDMya
  mtoNGtqMzIiUglhdmF0YXJVcmwSYAoUcHJlZmVycmVkX2xvZ2luX25hbWUYEiABKAlCLuI/FBIScHJlZmVycmVkTG9naW5OYW1lk
  kEUShIiZ2lnaUB6aXRhZGVsLmNvbSJSEnByZWZlcnJlZExvZ2luTmFtZRJoCgl1c2VyX3R5cGUYEyABKA4yFS56aXRhZGVsLnVzZ
  XIudjEuVHlwZUI04j8KEgh1c2VyVHlwZZJBJDIidHlwZSBvZiB0aGUgdXNlciAoaHVtYW4gLyBtYWNoaW5lKVIIdXNlclR5cGUi7
  AsKDlVzZXJHcmFudFF1ZXJ5EmkKEHByb2plY3RfaWRfcXVlcnkYASABKAsyKC56aXRhZGVsLnVzZXIudjEuVXNlckdyYW50UHJva
  mVjdElEUXVlcnlCE+I/EBIOcHJvamVjdElkUXVlcnlIAFIOcHJvamVjdElkUXVlcnkSXQoNdXNlcl9pZF9xdWVyeRgCIAEoCzIlL
  nppdGFkZWwudXNlci52MS5Vc2VyR3JhbnRVc2VySURRdWVyeUIQ4j8NEgt1c2VySWRRdWVyeUgAUgt1c2VySWRRdWVyeRJxChJ3a
  XRoX2dyYW50ZWRfcXVlcnkYAyABKAsyKi56aXRhZGVsLnVzZXIudjEuVXNlckdyYW50V2l0aEdyYW50ZWRRdWVyeUIV4j8SEhB3a
  XRoR3JhbnRlZFF1ZXJ5SABSEHdpdGhHcmFudGVkUXVlcnkSYQoOcm9sZV9rZXlfcXVlcnkYBCABKAsyJi56aXRhZGVsLnVzZXIud
  jEuVXNlckdyYW50Um9sZUtleVF1ZXJ5QhHiPw4SDHJvbGVLZXlRdWVyeUgAUgxyb2xlS2V5UXVlcnkSfgoWcHJvamVjdF9ncmFud
  F9pZF9xdWVyeRgFIAEoCzItLnppdGFkZWwudXNlci52MS5Vc2VyR3JhbnRQcm9qZWN0R3JhbnRJRFF1ZXJ5QhjiPxUSE3Byb2plY
  3RHcmFudElkUXVlcnlIAFITcHJvamVjdEdyYW50SWRRdWVyeRJlCg91c2VyX25hbWVfcXVlcnkYBiABKAsyJy56aXRhZGVsLnVzZ
  XIudjEuVXNlckdyYW50VXNlck5hbWVRdWVyeUIS4j8PEg11c2VyTmFtZVF1ZXJ5SABSDXVzZXJOYW1lUXVlcnkSaQoQZmlyc3Rfb
  mFtZV9xdWVyeRgHIAEoCzIoLnppdGFkZWwudXNlci52MS5Vc2VyR3JhbnRGaXJzdE5hbWVRdWVyeUIT4j8QEg5maXJzdE5hbWVRd
  WVyeUgAUg5maXJzdE5hbWVRdWVyeRJlCg9sYXN0X25hbWVfcXVlcnkYCCABKAsyJy56aXRhZGVsLnVzZXIudjEuVXNlckdyYW50T
  GFzdE5hbWVRdWVyeUIS4j8PEg1sYXN0TmFtZVF1ZXJ5SABSDWxhc3ROYW1lUXVlcnkSWAoLZW1haWxfcXVlcnkYCSABKAsyJC56a
  XRhZGVsLnVzZXIudjEuVXNlckdyYW50RW1haWxRdWVyeUIP4j8MEgplbWFpbFF1ZXJ5SABSCmVtYWlsUXVlcnkSYQoOb3JnX25hb
  WVfcXVlcnkYCiABKAsyJi56aXRhZGVsLnVzZXIudjEuVXNlckdyYW50T3JnTmFtZVF1ZXJ5QhHiPw4SDG9yZ05hbWVRdWVyeUgAU
  gxvcmdOYW1lUXVlcnkSaQoQb3JnX2RvbWFpbl9xdWVyeRgLIAEoCzIoLnppdGFkZWwudXNlci52MS5Vc2VyR3JhbnRPcmdEb21ha
  W5RdWVyeUIT4j8QEg5vcmdEb21haW5RdWVyeUgAUg5vcmdEb21haW5RdWVyeRJxChJwcm9qZWN0X25hbWVfcXVlcnkYDCABKAsyK
  i56aXRhZGVsLnVzZXIudjEuVXNlckdyYW50UHJvamVjdE5hbWVRdWVyeUIV4j8SEhBwcm9qZWN0TmFtZVF1ZXJ5SABSEHByb2plY
  3ROYW1lUXVlcnkScQoSZGlzcGxheV9uYW1lX3F1ZXJ5GA0gASgLMioueml0YWRlbC51c2VyLnYxLlVzZXJHcmFudERpc3BsYXlOY
  W1lUXVlcnlCFeI/EhIQZGlzcGxheU5hbWVRdWVyeUgAUhBkaXNwbGF5TmFtZVF1ZXJ5EmUKD3VzZXJfdHlwZV9xdWVyeRgOIAEoC
  zInLnppdGFkZWwudXNlci52MS5Vc2VyR3JhbnRVc2VyVHlwZVF1ZXJ5QhLiPw8SDXVzZXJUeXBlUXVlcnlIAFINdXNlclR5cGVRd
  WVyeUIMCgVxdWVyeRID+EIBImgKF1VzZXJHcmFudFByb2plY3RJRFF1ZXJ5Ek0KCnByb2plY3RfaWQYASABKAlCLuI/CxIJcHJva
  mVjdElkkkEVShMiNjk2MjkwMjM5MDY0ODgzMzQi+kIFcgMYyAFSCXByb2plY3RJZCJcChRVc2VyR3JhbnRVc2VySURRdWVyeRJEC
  gd1c2VyX2lkGAEgASgJQiviPwgSBnVzZXJJZJJBFUoTIjY5NjI5MDIzOTA2NDg4MzM0IvpCBXIDGMgBUgZ1c2VySWQiUAoZVXNlc
  kdyYW50V2l0aEdyYW50ZWRRdWVyeRIzCgx3aXRoX2dyYW50ZWQYASABKAhCEOI/DRILd2l0aEdyYW50ZWRSC3dpdGhHcmFudGVkI
  tYBChVVc2VyR3JhbnRSb2xlS2V5UXVlcnkSRAoIcm9sZV9rZXkYASABKAlCKeI/CRIHcm9sZUtleZJBEkoQInJvbGUuc3VwZXIub
  WFuIvpCBXIDGMgBUgdyb2xlS2V5EncKBm1ldGhvZBgCIAEoDjIbLnppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ld
  GhvZJJBLDIqZGVmaW5lcyB3aGljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCJ9ChxVc2VyR
  3JhbnRQcm9qZWN0R3JhbnRJRFF1ZXJ5El0KEHByb2plY3RfZ3JhbnRfaWQYASABKAlCM+I/EBIOcHJvamVjdEdyYW50SWSSQRVKE
  yI2OTYyOTAyMzkwNjQ4ODMzNCL6QgVyAxjIAVIOcHJvamVjdEdyYW50SWQi2AEKFlVzZXJHcmFudFVzZXJOYW1lUXVlcnkSRQoJd
  XNlcl9uYW1lGAEgASgJQijiPwoSCHVzZXJOYW1lkkEQSg4iZ2lnaS1naXJhZmZlIvpCBXIDGMgBUgh1c2VyTmFtZRJ3CgZtZXRob
  2QYAiABKA4yGy56aXRhZGVsLnYxLlRleHRRdWVyeU1ldGhvZEJC4j8IEgZtZXRob2SSQSwyKmRlZmluZXMgd2hpY2ggdGV4dCBlc
  XVhbGl0eSBtZXRob2QgaXMgdXNlZPpCBYIBAhABUgZtZXRob2Qi1AEKF1VzZXJHcmFudEZpcnN0TmFtZVF1ZXJ5EkAKCmZpcnN0X
  25hbWUYASABKAlCIeI/CxIJZmlyc3ROYW1lkkEISgYiR2lnaSL6QgVyAxjIAVIJZmlyc3ROYW1lEncKBm1ldGhvZBgCIAEoDjIbL
  nppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZGVmaW5lcyB3aGljaCB0ZXh0IGVxdWFsaXR5IG1ld
  GhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCLTAQoWVXNlckdyYW50TGFzdE5hbWVRdWVyeRJACglsYXN0X25hbWUYASABKAlCI
  +I/ChIIbGFzdE5hbWWSQQtKCSJHaXJhZmZlIvpCBXIDGMgBUghsYXN0TmFtZRJ3CgZtZXRob2QYAiABKA4yGy56aXRhZGVsLnYxL
  lRleHRRdWVyeU1ldGhvZEJC4j8IEgZtZXRob2SSQSwyKmRlZmluZXMgd2hpY2ggdGV4dCBlcXVhbGl0eSBtZXRob2QgaXMgdXNlZ
  PpCBYIBAhABUgZtZXRob2QizwEKE1VzZXJHcmFudEVtYWlsUXVlcnkSPwoFZW1haWwYASABKAlCKeI/BxIFZW1haWySQRRKEiJna
  WdpQHppdGFkZWwuY29tIvpCBXIDGMgBUgVlbWFpbBJ3CgZtZXRob2QYAiABKA4yGy56aXRhZGVsLnYxLlRleHRRdWVyeU1ldGhvZ
  EJC4j8IEgZtZXRob2SSQSwyKmRlZmluZXMgd2hpY2ggdGV4dCBlcXVhbGl0eSBtZXRob2QgaXMgdXNlZPpCBYIBAhABUgZtZXRob
  2QiywEKFVVzZXJHcmFudE9yZ05hbWVRdWVyeRI5CghvcmdfbmFtZRgBIAEoCUIe4j8JEgdvcmdOYW1lkkEHSgUiY2FvIvpCBXIDG
  MgBUgdvcmdOYW1lEncKBm1ldGhvZBgCIAEoDjIbLnppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZ
  GVmaW5lcyB3aGljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCLVAQoXVXNlckdyYW50T3JnR
  G9tYWluUXVlcnkSQQoKb3JnX2RvbWFpbhgBIAEoCUIi4j8LEglvcmdEb21haW6SQQlKByJPUyBBRyL6QgVyAxjIAVIJb3JnRG9tY
  WluEncKBm1ldGhvZBgCIAEoDjIbLnppdGFkZWwudjEuVGV4dFF1ZXJ5TWV0aG9kQkLiPwgSBm1ldGhvZJJBLDIqZGVmaW5lcyB3a
  GljaCB0ZXh0IGVxdWFsaXR5IG1ldGhvZCBpcyB1c2Vk+kIFggECEAFSBm1ldGhvZCK0AQoZVXNlckdyYW50UHJvamVjdE5hbWVRd
  WVyeRJHCgxwcm9qZWN0X25hbWUYASABKAlCJOI/DRILcHJvamVjdE5hbWWSQQlKByJJVEFERSL6QgVyAxjIAVILcHJvamVjdE5hb
  WUSTgoGbWV0aG9kGAIgASgOMhsueml0YWRlbC52MS5UZXh0UXVlcnlNZXRob2RCGeI/CBIGbWV0aG9kkkEDSgEz+kIFggECEAFSB
  m1ldGhvZCLvAQoZVXNlckdyYW50RGlzcGxheU5hbWVRdWVyeRJeCgxkaXNwbGF5X25hbWUYASABKAlCO+I/DRILZGlzcGxheU5hb
  WWSQSgyFmRpc3BsYXkgbmFtZSBvZiBhIHVzZXJKDiJHaWdpIEdpcmFmZmUiUgtkaXNwbGF5TmFtZRJyCgZtZXRob2QYAiABKA4yG
  y56aXRhZGVsLnYxLlRleHRRdWVyeU1ldGhvZEI94j8IEgZtZXRob2SSQScyJWRlZmluZXMgd2hpY2ggZXF1YWxpdHkgbWV0aG9kI
  GlzIHVzZWT6QgWCAQIQAVIGbWV0aG9kIm0KFlVzZXJHcmFudFVzZXJUeXBlUXVlcnkSUwoEdHlwZRgBIAEoDjIVLnppdGFkZWwud
  XNlci52MS5UeXBlQijiPwYSBHR5cGWSQRwyDHR5cGUgb2YgdXNlckoMIlRZUEVfSFVNQU4iUgR0eXBlKugCCglVc2VyU3RhdGUSN
  woWVVNFUl9TVEFURV9VTlNQRUNJRklFRBAAGhviPxgSFlVTRVJfU1RBVEVfVU5TUEVDSUZJRUQSLQoRVVNFUl9TVEFURV9BQ1RJV
  kUQARoW4j8TEhFVU0VSX1NUQVRFX0FDVElWRRIxChNVU0VSX1NUQVRFX0lOQUNUSVZFEAIaGOI/FRITVVNFUl9TVEFURV9JTkFDV
  ElWRRIvChJVU0VSX1NUQVRFX0RFTEVURUQQAxoX4j8UEhJVU0VSX1NUQVRFX0RFTEVURUQSLQoRVVNFUl9TVEFURV9MT0NLRUQQB
  BoW4j8TEhFVU0VSX1NUQVRFX0xPQ0tFRBIvChJVU0VSX1NUQVRFX1NVU1BFTkQQBRoX4j8UEhJVU0VSX1NUQVRFX1NVU1BFTkQSL
  woSVVNFUl9TVEFURV9JTklUSUFMEAYaF+I/FBISVVNFUl9TVEFURV9JTklUSUFMKqwBCgZHZW5kZXISLwoSR0VOREVSX1VOU1BFQ
  0lGSUVEEAAaF+I/FBISR0VOREVSX1VOU1BFQ0lGSUVEEiUKDUdFTkRFUl9GRU1BTEUQARoS4j8PEg1HRU5ERVJfRkVNQUxFEiEKC
  0dFTkRFUl9NQUxFEAIaEOI/DRILR0VOREVSX01BTEUSJwoOR0VOREVSX0RJVkVSU0UQAxoT4j8QEg5HRU5ERVJfRElWRVJTRSqFA
  QoPQWNjZXNzVG9rZW5UeXBlEjsKGEFDQ0VTU19UT0tFTl9UWVBFX0JFQVJFUhAAGh3iPxoSGEFDQ0VTU19UT0tFTl9UWVBFX0JFQ
  VJFUhI1ChVBQ0NFU1NfVE9LRU5fVFlQRV9KV1QQARoa4j8XEhVBQ0NFU1NfVE9LRU5fVFlQRV9KV1QqeQoEVHlwZRIrChBUWVBFX
  1VOU1BFQ0lGSUVEEAAaFeI/EhIQVFlQRV9VTlNQRUNJRklFRBIfCgpUWVBFX0hVTUFOEAEaD+I/DBIKVFlQRV9IVU1BThIjCgxUW
  VBFX01BQ0hJTkUQAhoR4j8OEgxUWVBFX01BQ0hJTkUq/wQKDVVzZXJGaWVsZE5hbWUSQQobVVNFUl9GSUVMRF9OQU1FX1VOU1BFQ
  0lGSUVEEAAaIOI/HRIbVVNFUl9GSUVMRF9OQU1FX1VOU1BFQ0lGSUVEEj0KGVVTRVJfRklFTERfTkFNRV9VU0VSX05BTUUQARoe4
  j8bEhlVU0VSX0ZJRUxEX05BTUVfVVNFUl9OQU1FEj8KGlVTRVJfRklFTERfTkFNRV9GSVJTVF9OQU1FEAIaH+I/HBIaVVNFUl9GS
  UVMRF9OQU1FX0ZJUlNUX05BTUUSPQoZVVNFUl9GSUVMRF9OQU1FX0xBU1RfTkFNRRADGh7iPxsSGVVTRVJfRklFTERfTkFNRV9MQ
  VNUX05BTUUSPQoZVVNFUl9GSUVMRF9OQU1FX05JQ0tfTkFNRRAEGh7iPxsSGVVTRVJfRklFTERfTkFNRV9OSUNLX05BTUUSQwocV
  VNFUl9GSUVMRF9OQU1FX0RJU1BMQVlfTkFNRRAFGiHiPx4SHFVTRVJfRklFTERfTkFNRV9ESVNQTEFZX05BTUUSNQoVVVNFUl9GS
  UVMRF9OQU1FX0VNQUlMEAYaGuI/FxIVVVNFUl9GSUVMRF9OQU1FX0VNQUlMEjUKFVVTRVJfRklFTERfTkFNRV9TVEFURRAHGhriP
  xcSFVVTRVJfRklFTERfTkFNRV9TVEFURRIzChRVU0VSX0ZJRUxEX05BTUVfVFlQRRAIGhniPxYSFFVTRVJfRklFTERfTkFNRV9UW
  VBFEkUKHVVTRVJfRklFTERfTkFNRV9DUkVBVElPTl9EQVRFEAkaIuI/HxIdVVNFUl9GSUVMRF9OQU1FX0NSRUFUSU9OX0RBVEUql
  QIKD0F1dGhGYWN0b3JTdGF0ZRJFCh1BVVRIX0ZBQ1RPUl9TVEFURV9VTlNQRUNJRklFRBAAGiLiPx8SHUFVVEhfRkFDVE9SX1NUQ
  VRFX1VOU1BFQ0lGSUVEEkEKG0FVVEhfRkFDVE9SX1NUQVRFX05PVF9SRUFEWRABGiDiPx0SG0FVVEhfRkFDVE9SX1NUQVRFX05PV
  F9SRUFEWRI5ChdBVVRIX0ZBQ1RPUl9TVEFURV9SRUFEWRACGhziPxkSF0FVVEhfRkFDVE9SX1NUQVRFX1JFQURZEj0KGUFVVEhfR
  kFDVE9SX1NUQVRFX1JFTU9WRUQQAxoe4j8bEhlBVVRIX0ZBQ1RPUl9TVEFURV9SRU1PVkVEKr8BCgxTZXNzaW9uU3RhdGUSPQoZU
  0VTU0lPTl9TVEFURV9VTlNQRUNJRklFRBAAGh7iPxsSGVNFU1NJT05fU1RBVEVfVU5TUEVDSUZJRUQSMwoUU0VTU0lPTl9TVEFUR
  V9BQ1RJVkUQARoZ4j8WEhRTRVNTSU9OX1NUQVRFX0FDVElWRRI7ChhTRVNTSU9OX1NUQVRFX1RFUk1JTkFURUQQAhod4j8aEhhTR
  VNTSU9OX1NUQVRFX1RFUk1JTkFURUQqzwEKDlVzZXJHcmFudFN0YXRlEkMKHFVTRVJfR1JBTlRfU1RBVEVfVU5TUEVDSUZJRUQQA
  Boh4j8eEhxVU0VSX0dSQU5UX1NUQVRFX1VOU1BFQ0lGSUVEEjkKF1VTRVJfR1JBTlRfU1RBVEVfQUNUSVZFEAEaHOI/GRIXVVNFU
  l9HUkFOVF9TVEFURV9BQ1RJVkUSPQoZVVNFUl9HUkFOVF9TVEFURV9JTkFDVElWRRACGh7iPxsSGVVTRVJfR1JBTlRfU1RBVEVfS
  U5BQ1RJVkVCqAEKE2NvbS56aXRhZGVsLnVzZXIudjFCCVVzZXJQcm90b1ABWihnaXRodWIuY29tL3ppdGFkZWwveml0YWRlbC9wa
  2cvZ3JwYy91c2VyogIDWlVYqgIPWml0YWRlbC5Vc2VyLlYxygIPWml0YWRlbFxVc2VyXFYx4gIbWml0YWRlbFxVc2VyXFYxXEdQQ
  k1ldGFkYXRh6gIRWml0YWRlbDo6VXNlcjo6VjFiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.zitadel.v1.`object`.ObjectProto.javaDescriptor,
      com.validate.validate.ValidateProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.grpc.gateway.protoc_gen_openapiv2.options.annotations.AnnotationsProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}