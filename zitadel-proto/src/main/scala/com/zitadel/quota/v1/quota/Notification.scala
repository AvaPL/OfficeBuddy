// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.quota.v1.quota

/** @param percent
  *   The percentage relative to the quotas amount on which the call_url should be called.
  * @param repeat
  *   If true, the call_url is called each time a factor of percentage is reached.
  * @param callUrl
  *   The URL, which is called with HTTP method POST and a JSON payload with the properties "unit", "id" (notification id), "callURL", "periodStart", "threshold" and "usage".
  */
@SerialVersionUID(0L)
final case class Notification(
    percent: _root_.scala.Int = 0,
    repeat: _root_.scala.Boolean = false,
    callUrl: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Notification] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = percent
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      
      {
        val __value = repeat
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      
      {
        val __value = callUrl
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = percent
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = repeat
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      {
        val __v = callUrl
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withPercent(__v: _root_.scala.Int): Notification = copy(percent = __v)
    def withRepeat(__v: _root_.scala.Boolean): Notification = copy(repeat = __v)
    def withCallUrl(__v: _root_.scala.Predef.String): Notification = copy(callUrl = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = percent
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = repeat
          if (__t != false) __t else null
        }
        case 3 => {
          val __t = callUrl
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(percent)
        case 2 => _root_.scalapb.descriptors.PBoolean(repeat)
        case 3 => _root_.scalapb.descriptors.PString(callUrl)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.quota.v1.quota.Notification.type = com.zitadel.quota.v1.quota.Notification
    // @@protoc_insertion_point(GeneratedMessage[zitadel.quota.v1.Notification])
}

object Notification extends scalapb.GeneratedMessageCompanion[com.zitadel.quota.v1.quota.Notification] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.quota.v1.quota.Notification] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.quota.v1.quota.Notification = {
    var __percent: _root_.scala.Int = 0
    var __repeat: _root_.scala.Boolean = false
    var __callUrl: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __percent = _input__.readUInt32()
        case 16 =>
          __repeat = _input__.readBool()
        case 26 =>
          __callUrl = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.quota.v1.quota.Notification(
        percent = __percent,
        repeat = __repeat,
        callUrl = __callUrl,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.quota.v1.quota.Notification] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.quota.v1.quota.Notification(
        percent = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        repeat = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        callUrl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = QuotaProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = QuotaProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.quota.v1.quota.Notification(
    percent = 0,
    repeat = false,
    callUrl = ""
  )
  implicit class NotificationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.quota.v1.quota.Notification]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.quota.v1.quota.Notification](_l) {
    def percent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.percent)((c_, f_) => c_.copy(percent = f_))
    def repeat: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.repeat)((c_, f_) => c_.copy(repeat = f_))
    def callUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.callUrl)((c_, f_) => c_.copy(callUrl = f_))
  }
  final val PERCENT_FIELD_NUMBER = 1
  final val REPEAT_FIELD_NUMBER = 2
  final val CALL_URL_FIELD_NUMBER = 3
  def of(
    percent: _root_.scala.Int,
    repeat: _root_.scala.Boolean,
    callUrl: _root_.scala.Predef.String
  ): _root_.com.zitadel.quota.v1.quota.Notification = _root_.com.zitadel.quota.v1.quota.Notification(
    percent,
    repeat,
    callUrl
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.quota.v1.Notification])
}
