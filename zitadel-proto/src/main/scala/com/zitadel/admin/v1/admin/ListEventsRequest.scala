// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.admin.v1.admin

@SerialVersionUID(0L)
final case class ListEventsRequest(
    sequence: _root_.scala.Long = 0L,
    limit: _root_.scala.Int = 0,
    asc: _root_.scala.Boolean = false,
    editorUserId: _root_.scala.Predef.String = "",
    eventTypes: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    aggregateId: _root_.scala.Predef.String = "",
    aggregateTypes: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    resourceOwner: _root_.scala.Predef.String = "",
    creationDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ListEventsRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sequence
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = limit
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
        }
      };
      
      {
        val __value = asc
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      
      {
        val __value = editorUserId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      eventTypes.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      
      {
        val __value = aggregateId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      aggregateTypes.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      
      {
        val __value = resourceOwner
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      if (creationDate.isDefined) {
        val __value = creationDate.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sequence
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = limit
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      {
        val __v = asc
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = editorUserId
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      eventTypes.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      {
        val __v = aggregateId
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      aggregateTypes.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      {
        val __v = resourceOwner
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      creationDate.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withSequence(__v: _root_.scala.Long): ListEventsRequest = copy(sequence = __v)
    def withLimit(__v: _root_.scala.Int): ListEventsRequest = copy(limit = __v)
    def withAsc(__v: _root_.scala.Boolean): ListEventsRequest = copy(asc = __v)
    def withEditorUserId(__v: _root_.scala.Predef.String): ListEventsRequest = copy(editorUserId = __v)
    def clearEventTypes = copy(eventTypes = _root_.scala.Seq.empty)
    def addEventTypes(__vs: _root_.scala.Predef.String *): ListEventsRequest = addAllEventTypes(__vs)
    def addAllEventTypes(__vs: Iterable[_root_.scala.Predef.String]): ListEventsRequest = copy(eventTypes = eventTypes ++ __vs)
    def withEventTypes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ListEventsRequest = copy(eventTypes = __v)
    def withAggregateId(__v: _root_.scala.Predef.String): ListEventsRequest = copy(aggregateId = __v)
    def clearAggregateTypes = copy(aggregateTypes = _root_.scala.Seq.empty)
    def addAggregateTypes(__vs: _root_.scala.Predef.String *): ListEventsRequest = addAllAggregateTypes(__vs)
    def addAllAggregateTypes(__vs: Iterable[_root_.scala.Predef.String]): ListEventsRequest = copy(aggregateTypes = aggregateTypes ++ __vs)
    def withAggregateTypes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ListEventsRequest = copy(aggregateTypes = __v)
    def withResourceOwner(__v: _root_.scala.Predef.String): ListEventsRequest = copy(resourceOwner = __v)
    def getCreationDate: com.google.protobuf.timestamp.Timestamp = creationDate.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearCreationDate: ListEventsRequest = copy(creationDate = _root_.scala.None)
    def withCreationDate(__v: com.google.protobuf.timestamp.Timestamp): ListEventsRequest = copy(creationDate = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sequence
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = limit
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = asc
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = editorUserId
          if (__t != "") __t else null
        }
        case 5 => eventTypes
        case 6 => {
          val __t = aggregateId
          if (__t != "") __t else null
        }
        case 7 => aggregateTypes
        case 8 => {
          val __t = resourceOwner
          if (__t != "") __t else null
        }
        case 9 => creationDate.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(sequence)
        case 2 => _root_.scalapb.descriptors.PInt(limit)
        case 3 => _root_.scalapb.descriptors.PBoolean(asc)
        case 4 => _root_.scalapb.descriptors.PString(editorUserId)
        case 5 => _root_.scalapb.descriptors.PRepeated(eventTypes.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PString(aggregateId)
        case 7 => _root_.scalapb.descriptors.PRepeated(aggregateTypes.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 8 => _root_.scalapb.descriptors.PString(resourceOwner)
        case 9 => creationDate.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.admin.v1.admin.ListEventsRequest.type = com.zitadel.admin.v1.admin.ListEventsRequest
    // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.ListEventsRequest])
}

object ListEventsRequest extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ListEventsRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.ListEventsRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.ListEventsRequest = {
    var __sequence: _root_.scala.Long = 0L
    var __limit: _root_.scala.Int = 0
    var __asc: _root_.scala.Boolean = false
    var __editorUserId: _root_.scala.Predef.String = ""
    val __eventTypes: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __aggregateId: _root_.scala.Predef.String = ""
    val __aggregateTypes: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __resourceOwner: _root_.scala.Predef.String = ""
    var __creationDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __sequence = _input__.readUInt64()
        case 16 =>
          __limit = _input__.readUInt32()
        case 24 =>
          __asc = _input__.readBool()
        case 34 =>
          __editorUserId = _input__.readStringRequireUtf8()
        case 42 =>
          __eventTypes += _input__.readStringRequireUtf8()
        case 50 =>
          __aggregateId = _input__.readStringRequireUtf8()
        case 58 =>
          __aggregateTypes += _input__.readStringRequireUtf8()
        case 66 =>
          __resourceOwner = _input__.readStringRequireUtf8()
        case 74 =>
          __creationDate = Option(__creationDate.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.admin.v1.admin.ListEventsRequest(
        sequence = __sequence,
        limit = __limit,
        asc = __asc,
        editorUserId = __editorUserId,
        eventTypes = __eventTypes.result(),
        aggregateId = __aggregateId,
        aggregateTypes = __aggregateTypes.result(),
        resourceOwner = __resourceOwner,
        creationDate = __creationDate,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.ListEventsRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.admin.v1.admin.ListEventsRequest(
        sequence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        limit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        asc = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        editorUserId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        eventTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        aggregateId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        aggregateTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        resourceOwner = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        creationDate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(325)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(325)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 9 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.admin.v1.admin.ListEventsRequest(
    sequence = 0L,
    limit = 0,
    asc = false,
    editorUserId = "",
    eventTypes = _root_.scala.Seq.empty,
    aggregateId = "",
    aggregateTypes = _root_.scala.Seq.empty,
    resourceOwner = "",
    creationDate = _root_.scala.None
  )
  implicit class ListEventsRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.ListEventsRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.ListEventsRequest](_l) {
    def sequence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sequence)((c_, f_) => c_.copy(sequence = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def asc: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.asc)((c_, f_) => c_.copy(asc = f_))
    def editorUserId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.editorUserId)((c_, f_) => c_.copy(editorUserId = f_))
    def eventTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.eventTypes)((c_, f_) => c_.copy(eventTypes = f_))
    def aggregateId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.aggregateId)((c_, f_) => c_.copy(aggregateId = f_))
    def aggregateTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.aggregateTypes)((c_, f_) => c_.copy(aggregateTypes = f_))
    def resourceOwner: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resourceOwner)((c_, f_) => c_.copy(resourceOwner = f_))
    def creationDate: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getCreationDate)((c_, f_) => c_.copy(creationDate = Option(f_)))
    def optionalCreationDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.creationDate)((c_, f_) => c_.copy(creationDate = f_))
  }
  final val SEQUENCE_FIELD_NUMBER = 1
  final val LIMIT_FIELD_NUMBER = 2
  final val ASC_FIELD_NUMBER = 3
  final val EDITOR_USER_ID_FIELD_NUMBER = 4
  final val EVENT_TYPES_FIELD_NUMBER = 5
  final val AGGREGATE_ID_FIELD_NUMBER = 6
  final val AGGREGATE_TYPES_FIELD_NUMBER = 7
  final val RESOURCE_OWNER_FIELD_NUMBER = 8
  final val CREATION_DATE_FIELD_NUMBER = 9
  def of(
    sequence: _root_.scala.Long,
    limit: _root_.scala.Int,
    asc: _root_.scala.Boolean,
    editorUserId: _root_.scala.Predef.String,
    eventTypes: _root_.scala.Seq[_root_.scala.Predef.String],
    aggregateId: _root_.scala.Predef.String,
    aggregateTypes: _root_.scala.Seq[_root_.scala.Predef.String],
    resourceOwner: _root_.scala.Predef.String,
    creationDate: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]
  ): _root_.com.zitadel.admin.v1.admin.ListEventsRequest = _root_.com.zitadel.admin.v1.admin.ListEventsRequest(
    sequence,
    limit,
    asc,
    editorUserId,
    eventTypes,
    aggregateId,
    aggregateTypes,
    resourceOwner,
    creationDate
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.ListEventsRequest])
}
