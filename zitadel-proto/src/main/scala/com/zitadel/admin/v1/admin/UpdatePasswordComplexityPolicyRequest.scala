// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zitadel.admin.v1.admin

@SerialVersionUID(0L)
final case class UpdatePasswordComplexityPolicyRequest(
    minLength: _root_.scala.Int = 0,
    hasUppercase: _root_.scala.Boolean = false,
    hasLowercase: _root_.scala.Boolean = false,
    hasNumber: _root_.scala.Boolean = false,
    hasSymbol: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdatePasswordComplexityPolicyRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = minLength
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      
      {
        val __value = hasUppercase
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      
      {
        val __value = hasLowercase
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      
      {
        val __value = hasNumber
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = hasSymbol
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = minLength
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = hasUppercase
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      {
        val __v = hasLowercase
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = hasNumber
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = hasSymbol
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withMinLength(__v: _root_.scala.Int): UpdatePasswordComplexityPolicyRequest = copy(minLength = __v)
    def withHasUppercase(__v: _root_.scala.Boolean): UpdatePasswordComplexityPolicyRequest = copy(hasUppercase = __v)
    def withHasLowercase(__v: _root_.scala.Boolean): UpdatePasswordComplexityPolicyRequest = copy(hasLowercase = __v)
    def withHasNumber(__v: _root_.scala.Boolean): UpdatePasswordComplexityPolicyRequest = copy(hasNumber = __v)
    def withHasSymbol(__v: _root_.scala.Boolean): UpdatePasswordComplexityPolicyRequest = copy(hasSymbol = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = minLength
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = hasUppercase
          if (__t != false) __t else null
        }
        case 3 => {
          val __t = hasLowercase
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = hasNumber
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = hasSymbol
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(minLength)
        case 2 => _root_.scalapb.descriptors.PBoolean(hasUppercase)
        case 3 => _root_.scalapb.descriptors.PBoolean(hasLowercase)
        case 4 => _root_.scalapb.descriptors.PBoolean(hasNumber)
        case 5 => _root_.scalapb.descriptors.PBoolean(hasSymbol)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest.type = com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest
    // @@protoc_insertion_point(GeneratedMessage[zitadel.admin.v1.UpdatePasswordComplexityPolicyRequest])
}

object UpdatePasswordComplexityPolicyRequest extends scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest = {
    var __minLength: _root_.scala.Int = 0
    var __hasUppercase: _root_.scala.Boolean = false
    var __hasLowercase: _root_.scala.Boolean = false
    var __hasNumber: _root_.scala.Boolean = false
    var __hasSymbol: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __minLength = _input__.readUInt32()
        case 16 =>
          __hasUppercase = _input__.readBool()
        case 24 =>
          __hasLowercase = _input__.readBool()
        case 32 =>
          __hasNumber = _input__.readBool()
        case 40 =>
          __hasSymbol = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest(
        minLength = __minLength,
        hasUppercase = __hasUppercase,
        hasLowercase = __hasLowercase,
        hasNumber = __hasNumber,
        hasSymbol = __hasSymbol,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest(
        minLength = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        hasUppercase = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        hasLowercase = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        hasNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        hasSymbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(208)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(208)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest(
    minLength = 0,
    hasUppercase = false,
    hasLowercase = false,
    hasNumber = false,
    hasSymbol = false
  )
  implicit class UpdatePasswordComplexityPolicyRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest](_l) {
    def minLength: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.minLength)((c_, f_) => c_.copy(minLength = f_))
    def hasUppercase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hasUppercase)((c_, f_) => c_.copy(hasUppercase = f_))
    def hasLowercase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hasLowercase)((c_, f_) => c_.copy(hasLowercase = f_))
    def hasNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hasNumber)((c_, f_) => c_.copy(hasNumber = f_))
    def hasSymbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hasSymbol)((c_, f_) => c_.copy(hasSymbol = f_))
  }
  final val MIN_LENGTH_FIELD_NUMBER = 1
  final val HAS_UPPERCASE_FIELD_NUMBER = 2
  final val HAS_LOWERCASE_FIELD_NUMBER = 3
  final val HAS_NUMBER_FIELD_NUMBER = 4
  final val HAS_SYMBOL_FIELD_NUMBER = 5
  def of(
    minLength: _root_.scala.Int,
    hasUppercase: _root_.scala.Boolean,
    hasLowercase: _root_.scala.Boolean,
    hasNumber: _root_.scala.Boolean,
    hasSymbol: _root_.scala.Boolean
  ): _root_.com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest = _root_.com.zitadel.admin.v1.admin.UpdatePasswordComplexityPolicyRequest(
    minLength,
    hasUppercase,
    hasLowercase,
    hasNumber,
    hasSymbol
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[zitadel.admin.v1.UpdatePasswordComplexityPolicyRequest])
}
